/*************************************************************************************************
**
**    OPERATION: ActivateQueryObject
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ActivateQueryObjectO( VIEW zqFrame BASED ON LOD zqFrame,
                      VIEW vResultSet )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqFrameRoot BASED ON LOD  zqFrame
   VIEW vQualObject
   VIEW vQualTemp
   VIEW vConvertObject
   STRING ( 32 )  szObjectName
   STRING ( 32 )  szEntityName
   SHORT          nRC

   // Format a qualification object from the query criteria in zqFrame and activate the query object3
   // based on the qualification. Then apply any postactivate qualification from zqFrame.

   GET VIEW vQualObject NAMED "vQualObject"
   IF RESULT >= 0
      DropObjectInstance( vQualObject )
   END
   GET VIEW vResultSet NAMED "ResultSet"
   IF RESULT >= 0
      DropObjectInstance( vResultSet )
   END
   GET VIEW vResultSet NAMED "OriginalResultSet"
   IF RESULT >= 0
      DropObjectInstance( vResultSet )
   END

   // Build the qualification information and activate the object.
   // Note that the BuildQualFromFrame operation requires an instance of the object to be
   // queried for data conversion.
   szObjectName = zqFrame.zqFrame.QueryObjectName
   ActivateEmptyObjectInstance( vConvertObject, szObjectName, zqFrame, zSINGLE )
   nRC = BuildQualFromFrame( zqFrame, vQualObject, vConvertObject )
   IF nRC < 0
      RETURN -1
   END
   DropObjectInstance( vConvertObject )
   IF nRC < 0
      RETURN -1
   END
   SET CURSOR FIRST vQualObject.QualAttrib
   IF RESULT >= zCURSOR_SET

      // Fix the "not equal" SQL problem by adding a test for NULL.
      FOR EACH vQualObject.QualAttrib
         IF vQualObject.QualAttrib.Oper = "<>" AND 
            vQualObject.QualAttrib.Value != "" 

            CreateViewFromView( vQualTemp, vQualObject )
            CreateEntity( vQualTemp, "QualAttrib", zPOS_BEFORE )
            SetAttributeFromString( vQualTemp, "QualAttrib", "Oper", "(" )

            CreateEntity( vQualTemp, "QualAttrib", zPOS_AFTER )
            SetMatchingAttributesByName( vQualTemp, "QualAttrib",
                                         vQualObject, "QualAttrib", zSET_ALL )
            SetAttributeFromString( vQualTemp, "QualAttrib", "Oper", "IS NULL" )
            SetAttributeFromString( vQualTemp, "QualAttrib", "Value", "" )

            CreateEntity( vQualTemp, "QualAttrib", zPOS_AFTER )
            SetAttributeFromString( vQualTemp, "QualAttrib", "Oper", "OR" )

            CreateEntity( vQualObject, "QualAttrib", zPOS_AFTER )
            SetAttributeFromString( vQualObject, "QualAttrib", "Oper", ")" )

            DropView( vQualTemp )
         END
      END

      SET CURSOR FIRST vQualObject.QualAttrib
      nRC = ActivateObjectInstance( vResultSet, szObjectName, zqFrame, vQualObject, zMULTIPLE )
   ELSE
      nRC = ActivateObjectInstance( vResultSet, szObjectName, zqFrame, 0, zMULTIPLE )
   END

   IF nRC >= 0
      NAME VIEW vResultSet "ResultSet"
      
      // If the object supports Seasonal Address, call the operation to process.
      // We will do this by searching the object definition for entity, "CurrentMailingAddress" )
      // Seasonal Address check removed by DonC on 9/19/18.
      /*nRC = zGetFirstEntityNameForView( vResultSet, szEntityName )
      LOOP WHILE nRC >= zCURSOR_SET AND szEntityName != "CurrentMailingAddress"
         nRC = zGetNextEntityNameForView( vResultSet, szEntityName )
      END
      IF szEntityName = "CurrentMailingAddress"
         GenerateSeasonalAddresses( vResultSet, wXferO, szObjectName )
      END*/
   END

   IF nRC = 2
      MessageSend( zqFrame, "", "Query",
                   "The maximum number of Query entries has been reached. Qualify the Query further for correct results.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END

   // Go to perform post activate processing.
   nRC = PostActivateProc( zqFrame, vResultSet )
   IF nRC < 0
      RETURN nRC
   END

END

/*************************************************************************************************
**
**    OPERATION: AnalyzeReformatResult
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
AnalyzeReformatResult( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW vResultSet )

   VIEW zqSumR   BASED ON LOD zqSumR
   SHORT nRC
   
   // If Breakpoint processing is requested, transform the vResultSet just activated into the
   // zqSumR display object.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.BreakpointType != ""
   IF RESULT >= zCURSOR_SET
      BuildSummaryResultSet( zqSumR, zqFrame, vResultSet )
      NAME VIEW zqSumR "zqSumR"
   
      // Modify the Display information to map from the zqSumR OI as the Result Set.
      BuildDisplayValues( zqSumR, zqFrame )
      SET CURSOR FIRST zqFrame.ParentEntity   // Make sure the ParentEntity has valid cursor position.
   END

END

/*************************************************************************************************
**
**    OPERATION: PostActivateProc
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
PostActivateProc( VIEW zqFrame BASED ON LOD zqFrame,
                  VIEW vResultSet )

   VIEW zqFrameRoot BASED ON LOD zqFrame
   STRING ( 32 )  RootEntityName
   DECIMAL        OperationResult
   INTEGER        RootCount
   INTEGER        SubgroupSuffixCount
   SHORT          nRC

   // Format the Query object for Result Set display and do any specified post Activate
   // processing on the Result Set.

   RootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName

   // Set up suffixes for Subgroup Display values. This allows the Result Set to be displayed
   // in the Root Only list box, showing MAX, MIN, etc. This has to be redone each time the attributes
   // to be displayed are changed.
   SubgroupSuffixCount = 0
   FOR EACH zqFrame.GeneralParameter
      // Build the ListDisplaySuffix value and create the SubgroupDisplayEntry entity.
      IF zqFrame.GeneralParameter.ListDisplayFlag = "Y" AND
         zqFrame.GeneralParameter.SubgroupSearchType != ""

         IF zqFrame.GeneralParameter.SubgroupSearchType != "ANY" AND
            zqFrame.GeneralParameter.SubgroupSearchType != "ALL"

            SubgroupSuffixCount = SubgroupSuffixCount + 1
            IF SubgroupSuffixCount <= 4
               CREATE ENTITY zqFrame.SubgroupDisplayEntry
               zqFrame.SubgroupDisplayEntry.EntityName         = zqFrame.GeneralParameter.EntityName
               zqFrame.SubgroupDisplayEntry.AttributeName      = zqFrame.GeneralParameter.AttributeName
               zqFrame.SubgroupDisplayEntry.SubgroupSearchType = zqFrame.GeneralParameter.SubgroupSearchType
               SetAttributeFromInteger( zqFrame, "SubgroupDisplayEntry", "ListDisplaySuffix",
                                        SubgroupSuffixCount )
               SetAttributeFromInteger( zqFrame, "GeneralParameter", "ListDisplaySuffix",
                                        SubgroupSuffixCount )
            END
         END
      END
   END

   // Loop through all root entities and drop any that don't meet additional selection criteria.
   RootCount = 0
   IF vResultSet != 0
      nRC = SetCursorFirstEntity( vResultSet, RootEntityName, "" )
   ELSE
      nRC = -1
   END

   LOOP WHILE nRC >= zCURSOR_SET
      // Call routine to evaluate subselection criteria.
      nRC = CheckSubgroupSelection( zqFrame, vResultSet,
                                    zqFrame.zqFrame.QueryObjectRootEntityName,
                                    "Y" )   // Y indicates this is Root Entity qualification.
      IF nRC < 0
         // Selection criteria was not met, so drop the entity.
         DropEntity( vResultSet, RootEntityName, zREPOS_NONE )
      ELSE
         RootCount = RootCount + 1
         // Perform restricting functionality on any 0-to-m subobject entities, if such a request
         // has been made.
         SET CURSOR FIRST zqFrame.PostActivateQual
               WHERE zqFrame.PostActivateQual.ScopingEntityName != zqFrame.zqFrame.QueryObjectRootEntityName
         IF RESULT >= zCURSOR_SET
            CreateViewFromView( zqFrameRoot, zqFrame )
            PostActivateRecurs( zqFrame, zqFrameRoot, vResultSet )
            DropView( zqFrameRoot )
         ELSE
            SET CURSOR FIRST zqFrame.SortOrderEntity
                  WHERE zqFrame.SortOrderEntity.EntityName != zqFrame.zqFrame.QueryObjectRootEntityName
            IF RESULT >= zCURSOR_SET
               CreateViewFromView( zqFrameRoot, zqFrame )
               PostActivateRecurs( zqFrame, zqFrameRoot, vResultSet )
               DropView( zqFrameRoot )
            END
         END
      END
      nRC = SetCursorNextEntity( vResultSet, RootEntityName, "" )
   END

   zqFrame.zqFrame.CountOfReturnedRoots = RootCount

   // Order the OI by the root entity if requested.
   IF vResultSet != 0
      OrderRequestedEntity( zqFrame, vResultSet, RootEntityName )
   END

   // Give an error message if no entries meet the selection criteria and were are performing
   // a new Query (that is we're not working with an existing Result Set).
   IF RootCount = 0 AND zqFrame.zqFrame.wPostActivateFlag != "Y"
      MessageSend( zqFrame, "", "Query",
                   "No entries met the selection criteria.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -2
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_FrmResultSet
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_FrmResultSet( VIEW zqFrameRoot BASED ON LOD zqFrame,
                        VIEW vLOD,
                        VIEW vResultSet,
                        STRING ( 1 ) szTypeFlag,
                        STRING ( 200 ) OutputFileName )

   VIEW vQualObject
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW zqSumR      BASED ON LOD  zqSumR
   VIEW mUser       BASED ON LOD  mUser
   VIEW wXferO      REGISTERED AS wXferO
   VIEW sHost       REGISTERED AS sHost
   STRING ( 10000 ) OutputLine
   STRING ( 10000 ) FormattedValue
   STRING ( 200 )  szLangConv
   STRING ( 500 )  szDisplayValue
   STRING ( 200 )  szMsg
   STRING ( 32 )   RootEntityName
   STRING ( 32 )   szObjectName
   STRING ( 32 )   szMappingEntityName
   STRING ( 32 )   szTraceEntityName
   STRING ( 3 )    szHierarchicalLevel
   STRING ( 3 )    szLastHierarchicalLevel
   STRING ( 100 )  szTraceLine
   STRING ( 1 )    szPivotOptionFlag
   STRING ( 32 ) szDateFormat
   STRING ( 32 ) szTimeFormat
   STRING ( 32 ) szCurrentDate
   STRING ( 32 ) szCurrentTime
   DECIMAL         OperationResult
   INTEGER         FilePointer
   INTEGER         NextColumnNumber
   INTEGER         HierarchicalLevel
   INTEGER         LastHierarchicalLevel
   INTEGER         ColumnCount
   SHORT           nRC

   GET VIEW mUser NAMED "mCurrentUser"
   szDateFormat = sHost.Host.DateFormat 
   szTimeFormat = sHost.Host.TimeFormat  
   GetStringFromAttributeByContext( szCurrentDate, wXferO, "Root", "dCurrentDate", szDateFormat, 32 )
   GetStringFromAttributeByContext( szCurrentTime, wXferO, "Root", "dCurrentTime", szTimeFormat, 32 )
   // Format a Result Set to CSV file OutputFileName..
   
   //CreateViewFromView( zqFrameRoot, zqFrame )
   NAME VIEW zqFrameRoot "zqFrameRootA"
   CreateViewFromView( zqFrame, zqFrameRoot )
   NAME VIEW zqFrame "zqFrameRecursA"
   
   // Open the file.
   TraceLineS( "*** Full File Name: ", OutputFileName )
   FilePointer = SysOpenFile( zqFrame, OutputFileName, COREFILE_CREATE )
   IF FilePointer < 0
      GetTextConv(szLangConv, zqFrame, "Invalid Directory for writing CSV Query File: ","")
      szMsg = szLangConv + FormattedValue
      MessageSend( zqFrame, "", "Query", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -1
   END
   
   // Create the Report title line.
   GetTextConv( szLangConv, zqFrame, "Name","")
   OutputLine = szLangConv + ": "+ zqFrame.zqFrame.ReportTitle 
   SysWriteLine( zqFrame, FilePointer, OutputLine )
   GetTextConv( szLangConv, zqFrame, "Query Topic","")
   OutputLine = szLangConv + ": "+ zqFrame.zqFrame.QueryObjectRootEntityName + " / "+zqFrame.zqFrame.QueryObjectName  
   SysWriteLine( zqFrame, FilePointer, OutputLine )
   GetTextConv( szLangConv, zqFrame, "Created Date/Time","")
   OutputLine = szLangConv + ": " + szCurrentDate +  " " + szCurrentTime
   SysWriteLine( zqFrame, FilePointer, OutputLine )
   GetTextConv( szLangConv, zqFrame, "User","")
   OutputLine = szLangConv + ": " + mUser.User.UserName 
   SysWriteLine( zqFrame, FilePointer, OutputLine )
   OutputLine = " "
   SysWriteLine( zqFrame, FilePointer, OutputLine )
   
   IF zqFrameRoot.zqFrame.wCurrentDisplayFormat = "R"
      // We're formatting a Detail result set, so initialize the ResultSetDisplay entity..
      FOR EACH zqFrameRoot.ResultSetDisplay
         DELETE ENTITY zqFrameRoot.ResultSetDisplay NONE 
      END
      CREATE ENTITY zqFrameRoot.ResultSetDisplay  
      CREATE ENTITY zqFrameRoot.ResultSetDisplayRow  
   END
   
   // Process types differently.
   // First check if this is a Pivot table, because a Pivot may also have a Breakpoint.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.PivotRowEntityFlag = "Y" 
   IF RESULT >= zCURSOR_SET
      szPivotOptionFlag = "Y"
      MessageSend( zqFrame, "zqFramePTNS", "Query", "Pivot Tables are not suported for generating CSV files.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -1
   END

   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.BreakpointType != "" 
   IF RESULT >= zCURSOR_SET
      // Breakpoint Queries have their own formatting routine,
      GET VIEW zqSumR NAMED "zqSumR"
      FormatCSV_BreakPtsFile( zqSumR, FilePointer )
   ELSE    
      
      // For regular queries, build the ParentEntity subobject for formatting attributes flagged for display
      // and set the RootEntityName.
      // For Pivot Queries, the ParentEntity subobject already exists, so just set the RootEntityName.
      IF szPivotOptionFlag = "Y"
         RootEntityName = "ResultRow"
      ELSE
         RootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName
         FormatDisplay( zqFrame, vLOD )
      END
      
      // If there are any operations (COUNT, SUM, etc.) on the root entity, go to create lines for
      // both the prompt and the operation value, unless this is a Pivot.
      SET CURSOR FIRST zqFrame.GeneralParameter 
                 WHERE zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName 
                   AND zqFrame.GeneralParameter.ListDisplayFlag = "Y"
                   AND ( zqFrame.GeneralParameter.SubgroupSearchType = "COUNT"
                      OR zqFrame.GeneralParameter.SubgroupSearchType = "NNULL"
                      OR zqFrame.GeneralParameter.SubgroupSearchType = "MIN"
                      OR zqFrame.GeneralParameter.SubgroupSearchType = "MAX"
                      OR zqFrame.GeneralParameter.SubgroupSearchType = "SUM"
                      OR zqFrame.GeneralParameter.SubgroupSearchType = "AVG" )
      IF RESULT >= zCURSOR_SET 
         // First format the Title line.
         FOR EACH zqFrame.GeneralParameter
                 WHERE zqFrame.GeneralParameter.SubgroupSearchType != ""
                   AND zqFrame.GeneralParameter.ListDisplayFlag = "Y"
                   AND zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
            szDisplayValue = zqFrame.GeneralParameter.Title
            OutputLine = OutputLine + QUOTES + szDisplayValue + QUOTES + ","
         END
         SysWriteLine( zqFrame, FilePointer, OutputLine )
         OutputLine = ""
      
         // Next format the values line.
         FormatCSV_TotalsLine( zqFrame, OutputLine, vResultSet )
         SysWriteLine( zqFrame, FilePointer, OutputLine )
      END
   
      // Create the single title line for the displayed attributes, also initializing the file information.
      OutputLine = ""
      NextColumnNumber = 0
      IF szTypeFlag = "F"
         // Format the title for Full CSV file and build the CSV_OutputLineItem entries for sorting and display column values.
         FOR EACH zqFrame.CSV_OutputLineItem
            DELETE ENTITY zqFrame.CSV_OutputLineItem NONE 
         END
         FormatCSV_TitleRecurs( zqFrame, zqFrameRoot, OutputLine, NextColumnNumber, szTypeFlag, 0 )
         OrderEntityForView( zqFrame, "CSV_OutputLineItem", "SortOrder A" )
         FormatCSV_FullOutput( zqFrame, OutputLine )
      ELSE
         // Format the title for Sparse CSV file.
         FormatCSV_TitleRecurs( zqFrame, zqFrameRoot, OutputLine, NextColumnNumber, szTypeFlag, 0 )
      END
   
      // Loop through all entities in the Result Set, formatting to the output line those attributes
      // which have been marked for display. The zqFrame.ParentEntity subobject has been set up with those
      // attributes to be mapped. 
      nRC = SetCursorFirstEntity( vResultSet, RootEntityName, "" )
      LOOP WHILE nRC >= zCURSOR_SET
         // Write out the last line and null output line and CSV_OutputLineItem entries.
         IF OutputLine != ""
            IF szTypeFlag = "F"
               FormatCSV_FullOutput( zqFrame, OutputLine )
               FOR EACH zqFrame.CSV_OutputLineItem
                  zqFrame.CSV_OutputLineItem.Value = ""
               END
               //szHierarchicalLevel = HierarchicalLevel
               //szLastHierarchicalLevel = LastHierarchicalLevel
               //szTraceLine = szLastHierarchicalLevel + " " + szHierarchicalLevel + " " + OutputLine
               //IssueError( zqFrame,0,0, szTraceLine )
               SysWriteLine( zqFrame, FilePointer, OutputLine )
               OutputLine = ""
            ELSE
               SysWriteLine( zqFrame, FilePointer, OutputLine )
               OutputLine = ""
            END
            IF zqFrame.zqFrame.wCurrentDisplayFormat = "R"
               CREATE ENTITY zqFrameRoot.ResultSetDisplayRow
               ColumnCount = 1
            END
         END
   
         // Add root data to output.
         // Note that all the attributes to be mapped with the Root entity are listed as QueryAttribute entities,
         // even if they come from entities that are not 1-to-1 children under the Root.
         FOR EACH zqFrame.QueryAttribute   
            IF zqFrame.QueryAttribute.GroupOperation != ""    // Not sure what this is (DonC 5/28/2021)
               ComputeOperationValue( zqFrame,
                                      vResultSet,
                                      OperationResult,
                                      zqFrame.QueryAttribute.GroupOperation,
                                      zqFrame.QueryAttribute.GroupOperationEntityName,
                                      zqFrame.QueryAttribute.GroupOperationAttributeName,
                                      zqFrame.QueryAttribute.GroupOperationScopingEntityName )
               wXferO.QueryValues.WorkRevenue = OperationResult
               FormattedValue = wXferO.QueryValues.WorkRevenue
            ELSE
               szMappingEntityName = zqFrame.QueryAttribute.MappingEntityName 
               IF szMappingEntityName = ""
                  FormattedValue = ""
               ELSE
                  nRC = CheckExistenceOfEntity( vResultSet, szMappingEntityName )
                  IF nRC < zCURSOR_SET
                     FormattedValue = ""
                  ELSE
                     // Format the attribute through the Default Context filter, unless value is null.
                     nRC = CompareAttributeToString( vResultSet,
                                                     szMappingEntityName,
                                                     zqFrame.QueryAttribute.AttributeName, "" )
                     IF nRC = 0
                        FormattedValue = ""
                     ElSE
                        GetStrFromAttrByContext( FormattedValue, 10000,
                                                 vResultSet,
                                                 szMappingEntityName,
                                                 zqFrame.QueryAttribute.AttributeName, "" )  // Use default context.
                     END
                  END
               END
            END
   
            IF szTypeFlag = "F"
               IF zqFrame.QueryAttribute.GroupOperation = "" 
                  SET CURSOR FIRST zqFrame.CSV_OutputLineItem 
                             WHERE zqFrame.CSV_OutputLineItem.EntityName    = zqFrame.QueryAttribute.MappingEntityName 
                               AND zqFrame.CSV_OutputLineItem.AttributeName = zqFrame.QueryAttribute.AttributeName 
               ELSE
                  SET CURSOR FIRST zqFrame.CSV_OutputLineItem 
                             WHERE zqFrame.CSV_OutputLineItem.EntityName    = zqFrame.QueryAttribute.GroupOperationEntityName 
                               AND zqFrame.CSV_OutputLineItem.AttributeName = zqFrame.QueryAttribute.GroupOperationAttributeName 
               END
               zqFrame.CSV_OutputLineItem.Value = FormattedValue
               OutputLine = "W"   // Indicate OutputLine is to be formatted and written. We don't check later for a "W", for a not-null.
            ELSE
               // KJS 08/08/22 - Replace any double quotes with single quotes.
               zSearchAndReplace(FormattedValue, 10000, QUOTES, "'" )
               OutputLine = OutputLine + QUOTES + FormattedValue + QUOTES + ","
               AddColumnAttribute( zqFrameRoot, FormattedValue, szMappingEntityName, zqFrame.QueryAttribute.AttributeName )
            END
         END
         IF szTypeFlag = "F"
            // Format the current data to OutputLine.
            FormatCSV_FullOutput( zqFrame, OutputLine )
         ELSE
            zqFrame.ParentEntity.CurrentOutputLine = OutputLine
         END
   
         // Add subentity data using recursive structure.
         SET CURSOR FIRST zqFrame.zqFrame     // Make sure we're reset to top of ParentEntity subobject. 
         NAME VIEW  zqFrame  "zqFrameRecurs"
         SetViewToSubobject( zqFrame, "ChildEntity" )
         //szTraceEntityName = zqFrame.ParentEntity.EntityName 
         //TraceLineS( "### Start Entity: ", szTraceEntityName )
         HierarchicalLevel = 1
         LastHierarchicalLevel = 1
         FormatCSV_EntityRecurs( zqFrame,
                                 zqFrameRoot,
                                 vResultSet,
                                 OutputLine,
                                 szTypeFlag,
                                 FilePointer,
                                 HierarchicalLevel,
                                 LastHierarchicalLevel,
                                 RootEntityName,
                                 ColumnCount )
         ResetViewFromSubobject( zqFrame )
         
         // If this is a Breakpoint object with summation, etc. entries, then process any sums here.
         SET CURSOR FIRST zqFrame.GeneralParameter 
                    WHERE zqFrame.GeneralParameter.BreakpointSummationType != "" 
         IF RESULT >= zCURSOR_SET
            SysWriteLine( zqFrame, FilePointer, OutputLine ) // Write out the last output line.
            OutputLine = OutputLine + "Break"
         END
   
         nRC = SetCursorNextEntity( vResultSet, RootEntityName, "" )
      END
      
      // If this is a Breakpoint object with summation, etc. entries, then process any final breakpoint values here.
      SET CURSOR FIRST zqFrame.GeneralParameter 
                 WHERE zqFrame.GeneralParameter.BreakpointSummationType != "" 
      IF RESULT >= zCURSOR_SET
         SysWriteLine( zqFrame, FilePointer, OutputLine ) // Write out the last output line.
         OutputLine = OutputLine + "FinalBreak"
         SysWriteLine( zqFrame, FilePointer, OutputLine )
      ELSE
         // Write out any final data.
         IF OutputLine != ""
            IF szTypeFlag = "F"
               FormatCSV_FullOutput( zqFrame, OutputLine )
            END
            SysWriteLine( zqFrame, FilePointer, OutputLine )
         END
      END
   END

   SysCloseFile( zqFrame, FilePointer, 0 )
   DropView( zqFrame )
   //DropView( zqFrameRoot )

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_EntityRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_EntityRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                        VIEW zqFrameRoot BASED ON LOD zqFrame,
                        VIEW vResultSet,
                        STRING ( 10000 ) OutputLine,
                        STRING ( 1 )   szTypeFlag,
                        INTEGER        FilePointer,
                        INTEGER        HierarchicalLevel,
                        INTEGER        LastHierarchicalLevel,
                        STRING ( 32 )  szScopingEntityName,
                        INTEGER        ColumnCount )

   VIEW wXferO REGISTERED AS wXferO
   STRING ( 32 )   szEntityName
   STRING ( 32 )   szAttributeName
   STRING ( 32 )   szMappingEntityName
   STRING ( 32 )   szTraceEntityName
   STRING ( 10000 ) FormattedValue
   STRING ( 3 )    szHierarchicalLevel
   STRING ( 3 )    szLastHierarchicalLevel
   STRING ( 100 )  szTraceLine
   INTEGER         NextColumnCount
   INTEGER         RecursiveLevel
   INTEGER         Count
   DECIMAL         OperationResult
   SHORT           nRC

   // Loop through all entities with max cardinality > 1, since they are the only entities
   // that cause an output line to be written.

   LastHierarchicalLevel = HierarchicalLevel
   HierarchicalLevel = HierarchicalLevel + 1
   
   FOR EACH zqFrame.ParentEntity
      //szTraceEntityName = zqFrame.ParentEntity.EntityName 
      //TraceLineS( "### Trace Entity: ", szTraceEntityName )
      //IF szTraceEntityName = "AdmissionsTypeSummary"
      //   TraceLineS( "### Stop ", "" )
      //END
      IF zqFrame.ParentEntity.MaxCardinality > 1
         // Loop for each occurrence of the entity.
         szEntityName = zqFrame.ParentEntity.EntityName
         nRC = SetCursorFirstEntity( vResultSet, szEntityName, "" )
         Count = 0         
         LOOP WHILE nRC >= zCURSOR_SET
            Count = Count + 1
            // Only process those entities that have display attributes.
            SET CURSOR FIRST zqFrame.QueryAttribute
            IF RESULT >= zCURSOR_SET
               NextColumnCount = zqFrame.QueryAttribute.CSV_ColumnNumber
               // If the Output field has data, write it out.
               IF OutputLine != ""
                  IF szTypeFlag = "F"
                     
                     // Since we just came across a 0-to-m entity, write out the previous data.
                  
                     // Go to format OutputLine from CSV_OutputLineItem, then write it out.
                     IF Count > 1    // For Type of Full, we don't write out the previous line when it is for the parent entity.
                        FormatCSV_FullOutput( zqFrameRoot, OutputLine )
                        SysWriteLine( zqFrame, FilePointer, OutputLine )
                     END
                     OutputLine = ""
                     
                     // Null out the format values for this entity, which will be formatted to OutputLine below.
                     // Null out the format values for this entity and any entities at the same or a lower level, as
                     // defined by the CSV_OutputLineItem.RecursiveLevel attribute.
                     SET CURSOR FIRST zqFrameRoot.CSV_OutputLineItem 
                                WHERE zqFrameRoot.CSV_OutputLineItem.EntityNameToFormat = szEntityName
                     IF RESULT >= zCURSOR_SET             
                        RecursiveLevel = zqFrameRoot.CSV_OutputLineItem.RecursiveLevel 
                        FOR EACH zqFrameRoot.CSV_OutputLineItem 
                           IF zqFrameRoot.CSV_OutputLineItem.RecursiveLevel >= RecursiveLevel
                              zqFrameRoot.CSV_OutputLineItem.Value = ""
                           END
                        END
                     END
                     
                     //szHierarchicalLevel = HierarchicalLevel
                     //szLastHierarchicalLevel = LastHierarchicalLevel
                     //szTraceLine = szLastHierarchicalLevel + " " + szHierarchicalLevel + " " + OutputLine
                     //IssueError( zqFrame,0,0, szTraceLine )
                     /*IF LastHierarchicalLevel >= HierarchicalLevel
                        SysWriteLine( zqFrame, FilePointer, OutputLine )
                        OutputLine = ""
                     END
                     LastHierarchicalLevel = HierarchicalLevel*/
                  ELSE
                     SysWriteLine( zqFrame, FilePointer, OutputLine )
                     OutputLine = ""
                     IF zqFrameRoot.zqFrame.wCurrentDisplayFormat = "R"
                        CREATE ENTITY zqFrameRoot.ResultSetDisplayRow
                        ColumnCount = 1
                     END
                  END
               END
               
               IF szTypeFlag != "F"
                  // Put in leading commas for prior formatted attribute values.
                  FormatCSV_StartLine( zqFrame, OutputLine, NextColumnCount, szTypeFlag )
               END
               
               // Format attributes for this entity.
               // Note that all the attributes to be mapped with this entity are listed as QueryAttribute entities,
               // even if they come from entities that are 1-to-1 children under this entity.
               FOR EACH zqFrame.QueryAttribute
           
                  IF zqFrame.QueryAttribute.GroupOperation != ""
                     ComputeOperationValue( zqFrame,
                                            vResultSet,
                                            OperationResult,
                                            zqFrame.QueryAttribute.GroupOperation,
                                            zqFrame.QueryAttribute.GroupOperationEntityName,
                                            zqFrame.QueryAttribute.GroupOperationAttributeName,
                                            zqFrame.QueryAttribute.GroupOperationScopingEntityName )
                     wXferO.QueryValues.WorkRevenue = OperationResult
                     FormattedValue = wXferO.QueryValues.WorkRevenue
                     IF szTypeFlag = "F"
                        SET CURSOR FIRST zqFrameRoot.CSV_OutputLineItem 
                                   WHERE zqFrameRoot.CSV_OutputLineItem.EntityName     = zqFrame.QueryAttribute.GroupOperationEntityName 
                                     AND zqFrameRoot.CSV_OutputLineItem.AttributeName  = zqFrame.QueryAttribute.GroupOperationAttributeName 
                                     AND zqFrameRoot.CSV_OutputLineItem.GroupOperation = zqFrame.QueryAttribute.GroupOperation 
                        IF RESULT < zCURSOR_SET
                           IssueError( zqFrame,0,0, "Programming Error 1" )
                        END
                        zqFrameRoot.CSV_OutputLineItem.Value = FormattedValue
                        OutputLine = "W"   // Indicate OutputLine is to be formatted and written. We don't check later for a "W", for a not-null.
                     ELSE
                        OutputLine = OutputLine + QUOTES + FormattedValue + QUOTES + ","
                        // AddColumnAttribute call should not be necessary here because GroupOperation and Extension Summary are incompatable.
                     END
                  ELSE
                     szMappingEntityName = zqFrame.QueryAttribute.MappingEntityName 
                     IF szMappingEntityName = ""
                        FormattedValue = ""
                     ELSE
                        nRC = CheckExistenceOfEntity( vResultSet, szMappingEntityName )
                        IF nRC < zCURSOR_SET
                           FormattedValue = ""
                        ELSE
                           // Format the attribute through the Default Context filter, unless value is null.
                           nRC = CompareAttributeToString( vResultSet,
                                                           szMappingEntityName,
                                                           zqFrame.QueryAttribute.AttributeName, "" )
                           IF nRC = 0
                              FormattedValue = ""
                           ElSE
                              GetStrFromAttrByContext( FormattedValue, 10000,
                                                       vResultSet,
                                                       szMappingEntityName,
                                                       zqFrame.QueryAttribute.AttributeName, "" )  // Use default context.
                           END
                        END
                     END
                     IF szTypeFlag = "F"
                        SET CURSOR FIRST zqFrameRoot.CSV_OutputLineItem 
                                   WHERE zqFrameRoot.CSV_OutputLineItem.EntityName    = zqFrame.QueryAttribute.MappingEntityName
                                     AND zqFrameRoot.CSV_OutputLineItem.AttributeName = zqFrame.QueryAttribute.AttributeName 
                        zqFrameRoot.CSV_OutputLineItem.Value = FormattedValue
                        OutputLine = "W"   // Indicate OutputLine is to be formatted and written. We don't check later for a "W", for a not-null.
                     ELSE
                        OutputLine = OutputLine + QUOTES + FormattedValue + QUOTES + ","
                        AddColumnAttribute( zqFrameRoot, FormattedValue, szMappingEntityName, zqFrame.QueryAttribute.AttributeName )
                     END
                  END
               END
               zqFrame.ParentEntity.CurrentOutputLine = OutputLine
            END
            // Process subentities within an entity loop.
            IF zqFrame.ChildEntity EXISTS
               SetViewToSubobject( zqFrame, "ChildEntity" )
               FormatCSV_EntityRecurs( zqFrame,
                                       zqFrameRoot,
                                       vResultSet,
                                       OutputLine,
                                       szTypeFlag,
                                       FilePointer,
                                       HierarchicalLevel,
                                       LastHierarchicalLevel,
                                       zqFrame.ParentEntity.EntityName,
                                       ColumnCount )
               ResetViewFromSubobject( zqFrame )
            END
            nRC = SetCursorNextEntity( vResultSet, szEntityName, "" )
         END
      ELSE
         // Process subentities for 1-to-1 children.
         // No mapping is done for 1-to-1 children, as their attributes were listed as ???
         IF zqFrame.ChildEntity EXISTS
            SetViewToSubobject( zqFrame, "ChildEntity" )
            FormatCSV_EntityRecurs( zqFrame,
                                    zqFrameRoot,
                                    vResultSet,
                                    OutputLine,
                                    szTypeFlag,
                                    FilePointer,
                                    HierarchicalLevel,
                                    LastHierarchicalLevel,
                                    zqFrame.ParentEntity.EntityName,
                                    ColumnCount )
            ResetViewFromSubobject( zqFrame )
         END
      END
   END
   LastHierarchicalLevel = HierarchicalLevel
   HierarchicalLevel = HierarchicalLevel - 1

END

/*************************************************************************************************
**
**    OPERATION: BuildPostQualEntry
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildPostQualEntry( VIEW zqFrame BASED ON LOD zqFrame )

   STRING ( 1 )   DataType
   STRING ( 10 )  DateString
   SHORT          nRC

   // Build a PostActivate qualification entry from the GeneralParameter subobject on which
   // the cursor is currently positioned.

   CREATE ENTITY zqFrame.PostActivateQual
   SetMatchingAttributesByName( zqFrame, "PostActivateQual",
                                zqFrame, "GeneralParameter", zSET_ALL )
   IF zqFrame.PostActivateQual.ScopingEntityName = ""
      zqFrame.PostActivateQual.ScopingEntityName = zqFrame.zqFrame.QueryObjectRootEntityName
   END
   DataType = zqFrame.PostActivateQual.DataType
   IF DataType = "D" OR DataType = "T"
      // For Date or DateTime, convert the Value.
      DateString = zqFrame.PostActivateQual.Value
      nRC = SetAttrFromStrByContext( zqFrame, "PostActivateQual", "ValueDate",
                                     DateString, "M/D/YYYY" )
      IF nRC < 0
         RETURN -1
      END
   END
   
   // Build the Sub Qualifiers.
   FOR EACH zqFrame.GeneralSubParameter
          WHERE zqFrame.GeneralSubParameter.SearchType != ""
      CREATE ENTITY zqFrame.PostActivateQualSub
      SetMatchingAttributesByName( zqFrame, "PostActivateQualSub",
                                   zqFrame, "GeneralSubParameter", zSET_ALL )
      IF DataType = "D" OR DataType = "T"
         // For Date or DateTime, convert the Value.
         DateString = zqFrame.PostActivateQualSub.Value
         nRC = SetAttrFromStrByContext( zqFrame, "PostActivateQualSub", "ValueDate",
                                        DateString, "M/D/YYYY" )
         IF nRC < 0
            RETURN -1
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildConditionSubobj
**
**
*************************************************************************************************/
LOCAL OPERATION
BuildConditionSubobj( VIEW zqFrame BASED ON LOD zqFrame,
                      VIEW vQualObject,
                      VIEW qConvertData )
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szAttributeName
   STRING ( 10 )    szSearchType
   STRING ( 100 )   szInListValue
   STRING ( 100 )   Msg
   STRING ( 10000000 ) szValuesAsFindInList
   INTEGER nRC
   INTEGER Count

   szEntityName    = zqFrame.GeneralParameter.EntityName
   szAttributeName = zqFrame.GeneralParameter.AttributeName
   szSearchType = zqFrame.GeneralParameter.SearchType
   IF szSearchType = "contains"
      nRC = BuildQualEntry( zqFrame,
                            szEntityName,
                            szAttributeName,
                            szSearchType,
                            zqFrame.GeneralParameter.dValue,
                            qConvertData, vQualObject )
      IF nRC < 0
         RETURN -1
      END
   ELSE
      IF szSearchType = "subselect"
         // Add any sub parameters within parens.
         SET CURSOR FIRST zqFrame.GeneralSubParameter
                    WHERE zqFrame.GeneralSubParameter.SearchType != ""
         IF RESULT < zCURSOR_SET
            Msg = "The subselect operator does not have subparameters."
            MessageSend( zqFrame, "", "Query", Msg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN -1
         END
         CREATE ENTITY vQualObject.QualAttrib
         vQualObject.QualAttrib.Oper = "("
         FOR EACH zqFrame.GeneralSubParameter
            IF zqFrame.GeneralSubParameter.SearchType != ""
               nRC = BuildQualEntry( zqFrame,
                                     szEntityName,
                                     szAttributeName,
                                     zqFrame.GeneralSubParameter.SearchType,
                                     zqFrame.GeneralSubParameter.dValue,
                                     qConvertData,
                                     vQualObject )
               IF nRC < 0
                  RETURN -1
               END
               CREATE ENTITY vQualObject.QualAttrib
               vQualObject.QualAttrib.Oper = zqFrame.GeneralParameter.SecondLevelOperator
            END
         END
         vQualObject.QualAttrib.Oper = ")"
      ELSE
         IF szSearchType = "is in list"
            // Add each item in the list as a subparameter with OR.
            // KJS 03/31/22 - In looking at executing a report. Added a value but this is in "Value" not "ValuesAsFindInList". 
            // Use value if it exists.
            IF zqFrame.GeneralParameter.ValuesAsFindInList = "" AND zqFrame.GeneralParameter.Value != ""
               szValuesAsFindInList = zqFrame.GeneralParameter.Value 
            ELSE
               szValuesAsFindInList = zqFrame.GeneralParameter.ValuesAsFindInList 
            END
            // If the list has return characters replace them with commas.
            // There will be a comma at the end of the list.           
            IF szValuesAsFindInList = ""
               Msg = "The 'is in list' operator does not have any values."
               MessageSend( zqFrame, "", "Query", Msg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END
            SearchAndReplace( szValuesAsFindInList, "\r\n", "," ) 
            CREATE ENTITY vQualObject.QualAttrib
            vQualObject.QualAttrib.Oper = "("
            Count = 1
            RetrieveCommaDeliminatedValueN( szInListValue, szValuesAsFindInList, Count )
            LOOP WHILE szInListValue != ""
               IF Count > 1
                  CREATE ENTITY vQualObject.QualAttrib
                  vQualObject.QualAttrib.Oper = "OR"
               END
               
               nRC = BuildQualEntry( zqFrame,
                                     szEntityName,
                                     szAttributeName,
                                     "=",
                                     szInListValue,
                                     qConvertData,
                                     vQualObject )
               IF nRC < 0
                  RETURN -1
               END
               Count = Count + 1
               RetrieveCommaDeliminatedValueN( szInListValue, szValuesAsFindInList, Count )
            END
            CREATE ENTITY vQualObject.QualAttrib  // KJS 03/31/22
            vQualObject.QualAttrib.Oper = ")"
         ELSE
            nRC = BuildQualEntry( zqFrame,
                                  szEntityName,
                                  szAttributeName,
                                  szSearchType,
                                  zqFrame.GeneralParameter.dValue,
                                  qConvertData, vQualObject )
            IF nRC < 0
               RETURN -1
            END
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: CheckBooleanExpression
**
**
*************************************************************************************************/
LOCAL OPERATION
CheckBooleanExpression( VIEW zqFrame  BASED ON LOD zqFrame )

   VIEW zqFrameT BASED ON LOD zqFrame
   STRING ( 3 )   szOperation
   STRING ( 1 )   szDerivedAttributeFlag
   STRING ( 1 )   szPersistentAttributeFlag
   SHORT          nRC
   
   // This operation checks a boolean expression specified within parens to see if there are any derived
   // attributes with or without an OR condition within it. This includes any subexpressions within parens. 
   // A return code of -1 indicates a derived attribute was found, but there was no OR condition.
   // A return code of -2 indicates a derived attribute was found, along with an OR condition.
   // A return code of -3 indicates there was no persistent attribute in the condition.

   // We got here because the calling operation came across a Component with value left parens.
   // Note that the cursor position of zqFrame.Component changes within this operation.
   
   nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   LOOP WHILE nRC >= zCURSOR_SET AND zqFrame.Component.Value != ")"
      IF zqFrame.Component.Value = "("
         CreateViewFromView( zqFrameT, zqFrame )
         nRC = CheckBooleanExpression( zqFrameT )
         IF nRC < 0
            IF nRC <= -2
               // If either an OR was found or no persistent attribute was found, we won't check futher.
               RETURN nRC
            END
            szDerivedAttributeFlag = "Y"
         END
         DropView( zqFrameT )
      ELSE
         IF zqFrame.Component.Value = "AND" OR zqFrame.Component.Value = "OR"
            IF szOperation = "" AND zqFrame.Component.Value = "OR"
               szOperation = "OR"
            END
         ELSE
            SET CURSOR FIRST zqFrame.Condition 
                       WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value  
            SET CURSOR FIRST zqFrame.GeneralParameter 
                       WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                         AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                         AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                         AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
            IF zqFrame.GeneralParameter.DerivedAttributeFlag = "Y"
               szDerivedAttributeFlag = "Y"
            ELSE
               // At least one persistent attribute was found.
               szPersistentAttributeFlag = "Y"
            END
         END
      END
      nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   END
   
   // We will return a negative return code if a derived attribute existed and the operator was an OR
   // and there was not persistent attribute in the expression.
   IF szDerivedAttributeFlag = "Y"
      IF szOperation = "OR"
         RETURN -2
      ELSE
         IF szPersistentAttributeFlag = ""
            // No persistent attribute was found.
            RETURN -3
         ELSE
            // A derived attribute was found.
            RETURN -1
         END
      END
   END
   
END

/*************************************************************************************************
**
**    OPERATION: BuildPostBooleanExp
**
**
*************************************************************************************************/
LOCAL OPERATION
BuildPostBooleanExp( VIEW zqFrame BASED ON LOD zqFrame )

   STRING ( 32 )  szEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 10 )  szSearchType
   STRING ( 1 )   szDerivedAttributeFlag
   SHORT          nRC
   
   // This operation builds the PostActivateComponent entries for PostActivate boolean criteria.
   // It also builds the corresponding PostActivateQual entry for each.
   
   // Build the AND or OR statement preceding the "(".
   SET CURSOR LAST zqFrame.PostActivateComponent
   CREATE ENTITY zqFrame.PostActivateComponent 
   zqFrame.PostActivateComponent.Value = "("
   nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   LOOP WHILE nRC >= zCURSOR_SET AND zqFrame.Component.Value != ")"
      IF zqFrame.Component.Value = "("
         BuildPostBooleanExp( zqFrame )
      ELSE
         // Create Component (ex., C1, C2)
         CREATE ENTITY zqFrame.PostActivateComponent 
         zqFrame.PostActivateComponent.Value = zqFrame.Component.Value
         // Create corresponding PostActivateQual entry for Cn entries.
         IF zqFrame.Component.Value != "AND" AND zqFrame.Component.Value != "OR"
            SET CURSOR FIRST zqFrame.Condition 
                       WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value 
            SET CURSOR FIRST zqFrame.GeneralParameter 
                       WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                         AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                         AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                         AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
            BuildPostQualEntry( zqFrame )
            zqFrame.PostActivateQual.BooleanConditionName = zqFrame.Condition.BooleanConditionName 
         END
      END
      nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   END
   CREATE ENTITY zqFrame.PostActivateComponent 
   zqFrame.PostActivateComponent.Value = ")"
   
END

/*************************************************************************************************
**
**    OPERATION: BuildBooleanExpression
**
**
*************************************************************************************************/
LOCAL OPERATION
BuildBooleanExpression( VIEW zqFrame BASED ON LOD zqFrame,
                        VIEW vQualObject,
                        VIEW qConvertData )
   
   VIEW zqFrameT BASED ON LOD zqFrame
   STRING ( 32 )  szEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 10 )  szSearchType
   STRING ( 100 ) Msg
   SHORT          nRC
   
   // This operation builds the SQL Qualification for a boolean expression specified within parens.
   // If any entry within the expression uses a derived attribute, then no SQL Qualification is
   // generated and the expression is evaluated in BuildPostQualEntry.
   
   // Check to see if any attribute within the boolean expression is derived and if so, skip building SQL.
   CreateViewFromView( zqFrameT, zqFrame )
   nRC = CheckBooleanExpression( zqFrameT )
   DropView( zqFrameT )
   IF nRC < 0
      // Build the PostActivate Component entries.
      SET CURSOR LAST zqFrame.PostActivateComponent
      IF RESULT >= zCURSOR_SET
         // There's already an entry, so add the AND or OR statment that followed it.
         CREATE ENTITY zqFrame.PostActivateComponent 
         zqFrame.PostActivateComponent.Value = vQualObject.QualAttrib.Oper
      END
      BuildPostBooleanExp( zqFrame )
      IF nRC = -2
         // A Derived attribute with OR condition was found, so don't continue on to build SQL qualification.
         RETURN nRC
      END
   END
   
   // No derived attribute or SubgroupSearchType value exists, so build the entries.
   CREATE ENTITY vQualObject.QualAttrib
   vQualObject.QualAttrib.Oper = "("
   nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   LOOP WHILE nRC >= zCURSOR_SET AND zqFrame.Component.Value != ")"
      IF zqFrame.Component.Value = "("
         BuildBooleanExpression( zqFrame, vQualObject, qConvertData )
      ELSE
         IF zqFrame.Component.Value = "AND" OR
            zqFrame.Component.Value = "OR"
            
            // Add the operator
            IF vQualObject.QualAttrib.Oper != "("
               CREATE ENTITY vQualObject.QualAttrib
               vQualObject.QualAttrib.Oper = zqFrame.Component.Value
            END
         ELSE
            // Add the condition.
            SET CURSOR FIRST zqFrame.Condition 
                       WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value  
            SET CURSOR FIRST zqFrame.GeneralParameter 
                       WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                         AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                         AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                         AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
            IF zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND 
               ( zqFrame.GeneralParameter.SubgroupSearchType = "" OR zqFrame.GeneralParameter.SubgroupSearchType = "ANY" )
            
               nRC = BuildConditionSubobj( zqFrame, vQualObject, qConvertData)
               IF nRC < 0
                  RETURN nRC 
               END
            ELSE
     //IssueError( zqFrame,0,0, "At Derived Qual" )
               IF vQualObject.QualAttrib EXISTS
                  IF vQualObject.QualAttrib.Oper = "AND" OR vQualObject.QualAttrib.Oper = "OR"
                     // Add the last AND or OR to PostActivate access and remove from SQL access.
                     // We won't add the last AND or OR, if it would be the first in PostActivate.
                     //IF zqFrame.PostActivateComponent EXISTS
                     //   CREATE ENTITY zqFrame.PostActivateComponent 
                     //   zqFrame.PostActivateComponent.Value = vQualObject.QualAttrib.Oper
                     //END
                     DELETE ENTITY vQualObject.QualAttrib
                  END
               END
               //CREATE ENTITY zqFrame.PostActivateComponent 
               //zqFrame.PostActivateComponent.Value = zqFrame.Component.Value
            END
         END
      END
      nRC = SetCursorNextEntity( zqFrame, "Component", "" )
   END
   CREATE ENTITY vQualObject.QualAttrib
   vQualObject.QualAttrib.Oper = ")"
   
END

/*************************************************************************************************
**
**    OPERATION: BuildQualFromFrame
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildQualFromFrame( VIEW zqFrame   BASED ON LOD zqFrame,
                    VIEW vQualObject,
                    VIEW qConvertData )

   VIEW wXferO   REGISTERED AS wXferO
   VIEW zqFrameT BASED ON LOD  zqFrame
   VIEW vQualObject2
   STRING ( 10 )  szSearchType
   STRING ( 32 )  szEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szQualEntityName
   STRING ( 1 )   szDerivedAttributeFlag
   STRING ( 1 )   szOR_OperatorFlag
   STRING ( 1 )   szDatabaseAttributeFlag
   STRING ( 8 )   szSeasonalAddressDate
   STRING ( 10 )  szSeasonalAddressParameterValue
   STRING ( 200 ) Msg
   SHORT   nRC
   INTEGER DisplayCount

   // Build the qualification object KZDBHQUA from data in the zqFrame object.

   FOR EACH zqFrame.PostActivateQual
      DELETE ENTITY zqFrame.PostActivateQual NONE
   END
   SfActivateSysEmptyOI( vQualObject, "KZDBHQUA", zqFrame, zMULTIPLE )
   NAME VIEW vQualObject "vQualObject"

   // Create root EntitySpec.
   CREATE ENTITY vQualObject.EntitySpec
   vQualObject.EntitySpec.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
   
   // Check for Seasonal Date qualification. If there is a date specified, set it in wXferO and temporarily remove it 
   // from zqFrame. We will add it back to zqFrame after we've formatted the Query.
   /*wXferO.Root.SeasonalAddressDate = ""
   SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.AttributeName = "wSeasonalAddressDate"
   IF RESULT >= zCURSOR_SET
      IF zqFrame.GeneralParameter.Value != ""
         szSeasonalAddressParameterValue = zqFrame.GeneralParameter.Value
         SetAttrFromStrByContext( wXferO, "Root", "SeasonalAddressDate", szSeasonalAddressParameterValue, "" )
         zqFrame.GeneralParameter.Value      = ""
         zqFrame.GeneralParameter.SearchType = ""
      END
   END*/
   
   // Build qualification for root entity.
   IF zqFrame.Component EXISTS
      // The root qualification is driven from the Boolean Expression values.
      // We will first evaluate the expression to see if there are any OR conditions at the
      // top boolean level (assuming anything inside parens is at a lower level), along with
      // derived attributes. If there are, then we cannot generate any SQL qualifications at all.
      // The first two examples below must be evaluated completely at the post-activate level if C3
      // is a derived attribute.
      // In the third example, SQL can be generated for conditions C1 and C2, but C3 and C4 must be evaluated
      // at the post-activate level if C3 is a derived attribute.
      // Example 1: C1 AND C2 OR C3"
      // Example 2: C1 AND C2 OR (C3 AND C4)
      // Example 3: C1 AND C2 AND (C3 OR C4)
      
      // Delete work Component entities for PostActivate criteria.
      FOR EACH zqFrame.PostActivateComponent 
         DELETE ENTITY zqFrame.PostActivateComponent NONE
      END
      
      // Delete work PostActivateQual entries.
      FOR EACH zqFrame.PostActivateQual 
         DELETE ENTITY zqFrame.PostActivateQual NONE
      END
     
      // Check for derived attributes along with an OR operator.
      /*FOR EACH zqFrame.Component
         IF zqFrame.Component.Value = "("
            nRC = CheckBooleanExpression( zqFrame )
            IF nRC < 0
               // The subexpression contained a derived attribute with an OR, so indicate a derived attribute at top level.
               szDerivedAttributeFlag = "Y"
            ELSE
               szDatabaseAttributeFlag = "Y"
            END
         ELSE
            IF zqFrame.Component.Value != "AND"
               IF zqFrame.Component.Value = "OR"
                  szOR_OperatorFlag = "Y"
               ELSE
                  SET CURSOR FIRST zqFrame.Condition 
                             WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value  
                  SET CURSOR FIRST zqFrame.GeneralParameter 
                             WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                               AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                               AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                               AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
                  IF zqFrame.GeneralParameter.DerivedAttributeFlag = "Y" OR 
                     ( zqFrame.GeneralParameter.SubgroupSearchType != "" AND zqFrame.GeneralParameter.SubgroupSearchType != "ANY" )
                  
                     szDerivedAttributeFlag = "Y"
                  ELSE
                     szDatabaseAttributeFlag = "Y"
                  END
               END
            END
         END
      END*/
      nRC = CheckBooleanExpression( zqFrame )
      IF nRC = -3
      
         Msg = "INFO: There are no persistent attributes at the root level, which means there will be no SQL qualification, " +
               "but only post-activate qualification."// + NEW_LINE +
               //"Do you want to continue anyway?"
         MessageSend( zqFrame, "", "Query", Msg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         //nRC = MessagePrompt( zqFrame, "", "Run Query", Msg, 0, zBUTTONS_YESNO, zRESPONSE_YES, 0 )
         //IF nRC = zRESPONSE_NO
         //   RETURN -1
         //END
      ELSE
         IF nRC = -2
         
            Msg = "There are derived attributes at the root level with an OR condition, which means there will be no SQL qualification, " +
                  "but only post-activate qualification." // + NEW_LINE +
                  //"Do you want to continue anyway?"
            MessageSend( zqFrame, "", "Query", Msg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            //nRC = MessagePrompt( zqFrame, "", "Run Query", Msg, 0, zBUTTONS_YESNO, zRESPONSE_YES, 0 )
            //IF nRC = zRESPONSE_NO
            //   RETURN -1
            //END
         END
      END
      
      // Build SQL statement for expressions not containing derived attributes or SubgroupSearchType attributes.
      // Also build PostActivateComponent entities for derived attributes and SubgroupSearchType attributes.
      FOR EACH zqFrame.Component
     
         IF zqFrame.Component.Value = "("
            nRC = BuildBooleanExpression( zqFrame, vQualObject, qConvertData )
            SET CURSOR LAST zqFrame.PostActivateComponent    // Make sure we're at the end of component. 
         ELSE
            IF zqFrame.Component.Value = "AND" OR
               zqFrame.Component.Value = "OR"
               
               // Add the operator, but only if there is already an entry in vQualObject that is not an AND or OR.
               // If a derived attribute were the first statement in the boolean, then we would generate an
               // AND statement at the beginning of the qualification.
               IF vQualObject.QualAttrib EXISTS
                  IF vQualObject.QualAttrib.Oper != "AND" AND vQualObject.QualAttrib.Oper != "OR"
                     CREATE ENTITY vQualObject.QualAttrib
                     vQualObject.QualAttrib.Oper = zqFrame.Component.Value
                  END
               END
            ELSE
               // Add the condition.
               SET CURSOR FIRST zqFrame.Condition 
                          WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value  
               SET CURSOR FIRST zqFrame.GeneralParameter 
                          WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                            AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                            AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                            AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
               IF zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND
                  ( zqFrame.GeneralParameter.SubgroupSearchType = "" OR zqFrame.GeneralParameter.SubgroupSearchType = "ANY" )
         
                  nRC = BuildConditionSubobj( zqFrame, vQualObject, qConvertData)
                  IF nRC < 0
                     RETURN nRC 
                  END
               ELSE
         
                  IF vQualObject.QualAttrib EXISTS
                     IF vQualObject.QualAttrib.Oper = "AND" OR vQualObject.QualAttrib.Oper = "OR"
                        // Add the last AND or OR to PostActivate access and remove from SQL access.
                        // We won't add the last AND or OR, if it would be the first in PostActivate.
                        IF zqFrame.PostActivateComponent EXISTS
                           CREATE ENTITY zqFrame.PostActivateComponent 
                           zqFrame.PostActivateComponent.Value = vQualObject.QualAttrib.Oper
                        END
                        DELETE ENTITY vQualObject.QualAttrib
                     END
                  END
          
                  // Create PostActivateComponent (ex., C1, C2)
                  CREATE ENTITY zqFrame.PostActivateComponent 
                  zqFrame.PostActivateComponent.Value = zqFrame.Component.Value
                  // Create corresponding PostActivateQual entry.
                  SET CURSOR FIRST zqFrame.Condition 
                             WHERE zqFrame.Condition.BooleanConditionName = zqFrame.Component.Value 
                  SET CURSOR FIRST zqFrame.GeneralParameter 
                             WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.Condition.EntityName 
                               AND zqFrame.GeneralParameter.AttributeName = zqFrame.Condition.AttributeName 
                               AND zqFrame.GeneralParameter.SearchType    = zqFrame.Condition.SearchType 
                               AND zqFrame.GeneralParameter.Value         = zqFrame.Condition.Value 
                  BuildPostQualEntry( zqFrame )
                  zqFrame.PostActivateQual.BooleanConditionName = zqFrame.Condition.BooleanConditionName
               END
            END
         END
      END
      
   ELSE
      // The root qualification is driven from the GeneralParameter entities. No boolean expressions exist.
      FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != ""
         IF ( zqFrame.GeneralParameter.RootQualificationFlag = "Y" AND
              zqFrame.GeneralParameter.DerivedAttributeFlag  = "" AND
              zqFrame.GeneralParameter.AttributeName        != "GeographicPositionZipCode" AND
              zqFrame.GeneralParameter.AttributeName        != "GeographicPositionMiles" AND
              zqFrame.GeneralParameter.SubgroupSearchType    = "" ) OR
            ( zqFrame.GeneralParameter.SubgroupSearchType   = "ANY" AND
              zqFrame.GeneralParameter.ScopingEntityName    = zqFrame.zqFrame.QueryObjectRootEntityName AND
              zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND
              zqFrame.GeneralParameter.AttributeName       != "GeographicPositionZipCode" AND
              zqFrame.GeneralParameter.AttributeName       != "GeographicPositionMiles"  )
         
            //SET CURSOR FIRST vQualObject.EntitySpec
            //SET CURSOR LAST vQualObject.QualAttrib
            nRC = BuildConditionSubobj( zqFrame, vQualObject, qConvertData)
            IF nRC < 0
               RETURN nRC 
            END
            
            // Add the operator.
            CREATE ENTITY vQualObject.QualAttrib
            vQualObject.QualAttrib.Oper = zqFrame.zqFrame.FirstLevelOperator
         END 
      END
   END
   
   // If a Seasonal Address Date has been specified, add it back to zqFrame.
   IF szSeasonalAddressParameterValue != ""
      SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.AttributeName = "wSeasonalAddressDate"
      zqFrame.GeneralParameter.Value = szSeasonalAddressParameterValue
   END
   
   // Activate Optimization
   // If optimization has been requested, go to identify entities that do not have to be activated below and then 
   // create GeneralParameter entries to restrict their activation.
   IF zqFrame.zqFrame.OptimizeQueryFlag = "Y"
      CreateViewFromView( zqFrameT, zqFrame )
      SetViewToSubobject( zqFrameT, "ChildEntity" )
      SetEntityActivateFlagR( zqFrameT, zqFrame )
      BuildAutoRestrictR( zqFrameT, zqFrame )
      ResetViewFromSubobject( zqFrameT )
      DropView( zqFrameT )
   END
   
   // Build Subqualification (Restricting) logic.
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != ""
      IF zqFrame.GeneralParameter.RootQualificationFlag != "Y" AND
         zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND
         zqFrame.GeneralParameter.AttributeName != "GeographicPositionZipCode" AND
         zqFrame.GeneralParameter.AttributeName != "GeographicPositionMiles" AND
         zqFrame.GeneralParameter.ScopingEntityName != zqFrame.zqFrame.QueryObjectRootEntityName AND
         ( zqFrame.GeneralParameter.SubgroupSearchType = "ANY" OR
           zqFrame.GeneralParameter.SubgroupSearchType = "" )
      
         IF zqFrame.GeneralParameter.ScopingEntityName = ""
            szQualEntityName = zqFrame.GeneralParameter.EntityName
         ELSE
            szQualEntityName = zqFrame.GeneralParameter.ScopingEntityName
         END
         SET CURSOR FIRST vQualObject.EntitySpec
                    WHERE vQualObject.EntitySpec.EntityName = szQualEntityName
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST vQualObject.EntitySpec
            CREATE ENTITY vQualObject.EntitySpec
            vQualObject.EntitySpec.EntityName = szQualEntityName
         END
         SET CURSOR LAST vQualObject.QualAttrib

         nRC = BuildConditionSubobj( zqFrame, vQualObject, qConvertData)
         IF nRC < 0
            RETURN nRC 
         END
         
         // Add the operator.
         CREATE ENTITY vQualObject.QualAttrib
         vQualObject.QualAttrib.Oper = zqFrame.zqFrame.FirstLevelOperator
      END 
   END
   
   // Build PostActivate processing for those queries without a Boolean Expression.
   // When a Boolean Expression is used, the PostActivate entries are built in BuildPostBooleanExp.
   IF zqFrame.Component DOES NOT EXIST
      FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != ""
         IF ( zqFrame.GeneralParameter.SubgroupSearchType != "" AND 
              zqFrame.GeneralParameter.SubgroupSearchType != "ANY" ) OR
              zqFrame.GeneralParameter.DerivedAttributeFlag = "Y"
   
            BuildPostQualEntry( zqFrame )
         END
      END
   END

   // Delete the last AND/OR QualAttrib entity for each EntitySpec subobject.
   FOR EACH vQualObject.EntitySpec
      SET CURSOR LAST vQualObject.QualAttrib
      IF RESULT >= zCURSOR_SET
         IF vQualObject.QualAttrib.Oper = "AND" OR
            vQualObject.QualAttrib.Oper = "OR"

             DELETE ENTITY vQualObject.QualAttrib
         END
      END
   END

   // If the vQualObject.EntitySpec for the root does not have any QualAttrib entries, delete the
   // EntitySpec entity.
   SET CURSOR FIRST vQualObject.EntitySpec
   IF vQualObject.QualAttrib DOES NOT EXIST
      DELETE ENTITY vQualObject.EntitySpec
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildQualEntry
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildQualEntry( VIEW zqFrame BASED ON LOD zqFrame,
                STRING ( 32 )  szEntityName,
                STRING ( 32 )  szAttributeName,
                STRING ( 100 ) szSearchType,
                STRING ( 100 ) szInputSearchValue,
                VIEW qConvertData,
                VIEW vQualObject )

   STRING ( 100 ) Msg
   STRING ( 100 ) szSearchValue
   STRING ( 1 )   szErrorFlag
   INTEGER Length

   // Build a qualification entry based on SearchType and SearchValue.
   // If the GeneralParameter datatype is a Date, it is in the format yyyy.mm.dd and needs to be
   // converted to yyyymmdd.
   // Otherwise it is in regular internal format.
   IF szInputSearchValue != ""
      IF zqFrame.GeneralParameter.DataType = "T"
         szSearchValue = szInputSearchValue
      ELSE
         szSearchValue = szInputSearchValue
      END
   ELSE
      szSearchValue = szInputSearchValue
   END
   CREATE ENTITY vQualObject.QualAttrib
   vQualObject.QualAttrib.EntityName    = szEntityName
   vQualObject.QualAttrib.AttributeName = szAttributeName
   IF szSearchType = "contains"
      vQualObject.QualAttrib.Value = "%" + szSearchValue + "%"
      vQualObject.QualAttrib.Oper  = "LIKE"
   ELSE
      vQualObject.QualAttrib.Value = szSearchValue
      vQualObject.QualAttrib.Oper  = szSearchType
   END

END

/*************************************************************************************************
**
**    OPERATION: TraceDecimalValue
**
**
*************************************************************************************************/
LOCAL OPERATION
TraceDecimalValue( VIEW zqFrame BASED ON LOD zqFrame,
                   DECIMAL TraceValue,
                   STRING ( 20 ) TraceTitle )

   VIEW wXferO REGISTERED AS wXferO
   STRING ( 20 ) szDecimalValue

   wXferO.Root.WorkDecimal = TraceValue
   szDecimalValue = wXferO.Root.WorkDecimal
   TraceLineS( TraceTitle, szDecimalValue )

END

/*************************************************************************************************
**
**    OPERATION: CheckSubgroupSelection
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
CheckSubgroupSelection( VIEW zqFrame BASED ON LOD zqFrame,
                        VIEW QueryObject,
                        STRING ( 32 ) QualifyingEntityName,
                        STRING ( 1 )  RootEntityFlag )

   SHORT   FinalReturnCode

   // Loop through any subgroup selection criteria and issue the following return codes.
   // -1 if there was selection criteria and the entries didn't meet it.
   // 0  if there was no selection criteria.
   // 1  if there was selection criteria and the entries did meet it.
   // This routine processes the following subgroup operations:
   //   SUM
   //   AVG
   //   COUNT
   //   MAX
   //   MIN
   //   NNULL
   // It also processes any entries with a null operation value.

   SET CURSOR FIRST zqFrame.PostActivateQual
         WHERE zqFrame.PostActivateQual.ScopingEntityName = QualifyingEntityName
   IF RESULT < zCURSOR_SET
      RETURN 0
   END

   IF zqFrame.PostActivateComponent EXISTS AND RootEntityFlag = "Y"
      // There is a boolean expression for root qualification, so go to process the boolean.
      SET CURSOR FIRST zqFrame.PostActivateComponent 
      FinalReturnCode = CheckPostBooleanExpMn( zqFrame, QueryObject, QualifyingEntityName )
   ELSE
      // There is no boolean structure or we are on a lower level subobject, so process each qualification
      // for the specified QualifyingEntityName.
      FOR EACH zqFrame.PostActivateQual
         WHERE zqFrame.PostActivateQual.ScopingEntityName = QualifyingEntityName
         
         CheckSubgroupSelSingle( zqFrame, QueryObject, QualifyingEntityName )
      END
   
      // Determine the return code based on whether the first-level boolean operator is AND or OR.
      IF zqFrame.zqFrame.FirstLevelOperator = "AND"
         FinalReturnCode = 1
         FOR EACH zqFrame.PostActivateQual
              WHERE zqFrame.PostActivateQual.SearchType != ""
                AND zqFrame.PostActivateQual.ScopingEntityName = QualifyingEntityName
            IF zqFrame.PostActivateQual.SelectTrueFlag = "F"
               FinalReturnCode = -1
            END
         END
      ELSE
         FinalReturnCode = 0
         FOR EACH zqFrame.PostActivateQual
              WHERE zqFrame.PostActivateQual.SearchType != ""
                AND zqFrame.PostActivateQual.ScopingEntityName = QualifyingEntityName
            IF zqFrame.PostActivateQual.SelectTrueFlag = "T"
               FinalReturnCode = 1
            ELSE
               IF FinalReturnCode = 0
                  FinalReturnCode = -1
               END
            END
         END
      END
   END
   
   RETURN FinalReturnCode

END

/*************************************************************************************************
**
**    OPERATION: CheckPostBooleanExpMn
**
**
*************************************************************************************************/
LOCAL OPERATION
CheckPostBooleanExpMn( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW QueryObject,
                       STRING ( 32 ) RootEntityName )

   VIEW zqFrameT BASED ON LOD zqFrame
   STRING ( 3 ) szOperationCode
   SHORT nRC
   SHORT nCompareResult
   
   // Evaluate the outer Boolean Expression.
   
   // If there are no outer parens, we will just call the CheckPostBooleanExp operation.
   // Otherwise, we will call CheckPostBooleanExp for each group of parens and evaluate the condition
   // between the parens here.
   
   nRC = SetCursorFirstEntity( zqFrame, "PostActivateComponent", "" )
   IF zqFrame.PostActivateComponent.Value != "("
      // There are no parens surrounding the expression, so just call CheckPostBooleanExp and return.
      nCompareResult = CheckPostBooleanExp( zqFrame, QueryObject, RootEntityName )
      RETURN nCompareResult
   
   ELSE
   
      // The expression has groups of parens, so loop through expression processing each parens group.
      nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )
      LOOP WHILE nRC >= zCURSOR_SET

         // Call CheckPostBooleanExp for each pair of parens and evaluation AND/OR condition here.
         szOperationCode = zqFrame.PostActivateComponent.Value
         IF szOperationCode = "("
            nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )  // Skip past the left parens.
         END
         
         nCompareResult = CheckPostBooleanExp( zqFrame, QueryObject, RootEntityName )
         
         nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )
         
         IF nRC >= zCURSOR_SET
         
            szOperationCode = zqFrame.PostActivateComponent.Value
            // We've still got more parens to evaluate.
            IF szOperationCode = "OR"
     
               // On an OR condition, if we have a match, we return the match. Otherwise, we keep looking.
               IF nCompareResult = 1
                  //TraceLineS( "*** Return: ", "True" )
                  RETURN 1
               END
            ELSE
               // On an AND condition, if we don't have a match, we return that no-match. Otherwise, we keep looking.
               IF nCompareResult = -1
                  //TraceLineS( "*** Return: ", "False" )
                  RETURN -1
               END
            END
         END
         
         nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )
      END
      
      // We've looped through all parens.
      IF szOperationCode = "OR"
         
         // On an OR condition, if we have a match, we return a match. Otherwise, we return a no-match.
         IF nCompareResult = 1
            //TraceLineS( "*** Return: ", "True" )
            RETURN 1
         ELSE
            //TraceLineS( "*** Return: ", "False" )
            RETURN -1
         END
      ELSE
         // On an AND condition, if we have a match, we return a match. Otherwise, we return a no-match.
         IF nCompareResult = 1
            //TraceLineS( "*** Return: ", "True" )
            RETURN 1
         ELSE
            //TraceLineS( "*** Return: ", "False" )
            RETURN -1
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: CheckPostBooleanExp
**
**
*************************************************************************************************/
LOCAL OPERATION
CheckPostBooleanExp( VIEW zqFrame BASED ON LOD zqFrame,
                     VIEW QueryObject,
                     STRING ( 32 ) RootEntityName )

   VIEW zqFrameT BASED ON LOD zqFrame
   STRING ( 3 ) szOperationCode
   SHORT nRC
   SHORT nCompareResult
   
   // Evaluate the Boolean Expression.
   // This can be a subexpression surrounded by parens, or a full expression, starting with a qualification entry.

   // If we entered this operation on an expression in parens, we need to skip the first paren.
   // Otherwise, we're positioned on the correct first qualification to evaluation.
   IF zqFrame.PostActivateComponent.Value = "("
      nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )
   ELSE
      nRC = 0
   END
   
   // Check to see what boolean operation we're performing by looking at this or the next entry
   // for an AND or OR.
   szOperationCode = zqFrame.PostActivateComponent.Value
   IF szOperationCode != "AND" AND szOperationCode != "OR"
      CreateViewFromView( zqFrameT, zqFrame )
      SetCursorNextEntity( zqFrameT, "PostActivateComponent", "" )
      szOperationCode = zqFrameT.PostActivateComponent.Value
      IF szOperationCode != "AND" AND szOperationCode != "OR"
         szOperationCode = ""
      END
      DropView( zqFrameT )
   END
   
   // Evaluate the criteria.
   LOOP WHILE nRC >= zCURSOR_SET AND zqFrame.PostActivateComponent.Value != ")"
      IF zqFrame.PostActivateComponent.Value != "AND" AND zqFrame.PostActivateComponent.Value != "OR"
         IF zqFrame.PostActivateComponent.Value = "("
            nCompareResult = CheckPostBooleanExpMn( zqFrame, QueryObject, RootEntityName )
         ELSE
            SET CURSOR FIRST zqFrame.PostActivateQual 
                       WHERE zqFrame.PostActivateQual.BooleanConditionName = zqFrame.PostActivateComponent.Value 
            IF RESULT >= zCURSOR_SET
               CheckSubgroupSelSingle( zqFrame, QueryObject, RootEntityName )
               IF zqFrame.PostActivateQual.SelectTrueFlag = "T"
                  nCompareResult = 1
               ELSE
                  nCompareResult = -1
               END
            ELSE
               IssueError( zqFrame,0,0, "Boolean not found" )
            END
         END
               
         // Depending on Operation Code, there are two conditions for which we can exit immediately.
         IF szOperationCode = "OR" AND nCompareResult = 1
            SET CURSOR NEXT zqFrame.PostActivateComponent WHERE zqFrame.PostActivateComponent.Value = ")" 
            RETURN 1
         ELSE
            IF szOperationCode = "AND" AND nCompareResult = -1
               SET CURSOR NEXT zqFrame.PostActivateComponent WHERE zqFrame.PostActivateComponent.Value = ")"
               RETURN -1
            END
         END
      END
      
      nRC = SetCursorNextEntity( zqFrame, "PostActivateComponent", "" )
   END
  
   // If we processed all the entries without exiting, then the true/false condition is whatever was
   // the last evaluation.
   RETURN nCompareResult

END

/*************************************************************************************************
**
**    OPERATION: CheckSubgroupSelSingle
**
**
*************************************************************************************************/
LOCAL OPERATION
CheckSubgroupSelSingle( VIEW zqFrame BASED ON LOD zqFrame,
                        VIEW QueryObject,
                        STRING ( 32 ) QualifyingEntityName )

   DECIMAL Sum
   DECIMAL Max
   DECIMAL Min
   DECIMAL Average
   DECIMAL AttributeValue
   DECIMAL OperationResult
   DECIMAL TargetValue
   DECIMAL CenterLatitude
   DECIMAL CenterLongitude
   DECIMAL TargetLatitude
   DECIMAL TargetLongitude
   DECIMAL DistanceMiles
   INTEGER Count
   SHORT   FinalReturnCode
   SHORT   nRC
   STRING ( 10 ) OperationName
   STRING ( 50 ) CompareValue
   STRING ( 1 )  FoundFlag      // Y or N
   STRING ( 1 )  DataType
   STRING ( 2 )  SearchType

   // Process single Subgroup selection entity.
   OperationName = zqFrame.PostActivateQual.SubgroupSearchType
   DataType = zqFrame.PostActivateQual.DataType
   IF zqFrame.PostActivateQual.AttributeName = "GeographicPositionZipCode"
      nRC = CheckExistenceOfEntity( QueryObject,
                                    zqFrame.PostActivateQual.EntityName )
      IF nRC >= zCURSOR_SET
         CenterLatitude  = zqFrame.PostActivateGeographicPosition.CenterLatitude
         CenterLongitude = zqFrame.PostActivateGeographicPosition.CenterLongitude
         GetDecimalFromAttribute( TargetLatitude,
                                  QueryObject,
                                  zqFrame.PostActivateQual.EntityName,
                                  "Latitude" )
         GetDecimalFromAttribute( TargetLongitude,
                                  QueryObject,
                                  zqFrame.PostActivateQual.EntityName,
                                  "Longitude" )
         DistanceMiles = GetDistance( CenterLatitude, CenterLongitude,
                                      TargetLatitude, TargetLongitude, 2 )   // 2 is "better" algorithm
         SearchType = zqFrame.PostActivateQual.SearchType
         TraceDecimalValue( zqFrame, DistanceMiles, "***DistanceMiles: " )
         IF SearchType = "<" OR SearchType = "<="
            IF DistanceMiles <= zqFrame.PostActivateGeographicPosition.DistanceMiles
               zqFrame.PostActivateQual.SelectTrueFlag = "T"
            ELSE
               zqFrame.PostActivateQual.SelectTrueFlag = "F"
               TraceDecimalValue( zqFrame, CenterLatitude, "***CenterLatitude: " )
               TraceDecimalValue( zqFrame, CenterLongitude, "***CenterLongitude: " )
               TraceDecimalValue( zqFrame, TargetLatitude, "***TargetLatitude: " )
               TraceDecimalValue( zqFrame, TargetLongitude, "***TargetLongitude: " )
            END
         ELSE
            IF DistanceMiles >= zqFrame.PostActivateGeographicPosition.DistanceMiles
               zqFrame.PostActivateQual.SelectTrueFlag = "T"
            ELSE
               zqFrame.PostActivateQual.SelectTrueFlag = "F"
            END
         END
      END
   ELSE
   IF OperationName = ""
      // There is no operation, so process as single compare.
      nRC = CheckExistenceOfEntity( QueryObject, zqFrame.PostActivateQual.EntityName )
      IF nRC < 0 
         // There is no entity, so set compare result to false.
         zqFrame.PostActivateQual.SelectTrueFlag = "F"
      ELSE
         // Compare values depending on data type.
         IF DataType = "L" OR DataType = "M"
            GetDecimalFromAttribute( OperationResult,
                                     QueryObject,
                                     zqFrame.PostActivateQual.EntityName,
                                     zqFrame.PostActivateQual.AttributeName )
            nRC = fnEvaluateOperatorDec( zqFrame, OperationResult )
         ELSE
            IF DataType = "D" OR DataType = "T"
               GetStringFromAttribute( CompareValue,
                                       QueryObject,
                                       zqFrame.PostActivateQual.EntityName,
                                       zqFrame.PostActivateQual.AttributeName )
            ELSE
               GetStrFromAttrByContext( CompareValue, 50,
                                        QueryObject,
                                        zqFrame.PostActivateQual.EntityName,
                                        zqFrame.PostActivateQual.AttributeName,
                                        "" )
            END
            nRC = fnEvaluateOperatorStr( zqFrame, CompareValue )  // nRC = 1 is true.
         END
         IF nRC = 1
            zqFrame.PostActivateQual.SelectTrueFlag = "T"
         ELSE
            zqFrame.PostActivateQual.SelectTrueFlag = "F"
         END
      END
   ELSE
   IF OperationName = "MAX" OR
      OperationName = "MIN" OR
      OperationName = "COUNT" OR
      OperationName = "NNULL" OR
      OperationName = "SUM" OR
      OperationName = "AVG"

      IF DataType = "L" OR DataType = "M"
         // User common routine for computing decimal/integer values for above operations.
         ComputeOperationValue( zqFrame, QueryObject, OperationResult, OperationName,
                                zqFrame.PostActivateQual.EntityName,
                                zqFrame.PostActivateQual.AttributeName,
                                QualifyingEntityName )
      ELSE
         // User common routine for computing date values for above operations.
         ComputeOperationVDate( zqFrame, QueryObject, CompareValue, OperationName,
                                zqFrame.PostActivateQual.EntityName,
                                zqFrame.PostActivateQual.AttributeName,
                                QualifyingEntityName )

      END
   ELSE
   IF OperationName = "ANY"
      FoundFlag = "N"
      nRC = SetCursorFirstEntity( QueryObject,
                                  zqFrame.PostActivateQual.EntityName,
                                  QualifyingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
         IF DataType = "L" OR DataType = "M"
            GetDecimalFromAttribute( OperationResult,
                                     QueryObject,
                                     zqFrame.PostActivateQual.EntityName,
                                     zqFrame.PostActivateQual.AttributeName )
            nRC = fnEvaluateOperatorDec( zqFrame, OperationResult )
         ELSE
            IF DataType = "D" OR DataType = "T"
               GetStringFromAttribute( CompareValue,
                                       QueryObject,
                                       zqFrame.PostActivateQual.EntityName,
                                       zqFrame.PostActivateQual.AttributeName )
            ELSE
               GetStrFromAttrByContext( CompareValue, 50,
                                        QueryObject,
                                        zqFrame.PostActivateQual.EntityName,
                                        zqFrame.PostActivateQual.AttributeName,
                                        "" )
            END
            nRC = fnEvaluateOperatorStr( zqFrame, CompareValue )  // nRC = 1 is true.
         END
         IF nRC = 1
            FoundFlag = "Y"
         END
         nRC = SetCursorNextEntity( QueryObject,
                                    zqFrame.PostActivateQual.EntityName,
                                    QualifyingEntityName )
      END
   ELSE
   IF OperationName = "ALL"
      FoundFlag = ""
      nRC = SetCursorFirstEntity( QueryObject,
                                  zqFrame.PostActivateQual.EntityName,
                                  QualifyingEntityName )
      // If the search operator is "<>" and the entity for evaluating the condition
      // does not exist, consider the condition TRUE.
      IF zqFrame.PostActivateQual.SearchType = "subselect"
         SearchType = zqFrame.PostActivateQualSub.SearchType
      ELSE
         SearchType = zqFrame.PostActivateQual.SearchType
      END
      IF SearchType = "<>" AND
         nRC < zCURSOR_SET

         FoundFlag = "Y"
      ELSE
         LOOP WHILE nRC >= zCURSOR_SET
            IF DataType = "L" OR DataType = "M"
               GetDecimalFromAttribute( OperationResult,
                                        QueryObject,
                                        zqFrame.PostActivateQual.EntityName,
                                        zqFrame.PostActivateQual.AttributeName )
               nRC = fnEvaluateOperatorDec( zqFrame, OperationResult )
            ELSE
               IF DataType = "D" OR DataType = "T"
                  GetStringFromAttribute( CompareValue,
                                          QueryObject,
                                          zqFrame.PostActivateQual.EntityName,
                                          zqFrame.PostActivateQual.AttributeName )
               ELSE
                  GetStrFromAttrByContext( CompareValue, 50,
                                           QueryObject,
                                           zqFrame.PostActivateQual.EntityName,
                                           zqFrame.PostActivateQual.AttributeName,
                                           "" )
               END
               nRC = fnEvaluateOperatorStr( zqFrame, CompareValue )  // nRC = 1 is true.
            END
            IF nRC = 1
               IF FoundFlag = ""
                  FoundFlag = "Y"
               END
            ELSE
               FoundFlag = "N"
            END
            nRC = SetCursorNextEntity( QueryObject,
                                       zqFrame.PostActivateQual.EntityName,
                                       QualifyingEntityName )
         END
      END
   END
   END
   END
   END
   END
   
   // Determine Return code.
   IF zqFrame.PostActivateQual.SearchType = ""
      zqFrame.PostActivateQual.SelectTrueFlag = ""   // There was no compare type.
   ELSE
      IF OperationName = "ANY" OR OperationName = "ALL"
         // The only valid operations for ANY or ALL are = and <>.
         IF FoundFlag = "Y"
            zqFrame.PostActivateQual.SelectTrueFlag = "T"
         ELSE
            zqFrame.PostActivateQual.SelectTrueFlag = "F"
         END
      ELSE
         IF OperationName != ""
            // Evaluate operator for SUM, AVG, COUNT, NNULL, MAX and MIN.
            IF DataType = "L" OR DataType = "M"
               nRC = fnEvaluateOperatorDec( zqFrame, OperationResult )  // nRC = 1 is true.
            ELSE
               nRC = fnEvaluateOperatorStr( zqFrame, CompareValue )  // nRC = 1 is true.
            END
            IF nRC = 1
               zqFrame.PostActivateQual.SelectTrueFlag = "T"
            ELSE
               zqFrame.PostActivateQual.SelectTrueFlag = "F"
            END
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: ComputeOperationValue
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ComputeOperationValue( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW vResultSetOrig,
                       DECIMAL ReturnedValue,
                       STRING ( 32 ) OperationName,
                       STRING ( 32 ) szEntityName,
                       STRING ( 32 ) szAttributeName,
                       STRING ( 32 ) szScopingEntityName )

   // Perform the group operation of:
   //   SUM
   //   AVG
   //   COUNT
   //   NNULL
   //   MAX
   //   MIN
   // on the Entity/Attribute passed and return the value as a decimal.

   VIEW vResultSet
   STRING ( 30 ) szNumericValue
   DECIMAL Sum
   DECIMAL Max
   DECIMAL Min
   DECIMAL Average
   DECIMAL AttributeValue
   INTEGER Count
   INTEGER nRC
   
   // We'll do everything using temp view.
   CreateViewFromView( vResultSet, vResultSetOrig ) 
   NAME VIEW vResultSet "ResultSetTemp"  
   
   IF OperationName = "MAX"
      Count = 0
      Max   = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      IF nRC >= zCURSOR_SET
         LOOP WHILE nRC >= zCURSOR_SET
      
            // Null values and invalid decimal values are ignored. 
            GetStringFromAttribute( szNumericValue, vResultSet, szEntityName, szAttributeName )
            IF szNumericValue != ""
               nRC = IsNumber( szNumericValue )
               IF nRC != 2
                  GetDecimalFromAttribute( AttributeValue, vResultSet, szEntityName, szAttributeName )
                  Count = Count + 1
                  IF AttributeValue > Max OR Count = 1
                     Max = AttributeValue
                  END
               END
            END
            nRC = SetCursorNextEntity( vResultSet,
                                       szEntityName,
                                       szScopingEntityName )
         END
      END
      ReturnedValue = Max
   ELSE
   IF OperationName = "MIN"
      Count = 0
      Min   = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      IF nRC >= zCURSOR_SET
         LOOP WHILE nRC >= zCURSOR_SET
      
            // Null values and invalid decimal values are ignored. 
            GetStringFromAttribute( szNumericValue, vResultSet, szEntityName, szAttributeName )
            IF szNumericValue != ""
               nRC = IsNumber( szNumericValue )
               IF nRC != 2
                  GetDecimalFromAttribute( AttributeValue, vResultSet, szEntityName, szAttributeName )
                  Count = Count + 1
                  IF AttributeValue < Min OR Count = 1
                     Min = AttributeValue
                  END
               END
            END
            nRC = SetCursorNextEntity( vResultSet,
                                       szEntityName,
                                       szScopingEntityName )
         END
      END
      ReturnedValue = Min
   ELSE
   IF OperationName = "COUNT"
      Count = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
         Count = Count + 1
         nRC = SetCursorNextEntity( vResultSet,
                                    szEntityName,
                                    szScopingEntityName )
      END
      ReturnedValue = Count
   ELSE
   IF OperationName = "NNULL"
      Count = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
         nRC = CompareAttributeToString( vResultSet,
                                         szEntityName,
                                         szAttributeName,
                                         "" )
         IF nRC != 0
            Count = Count + 1
         END
         nRC = SetCursorNextEntity( vResultSet,
                                    szEntityName,
                                    szScopingEntityName )
      END
      ReturnedValue = Count
   ELSE
   IF OperationName = "SUM" OR OperationName = "AVG"
      Count = 0
      Sum   = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
      
         // Null values and invalid decimal values are ignored. 
         GetStringFromAttribute( szNumericValue, vResultSet, szEntityName, szAttributeName )
         IF szNumericValue != ""
            nRC = IsNumber( szNumericValue )
            IF nRC != 2
               GetDecimalFromAttribute( AttributeValue, vResultSet, szEntityName, szAttributeName )
               Count = Count + 1
               Sum = Sum + AttributeValue
            END
         END
         nRC = SetCursorNextEntity( vResultSet,
                                    szEntityName,
                                    szScopingEntityName )
      END
      IF OperationName = "AVG"
         IF Count = 0
            ReturnedValue = 0
         ELSE
            ReturnedValue = Sum / Count
         END
      ELSE
         ReturnedValue = Sum
      END
   END
   END
   END
   END
   END
   DropView( vResultSet )

END

/*************************************************************************************************
**
**    OPERATION: ComputeOperationVDate
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ComputeOperationVDate( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW vResultSetOrig,
                       STRING ( 50 ) ReturnedValue,
                       STRING ( 32 ) OperationName,
                       STRING ( 32 ) szEntityName,
                       STRING ( 32 ) szAttributeName,
                       STRING ( 32 ) szScopingEntityName )

   // Perform the group operation of:
   //   COUNT
   //   NNULL
   //   MAX
   //   MIN
   // on the Entity/Attribute passed and return the value as a decimal.
   // Note that SUM and AVG are ignored.

   VIEW vResultSet
   STRING ( 50 ) szMaxMin
   STRING ( 50 ) AttributeValue
   INTEGER Count
   SHORT   nRC

   CreateViewFromView( vResultSet, vResultSetOrig )
   IF OperationName = "MAX"
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      IF nRC >= zCURSOR_SET
         GetStringFromAttribute( szMaxMin,
                                 vResultSet,
                                 szEntityName,
                                 szAttributeName )
         LOOP WHILE nRC >= zCURSOR_SET
            nRC = SetCursorNextEntity( vResultSet,
                                       szEntityName,
                                       szScopingEntityName )
            IF nRC >= zCURSOR_SET
               GetStringFromAttribute( AttributeValue,
                                       vResultSet,
                                       szEntityName,
                                       szAttributeName )

               IF AttributeValue > szMaxMin
                  szMaxMin = AttributeValue
               END
            END
         END
      ELSE
         szMaxMin = ""
      END
      ReturnedValue = szMaxMin
   ELSE
   IF OperationName = "MIN"
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      IF nRC >= zCURSOR_SET
         GetStringFromAttribute( szMaxMin,
                                 vResultSet,
                                 szEntityName,
                                 szAttributeName )
         LOOP WHILE nRC >= zCURSOR_SET
            nRC = SetCursorNextEntity( vResultSet,
                                       szEntityName,
                                       szScopingEntityName )
            IF nRC >= zCURSOR_SET
               GetStringFromAttribute( AttributeValue,
                                       vResultSet,
                                       szEntityName,
                                       szAttributeName )

               IF AttributeValue < szMaxMin
                  szMaxMin = AttributeValue
               END
            END
         END
      ELSE
         szMaxMin = ""
      END
      ReturnedValue = szMaxMin
   ELSE
   IF OperationName = "COUNT"
      Count = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
         Count = Count + 1
         nRC = SetCursorNextEntity( vResultSet,
                                    szEntityName,
                                    szScopingEntityName )
      END
      ReturnedValue = Count
   ELSE
   IF OperationName = "NNULL"
      Count = 0
      nRC = SetCursorFirstEntity( vResultSet,
                                  szEntityName,
                                  szScopingEntityName )
      LOOP WHILE nRC >= zCURSOR_SET
         nRC = CompareAttributeToString( vResultSet,
                                         szEntityName,
                                         szAttributeName,
                                         "" )
         IF nRC != 0
            Count = Count + 1
         END
         nRC = SetCursorNextEntity( vResultSet,
                                    szEntityName,
                                    szScopingEntityName )
      END
      ReturnedValue = Count
   ELSE
   IF OperationName = "SUM" OR OperationName = "AVG"
      ReturnedValue = ""
   END
   END
   END
   END
   END
   DropView( vResultSet )

END

/*************************************************************************************************
**
**    OPERATION: fnEvaluateOperatorDec
**
**
*************************************************************************************************/
LOCAL OPERATION
fnEvaluateOperatorDec( VIEW    zqFrame BASED ON LOD zqFrame,
                       DECIMAL OperationResult )

   DECIMAL       TargetValue
   STRING ( 10 ) CompareType
   SHORT         nRC

   // This is the evaluate operator routine for SUM, AVG, COUNT, NNULL, MAX and MIN or any decimal
   // or integer compare.
   // Process as either simple single evaluation or as subselect.

   IF zqFrame.PostActivateQualSub DOES NOT EXIST
      CompareType = zqFrame.PostActivateQual.SearchType
      TargetValue = zqFrame.PostActivateQual.Value
      // This is the simple case.
      IF OperationResult = TargetValue
         IF CompareType = "="  OR
            CompareType = ">=" OR
            CompareType = "<="

            nRC = 1
         ELSE
            nRC = 0
         END
      ELSE
         IF OperationResult > TargetValue
            IF CompareType = ">"  OR
               CompareType = ">=" OR
               CompareType = "<>"

               nRC = 1
            ELSE
               nRC = 0
            END
         ELSE
            // OperationResult < TargetValue
            IF CompareType = "<"  OR
               CompareType = "<=" OR
               CompareType = "<>"

               nRC = 1
            ELSE
               nRC = 0
            END
         END
      END
   ELSE
      // This is the subselect case.
      // First evaluate each SubParameter the same as above.
      FOR EACH zqFrame.PostActivateQualSub
         CompareType = zqFrame.PostActivateQualSub.SearchType
         TargetValue = zqFrame.PostActivateQualSub.Value
         IF OperationResult = TargetValue
            IF CompareType = "="  OR
               CompareType = ">=" OR
               CompareType = "<="

               zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
            ELSE
               zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
            END
         ELSE
            IF OperationResult > TargetValue
               IF CompareType = ">"  OR
                  CompareType = ">=" OR
                  CompareType = "<>"

                  zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
               ELSE
                  zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
               END
            ELSE
               // OperationResult < TargetValue
               IF CompareType = "<"  OR
                  CompareType = "<=" OR
                  CompareType = "<>"

                  zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
               ELSE
                  zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
               END
            END
         END
      END

      // Next, evaluate the combination based on the boolean operator AND or OR.
      IF zqFrame.PostActivateQual.SecondLevelOperator = "AND"
         // Evaluate for the AND condition.
         nRC = 1
         FOR EACH zqFrame.PostActivateQualSub
            IF zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
               nRC = 0
            END
         END
      ELSE
         // Evaluate for the OR condition.
         nRC = -1
         FOR EACH zqFrame.PostActivateQualSub
            IF zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
               nRC = 1
            ELSE
               IF nRC = -1
                  nRC = 0
               END
            END
         END
      END
   END
   RETURN nRC

END

/*************************************************************************************************
**
**    OPERATION: fnEvaluateOperatorStr
**
**
*************************************************************************************************/
LOCAL OPERATION
fnEvaluateOperatorStr( VIEW zqFrame BASED ON LOD zqFrame,
                       STRING ( 50 ) CompareValue )

   // Process operator evaluation for ANY or ALL operators or for regular string or date compares.
   // Note that we will do the compare by converting one of the values, CompareValue, to a work
   // attribute. This is so that the compare is not sensitive to upper/lower case differences,
   // which is the same as the database compare is SQL.
   // The only difference to the above is the case of finding a character string in another character string. In
   // that case we will convert both strings to uppercase because the find function we use is case senstive.

   SHORT            nRC
   STRING ( 10 )    CompareType
   STRING ( 50 )    TargetValue
   STRING ( 50 )    TargetValueUpper
   STRING ( 50 )    CompareValueUpper
   STRING ( 1 )     DataType

   DataType = zqFrame.PostActivateQual.DataType
   zqFrame.zqFrame.wCompareValue = CompareValue
   IF zqFrame.PostActivateQualSub DOES NOT EXIST
      IF DataType = "D" OR DataType = "T"
         TargetValue = zqFrame.PostActivateQual.ValueDate
      ELSE
         TargetValue = zqFrame.PostActivateQual.Value
      END
      CompareType = zqFrame.PostActivateQual.SearchType
      // Simple case, no subgroup entries.
      IF CompareType = "contains" AND
         DataType    = "S"
         // The compare is looking for a string within a string.
         // Convert both strings to upper case so the find is NOT case sensitive.
         zToUpper( TargetValue, TargetValueUpper )
         zToUpper( CompareValue, CompareValueUpper )
         zqFrame.zqFrame.wCompareValue = CompareValueUpper
         nRC = FindStringInAttribute( TargetValueUpper,
                                      zqFrame, "zqFrame", "wCompareValue" )
         IF nRC = 0
            nRC = 1
         ELSE
            nRC = 0
         END
      ELSE
         // The compare is normal whole value compare.
         IF zqFrame.zqFrame.wCompareValue = TargetValue
            IF CompareType = "="  OR
               CompareType = ">=" OR
               CompareType = "<="

               nRC = 1
            ELSE
               nRC = 0
            END
         ELSE
            IF zqFrame.zqFrame.wCompareValue > TargetValue
               IF CompareType = ">"  OR
                  CompareType = ">=" OR
                  CompareType = "<>"

                  nRC = 1
               ELSE
                  nRC = 0
               END
            ELSE
               // CompareValue < TargetValue
               IF CompareType = "<"  OR
                  CompareType = "<=" OR
                  CompareType = "<>"

                  nRC = 1
               ELSE
                  nRC = 0
               END
            END
         END
      END
   ELSE
      // This is the subselect case.
      // First evaluate each SubParameter the same as above.
      FOR EACH zqFrame.PostActivateQualSub
         IF DataType = "D" OR DataType = "T"
            TargetValue = zqFrame.PostActivateQualSub.ValueDate
         ELSE
            TargetValue = zqFrame.PostActivateQualSub.Value
         END
         CompareType = zqFrame.PostActivateQualSub.SearchType
         IF CompareType = "contains" AND
            DataType    = "S"
            // The compare is looking for a string within a string.
            nRC = FindStringInAttribute( TargetValue,
                                         zqFrame, "zqFrame", "wCompareValue" )
            IF nRC = 0
               zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
            ELSE
               zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
            END
         ELSE
            IF zqFrame.zqFrame.wCompareValue = TargetValue
               IF CompareType = "="  OR
                  CompareType = ">=" OR
                  CompareType = "<="

                  zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
               ELSE
                  zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
               END
            ELSE
               IF zqFrame.zqFrame.wCompareValue > TargetValue
                  IF CompareType = ">"  OR
                     CompareType = ">=" OR
                     CompareType = "<>"

                     zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
                  ELSE
                     zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
                  END
               ELSE
                  // CompareValue < TargetValue
                  IF CompareType = "<"  OR
                     CompareType = "<=" OR
                     CompareType = "<>"

                     zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
                  ELSE
                     zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
                  END
               END
            END
         END
      END

      // Next, evaluate the combination based on the boolean operator AND or OR.
      IF zqFrame.PostActivateQual.SecondLevelOperator = "AND"
         // Evaluate for the AND condition.
         nRC = 1
         FOR EACH zqFrame.PostActivateQualSub
            IF zqFrame.PostActivateQualSub.SelectTrueFlag = "F"
               nRC = 0
            END
         END
      ELSE
         // Evaluate for the OR condition.
         nRC = -1
         FOR EACH zqFrame.PostActivateQualSub
            IF zqFrame.PostActivateQualSub.SelectTrueFlag = "T"
               nRC = 1
            ELSE
               IF nRC = -1
                  nRC = 0
               END
            END
         END
      END
   END
   RETURN nRC

END

/*************************************************************************************************
**
**    OPERATION: ClearQueryInformation
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ClearQueryInformation( VIEW zqFrame BASED ON LOD zqFrame )

   zqFrame.zqFrame.FirstLevelOperator = "AND"
   FOR EACH zqFrame.GeneralParameter
      zqFrame.GeneralParameter.Value               = ""
      zqFrame.GeneralParameter.SearchType          = ""
      zqFrame.GeneralParameter.ListDisplayFlag     = ""
      zqFrame.GeneralParameter.SecondLevelOperator = ""
      zqFrame.GeneralParameter.SubgroupSearchType  = ""
      FOR EACH zqFrame.GeneralSubParameter
         DELETE ENTITY zqFrame.GeneralSubParameter NONE
      END
   END
   SET CURSOR FIRST zqFrame.GeneralParameter
   FOR EACH zqFrame.PostActivateQual
      DELETE ENTITY zqFrame.PostActivateQual NONE
   END

END

/*************************************************************************************************
**
**    OPERATION: ValidateQuery
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ValidateQuery( VIEW zqFrame BASED ON LOD zqFrame,
               STRING ( 10 ) szType )

   STRING ( 200 ) Msg

   // Validate the query input.

   FOR EACH zqFrame.GeneralParameter
      // If SubgroupSearchType is ANY or ALL, the SearchType can only be '=', '<>' or subselect.
      // Also any SubParameters must be '=' or '<>' and the 2nd level operator must be 'OR'.
      // Also if a SubParameter is '=', the 2nd level operatormust be 'OR'.
      //      If a SubParameter is '<>', the 2nd level operatormust be 'AND'.
      IF zqFrame.GeneralParameter.SubgroupSearchType = "ANY" OR
         zqFrame.GeneralParameter.SubgroupSearchType = "ALL"

         IF zqFrame.GeneralParameter.SearchType = "contains"

            Msg = "Qualification Entry, '" + zqFrame.GeneralParameter.Prompt + "', is in error." +
                  NEW_LINE + "The 'Search Type contains' is not valid for Subgroup selection ANY or ALL."
            MessageSend( zqFrame, "", "Query",
                         Msg,
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN -1
         END
         FOR EACH zqFrame.GeneralSubParameter WHERE zqFrame.GeneralSubParameter.SearchType != ""
            IF zqFrame.GeneralSubParameter.SearchType != "=" AND
               zqFrame.GeneralSubParameter.SearchType != "<>"

               Msg = "Qualification Entry, '" + zqFrame.GeneralParameter.Prompt + "', is in error." +
                     NEW_LINE + "The subselect 'Search Type' is not valid for Subgroup selection ANY or ALL."
               MessageSend( zqFrame, "", "Query",
                            Msg,
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END
            IF zqFrame.GeneralParameter.SecondLevelOperator = "OR" AND
               zqFrame.GeneralSubParameter.SearchType = "<>"

               Msg = "Qualification Entry, '" + zqFrame.GeneralParameter.Prompt + "', is in error." +
                     NEW_LINE + "For 'ANY/ALL', the 'Search Type' must be '=' if the '2nd Level Operator' is 'OR'."
               MessageSend( zqFrame, "", "Query",
                            Msg,
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END
            IF zqFrame.GeneralParameter.SecondLevelOperator = "AND" AND
               zqFrame.GeneralSubParameter.SearchType = "="

               Msg = "Qualification Entry, '" + zqFrame.GeneralParameter.Prompt + "', is in error." +
                     NEW_LINE + "For 'ANY/ALL', the 'Search Type' must be '=' if the '2nd Level Operator' is 'OR'."
               MessageSend( zqFrame, "", "Query",
                            Msg,
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END
         END
      END

      // For SUM and AVG, the attribute must be an integer or a decimal.
      IF zqFrame.GeneralParameter.SubgroupSearchType = "SUM" OR
         zqFrame.GeneralParameter.SubgroupSearchType = "AVG"

         IF zqFrame.GeneralParameter.DataType != "L" AND
            zqFrame.GeneralParameter.DataType != "M"

            Msg = "Qualification Entry, '" + zqFrame.GeneralParameter.Prompt + "', is in error." +
                  NEW_LINE + "SUM or AVG operators are not valid unless the attribute is numeric."
            MessageSend( zqFrame, "", "Query",
                         Msg,
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN -1
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: InitializeFrameForObj
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
InitializeFrameForLOD( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW vLOD_Root )

   VIEW zqFrameRoot BASED ON LOD zqFrame
   VIEW vLOD_Recurs
   STRING ( 32 )  RootEntityName
   STRING ( 400 ) szFileName
   SHORT nRC

   // Format a zqFrame OI with the characteristics of the LOD Frame.

   RootEntityName = vLOD_Root.LOD_EntityParent.Name

   // Clear any current ObjectEntity entries.
   FOR EACH zqFrame.ObjectEntity
      DELETE ENTITY zqFrame.ObjectEntity NONE
   END
   
   // Create the null ObjectEntity entry.
   CREATE ENTITY zqFrame.ObjectEntity

   // Create GeneralParameter entries in zqFrame by calling recursive routine with vLOD_Recurs.
   SET CURSOR FIRST vLOD_Root.LOD       // Make sure we have position. (After a Reset View, we sometimes don't have cursor position.)
   CreateViewFromView( vLOD_Recurs, vLOD_Root )
   NAME VIEW vLOD_Recurs "vLOD_Recurs"
   CreateViewFromView( zqFrameRoot, zqFrame )
   NAME VIEW zqFrameRoot "zqFrameRoot"
   InitializeFrameRecurs( zqFrame, zqFrameRoot, vLOD_Recurs, vLOD_Root, "", RootEntityName, 1 )
   DropView( zqFrameRoot )

END


/*************************************************************************************************
**    
**    OPERATION: RebuildFrameAttr
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
RebuildFrameAttr( VIEW zqFrame BASED ON LOD zqFrame,
                  VIEW vLOD_Root )

   VIEW  vTZZOLODO
   VIEW  vLOD_Recurs
   
   // Set up the QueryFrameAttribute subobject by making sure that every attribute in the LOD 
   // has a QueryFrameAttribute entry and that no QueryFrameAttribute exists that isn't in the LOD.
   // The QueryFrameAttribute entries must be created in hierarchical order.
   
   // Just in case there are already some QueryFrameAttribute entries (which there shouldn't be) delete them.
   FOR EACH vLOD_Root.QueryFrameAttribute
      DELETE ENTITY vLOD_Root.QueryFrameAttribute NONE
   END
   
   // Make sure that each Entity/Attribute combination in the LOD has a corresponding QueryFrameAttribute entry.
   CreateViewFromView( vLOD_Recurs, vLOD_Root )
   NAME VIEW vLOD_Recurs "vLOD_Recurs"
   RebuildFrameAttrRecur( zqFrame, vLOD_Root, vLOD_Recurs ) 
   DropView( vLOD_Recurs )

END

/*************************************************************************************************
**    
**    OPERATION: RebuildFrameAttrRecur
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
RebuildFrameAttrRecur( VIEW zqFrame BASED ON LOD zqFrame,
                       VIEW vLOD_Root,
                       VIEW vLOD_Recurs )

   VIEW  vTZZOLODO
   STRING ( 32 ) szEntityName
   STRING ( 32 ) szAttributeName
   STRING ( 90 ) szPrompt
   INTEGER nRC
   INTEGER Length
   
   // Create QueryFrameAttribute entries from the LOD_EntityParent subobject structure.
   // Note that the vLOD_Root view is pointing to the last QueryFrameAttribute for the Entity
   // just processed. 
   
   FOR EACH vLOD_Recurs.LOD_EntityParent
      FOR EACH vLOD_Recurs.LOD_AttributeRec
         CREATE ENTITY vLOD_Root.QueryFrameAttribute
         szEntityName    = vLOD_Recurs.LOD_EntityParent.Name
         szAttributeName = vLOD_Recurs.ER_AttributeRec.Name
         vLOD_Root.QueryFrameAttribute.EntityName    = szEntityName
         vLOD_Root.QueryFrameAttribute.AttributeName = szAttributeName
         szPrompt = szEntityName + "." + szAttributeName
         Length = zstrlen( szPrompt )
         IF Length > 50 
            // Since QueryFrameAttribute.Prompt is only 50 characters, us Attribute Name is the combined name is to large.
            vLOD_Root.QueryFrameAttribute.Prompt = szAttributeName
         ELSE
            vLOD_Root.QueryFrameAttribute.Prompt = szPrompt
         END
         IF szAttributeName = "ID"
            vLOD_Root.QueryFrameAttribute.Title  = szPrompt
         ELSE
            vLOD_Root.QueryFrameAttribute.Title  = szAttributeName
         END
      END
      
      // Process LOD_EntityChild entries recursively.
      IF vLOD_Recurs.LOD_EntityChild EXISTS
         SetViewToSubobject( vLOD_Recurs, "LOD_EntityChild" )
         RebuildFrameAttrRecur( zqFrame, vLOD_Root, vLOD_Recurs )
         ResetViewFromSubobject( vLOD_Recurs )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: InitializeFrameRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
InitializeFrameRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                       VIEW zqFrameRoot BASED ON LOD zqFrame,
                       VIEW vLOD_Recurs,
                       VIEW vLOD_Root,
                       STRING ( 32 ) ParentEntityName,
                       STRING ( 32 ) RootEntityName,
                       INTEGER       PreviousHierarchicalLevel )

   VIEW zqFrame2 BASED ON LOD zqFrame
   VIEW zqFrame3 BASED ON LOD zqFrame
   STRING ( 32 ) szEntityName
   STRING ( 32 ) szAttributeName
   STRING ( 50 ) szDescription
   STRING ( 1 )  szRootQualificationFlag
   STRING ( 90 ) szEntityAttributeDisplayPrefix
   INTEGER       CardMax
   INTEGER       CurrentHierarchicalLevel
   INTEGER       Count
   
   CurrentHierarchicalLevel = PreviousHierarchicalLevel + 1
   Count = PreviousHierarchicalLevel - 1
   szEntityAttributeDisplayPrefix = ""
   LOOP WHILE Count > 0
      szEntityAttributeDisplayPrefix = szEntityAttributeDisplayPrefix + "..."
      Count = Count - 1
   END

   // Add the General Parameter values for the entity passed. This is recursive and calls itself
   // again for subentities.
   CreateViewFromView( zqFrame2, zqFrameRoot )
   FOR EACH vLOD_Recurs.LOD_EntityParent
      szEntityName = vLOD_Recurs.LOD_EntityParent.Name

      // Create ObjectEntity entry for setting RootQualificationFlag.
      CreateViewFromView( zqFrame3, zqFrameRoot )
      SET CURSOR LAST zqFrame2.ObjectEntity
      CREATE ENTITY zqFrame2.ObjectEntity
      zqFrame2.ObjectEntity.EntityName = szEntityName
      IF vLOD_Recurs.ER_RelLinkRec EXISTS
         IF vLOD_Recurs.ER_RelLinkRec.CardMax = "1"
            CardMax = 1
         ELSE
            CardMax = 99
         END
      ELSE
         CardMax = 0
      END
      DropView( zqFrame3 )
      zqFrame2.ObjectEntity.MaxCardinality = CardMax
      szRootQualificationFlag = ""
      IF RootEntityName = szEntityName
         szRootQualificationFlag = "Y"
      ELSE
         // This is not the root entity so we will get the szRootQualificationFlag value from its parent,
         // if this entity has max cardinality of 1.
         IF CardMax = 1
            CreateViewFromView( zqFrame3, zqFrame )
            SET CURSOR FIRST zqFrame3.ObjectEntity
                       WHERE zqFrame3.ObjectEntity.EntityName = ParentEntityName
            szRootQualificationFlag = zqFrame3.ObjectEntity.RootQualificationFlag
            DropView( zqFrame3 )
         END
      END
      zqFrame2.ObjectEntity.RootQualificationFlag = szRootQualificationFlag

      // Create GeneralParameter entries for each attribute within entity.
      FOR EACH vLOD_Recurs.LOD_AttributeRec
         CREATE ENTITY zqFrame.GeneralParameter
         SET CURSOR FIRST vLOD_Root.QueryFrameAttribute
                    WHERE vLOD_Root.QueryFrameAttribute.EntityName    = vLOD_Recurs.LOD_EntityParent.Name
                      AND vLOD_Root.QueryFrameAttribute.AttributeName = vLOD_Recurs.ER_AttributeRec.Name
         IF RESULT >= zCURSOR_SET 
            zqFrame.GeneralParameter.AttributeName         = vLOD_Root.QueryFrameAttribute.AttributeName
            zqFrame.GeneralParameter.EntityName            = vLOD_Root.QueryFrameAttribute.EntityName
            zqFrame.GeneralParameter.ExternalDescription   = vLOD_Root.QueryFrameAttribute.ExternalDescription
            zqFrame.GeneralParameter.DataType              = vLOD_Recurs.DomainRec.DataType
            zqFrame.GeneralParameter.Prompt                = szEntityAttributeDisplayPrefix +
                                                             zqFrame.GeneralParameter.EntityName + "." +
                                                             zqFrame.GeneralParameter.AttributeName
            zqFrame.GeneralParameter.Title                 = vLOD_Root.QueryFrameAttribute.Title
            zqFrame.GeneralParameter.RootQualificationFlag = szRootQualificationFlag
            zqFrame.GeneralParameter.MaxCardinality        = CardMax
             zqFrame.GeneralParameter.ListDisplayFlag="Y"
         ELSE
            zqFrame.GeneralParameter.AttributeName         = vLOD_Recurs.ER_AttributeRec.Name
            zqFrame.GeneralParameter.EntityName            = vLOD_Recurs.LOD_EntityParent.Name
            szDescription                                  = vLOD_Recurs.ER_AttributeRec.Desc
            zqFrame.GeneralParameter.ExternalDescription   = szDescription     // Limit text to 50 characters.
            zqFrame.GeneralParameter.DataType              = vLOD_Recurs.DomainRec.DataType
            zqFrame.GeneralParameter.Prompt                = szEntityAttributeDisplayPrefix +
                                                             zqFrame.GeneralParameter.EntityName + "." +
                                                             zqFrame.GeneralParameter.AttributeName
            zqFrame.GeneralParameter.Title                 = ""
            zqFrame.GeneralParameter.RootQualificationFlag = szRootQualificationFlag
            zqFrame.GeneralParameter.MaxCardinality        = CardMax
            zqFrame.GeneralParameter.ListDisplayFlag       = "Y"
         END
         
         // We will set the derived flag for three conditions, 
         // 1) the attribute is derived, 
         // 2) the entity is derived,
         // 3) the entity is a work entity. All of these will trigger post-activate searches instead of SQL searches.
         IF vLOD_Recurs.LOD_AttributeRec.Work = "Y" OR 
            vLOD_Recurs.LOD_EntityParent.Derived = "Y" OR 
            vLOD_Recurs.LOD_EntityParent.Work = "Y"
            
            zqFrame.GeneralParameter.DerivedAttributeFlag = "Y"
         END
      END

      // Process each subentity.
      SetViewToSubobject( vLOD_Recurs, "LOD_EntityChild" )
      InitializeFrameRecurs( zqFrame, zqFrameRoot, vLOD_Recurs, vLOD_Root, szEntityName, RootEntityName, CurrentHierarchicalLevel )
      ResetViewFromSubobject( vLOD_Recurs )
   END
   DropView( zqFrame2 )

END

/*************************************************************************************************
**
**    OPERATION: RebuildObjEntRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
RebuildObjEntRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                     VIEW zqFrameRoot BASED ON LOD zqFrame,
                     VIEW vLOD_Recurs,
                     VIEW vLOD_Root,
                     STRING ( 32 ) ParentEntityName,
                     STRING ( 32 ) RootEntityName )

   VIEW zqFrame2 BASED ON LOD zqFrame
   VIEW zqFrame3 BASED ON LOD zqFrame
   STRING ( 32 ) szEntityName
   STRING ( 32 ) szAttributeName
   STRING ( 1 )  szRootQualificationFlag
   INTEGER       CardMax

   // This is the same as InitializeFrameRecurs above except that it only builds the ObjectEntity entries
   // and leaves the GeneralParameter entries as is.
   CreateViewFromView( zqFrame2, zqFrameRoot )
   FOR EACH vLOD_Recurs.LOD_EntityParent
      szEntityName = vLOD_Recurs.LOD_EntityParent.Name

      // Create ObjectEntity entry for setting RootQualificationFlag.
      CreateViewFromView( zqFrame3, zqFrameRoot )
      SET CURSOR LAST zqFrame2.ObjectEntity
      CREATE ENTITY zqFrame2.ObjectEntity
      zqFrame2.ObjectEntity.EntityName = szEntityName
      IF vLOD_Recurs.ER_RelLinkRec EXISTS
         IF vLOD_Recurs.ER_RelLinkRec.CardMax = "1"
            CardMax = 1
         ELSE
            CardMax = 99
         END
      ELSE
         CardMax = 0
      END
      DropView( zqFrame3 )
      zqFrame2.ObjectEntity.MaxCardinality = CardMax
      szRootQualificationFlag = ""
      IF RootEntityName = szEntityName
         szRootQualificationFlag = "Y"
      ELSE
         // This is not the root entity so we will get the szRootQualificationFlag value from its parent,
         // if this entity has max cardinality of 1.
         IF CardMax = 1
            CreateViewFromView( zqFrame3, zqFrameRoot )
            NAME VIEW zqFrame3 "zqFrame3"
            SET CURSOR FIRST zqFrame3.ObjectEntity
                       WHERE zqFrame3.ObjectEntity.EntityName = ParentEntityName
            IF RESULT >= zCURSOR_SET
               szRootQualificationFlag = zqFrame3.ObjectEntity.RootQualificationFlag
            END
            DropView( zqFrame3 )
         END
      END
      zqFrame2.ObjectEntity.RootQualificationFlag = szRootQualificationFlag

      // Process each subentity.
      SetViewToSubobject( vLOD_Recurs, "LOD_EntityChild" )
      RebuildObjEntRecurs( zqFrame, zqFrameRoot, vLOD_Recurs, vLOD_Root, szEntityName, RootEntityName )
      ResetViewFromSubobject( vLOD_Recurs )
   END
   DropView( zqFrame2 )

END

/*************************************************************************************************
**
**    OPERATION: FormatDisplay
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatDisplay( VIEW zqFrame BASED ON LOD zqFrame,
               VIEW vLOD )

   VIEW zqFrameRoot  BASED ON LOD zqFrame
   STRING ( 32 ) szEntityName
   STRING ( 1 )  szDisplayOrderFlag
   INTEGER       Count

   // Create the ParentEntity subobject for formatting the CSV and Report data efficiently.
   // We could have used a combination of the GeneralParameter subobject and vLOD, but it
   // wouldn't be as efficient.
   
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.DisplayOrder != ""
   IF RESULT >= zCURSOR_SET
      szDisplayOrderFlag = "Y"
      Count = 0
      FOR EACH zqFrame.GeneralParameter 
         Count = Count + 1
         zqFrame.GeneralParameter.OriginalOrder = Count
      END
      OrderEntityForView( zqFrame, "GeneralParameter", "DisplayOrder A" )
   ELSE
      szDisplayOrderFlag = ""
   END

   // Create entity entries recursively, starting with root entity.
   CreateViewFromView( zqFrameRoot, zqFrame )
   NAME VIEW zqFrame "zqFrameRoot"

   FOR EACH zqFrame.ParentEntity
      DELETE ENTITY zqFrame.ParentEntity NONE
   END
   SET CURSOR FIRST zqFrame.ParentEntity
   SET CURSOR FIRST vLOD.LOD   // Make sure we have cursor position, as return from subobject may lose it. 
   FormatDisplayRecur( zqFrame, zqFrameRoot, vLOD )
   SET CURSOR FIRST zqFrame.zqFrame     // Make sure we have good position on top entity. 
   SET CURSOR FIRST zqFrameRoot.zqFrame // Make sure we have good position on top entity. 
   DropView( zqFrameRoot )
   
   // Reset order, if necessary.
   IF szDisplayOrderFlag = "Y"
      OrderEntityForView( zqFrame, "GeneralParameter", "OriginalOrder A" )
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatDisplayRecur
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatDisplayRecur( VIEW zqFrame     BASED ON LOD zqFrame,
                    VIEW zqFrameRoot BASED ON LOD zqFrame,
                    VIEW vLOD )

   VIEW zqFrame2 BASED ON LOD zqFrame
   STRING ( 32 ) szEntityName
   STRING ( 5 )  szGroupOper
   STRING ( 1 )  RegularMappingFlag
   STRING ( 1 )  DataType
   STRING ( 2 )  szCardMax
   STRING ( 1 )  szFoundFlag
   INTEGER       Length
   SHORT         nRC

   // Create the ParentEntity subobject for formatting the CSV and Report data efficiently.
   // We could have used a combination of the GeneralParameter subobject and vLOD, but it
   // wouldn't be as efficient.
   // We also need to put attributes with the correct Entity. Normally this is the Entity for
   // which they are defined in the LOD. However, there are four conditions when they will be
   // put with a different Entity.
   // 1. This attribute is defined as a Subgroup Search Type (MAX, AVG, etc.), ON the ROOT entity.
   //    In this case, no Attribute is created for a ParentEntity subobject. These are handled
   //    separately as totals.
   // 2. This attribute is defined as a Subgroup Search Type (MAX, AVG, etc.), WITHOUT a Scoping
   //    Entity. In this case the Attribute is put on its parent Entity.
   // 3. This attribute is defined as a Subgroup Search Type (MAX, AVG, etc.), WITH a Scoping
   //    Entity. In this case the Attribute is put on the Scoping Entity.
   // 4. The Entity holding the Attribute has max cardinality of 1 with its parent. In this
   //    case the Attribute is put on the first parent with max cardinality > 1.
   
   // **** NOTE: We're NOT supporting group operation like SUM and AVG on the web interface. (DonC 3/13/2019)

   // Create ParentEntity values.
   CREATE ENTITY zqFrame.ParentEntity 
   szEntityName = vLOD.LOD_EntityParent.Name
   zqFrame.ParentEntity.EntityName = szEntityName
   IF vLOD.ER_RelLinkRec EXISTS
      CreateViewFromView( zqFrame2, zqFrameRoot )
      IF vLOD.ER_RelLinkRec.CardMax = "1"
         szCardMax = 1
      ELSE
         szCardMax = 99
      END
      SetAttributeFromString( zqFrame, "ParentEntity", "LOD_MaxCardinality", szCardMax )
      SET CURSOR FIRST zqFrame2.GeneralParameter 
                 WHERE zqFrame2.GeneralParameter.EntityName = szEntityName 
                   AND zqFrame2.GeneralParameter.ForceFormatMaxCardinalityOne = "Y"
      IF RESULT >= zCURSOR_SET
         // The entity has been requested for formatting as Max Cardinality 1, so force that cardinality.
         szCardMax = 1
      END
      SetAttributeFromString( zqFrame, "ParentEntity", "MaxCardinality", szCardMax )
      DropView( zqFrame2 )
   ELSE
      IF vLOD.LOD_EntityParent.Work = "Y" OR vLOD.LOD_EntityParent.Derived = "Y"
         // Don C modification on 3/19/2012 so that max cardinality could be forced on work entities.
         // Set max cardinality of 99 or work entity, unless the force max cardinality attribue it set.
         CreateViewFromView( zqFrame2, zqFrameRoot )
         SET CURSOR FIRST zqFrame2.GeneralParameter 
                    WHERE zqFrame2.GeneralParameter.EntityName = szEntityName 
                      AND zqFrame2.GeneralParameter.ForceFormatMaxCardinalityOne = "Y"
         IF RESULT >= zCURSOR_SET
            // The entity has been requested for formatting as Max Cardinality 1, so force that cardinality.
            SetAttributeFromString( zqFrame, "ParentEntity", "MaxCardinality", "1" )
         ELSE
            SetAttributeFromString( zqFrame, "ParentEntity", "MaxCardinality", "99" )
         END
         DropView( zqFrame2 )
      END
   END
   
   // Add any General Parameter Display Attributes under the appropriate ParentEntity.
   FOR EACH zqFrameRoot.GeneralParameter
         WHERE zqFrameRoot.GeneralParameter.ListDisplayFlag = "Y"
           AND zqFrameRoot.GeneralParameter.EntityName = szEntityName
           AND ( zqFrameRoot.GeneralParameter.EntityName != zqFrameRoot.zqFrame.QueryObjectRootEntityName OR
                 zqFrameRoot.GeneralParameter.SubgroupSearchType = "" )
                 
      // Note that for Case 1 above, we skip the code inside the loop based on the WHERE condition.
                 
      // zqFrame2 will be positioned on the Entity that is to display the Attribute, which may be an
      // Entity up the parent tree. For a regular Attribute, the position won't change.
      CreateViewFromView( zqFrame2, zqFrame )
      NAME VIEW zqFrame2 "zqFrame2"
      szGroupOper = zqFrameRoot.GeneralParameter.SubgroupSearchType
      IF szGroupOper = "SUM" OR
         szGroupOper = "AVG" OR
         szGroupOper = "MAX" OR
         szGroupOper = "MIN" OR
         szGroupOper = "NNULL" OR
         szGroupOper = "COUNT"

         IF zqFrameRoot.GeneralParameter.ScopingEntityName = ""
            // Case 2 above - The attribute is defined as a Subgroup Search Type without a Scoping
            // Entity so just put it on its parent.
            ResetViewFromSubobject( zqFrame2 )
         ELSE
            // Case 3 above - The attribute is defined as a Subgroup Search Type with a Scoping
            // Entity so just put it on the Scoping Entity.
            nRC = ResetViewFromSubobject( zqFrame2 )
            LOOP WHILE nRC = 0 AND
                       zqFrame2.ParentEntity.EntityName != zqFrameRoot.GeneralParameter.ScopingEntityName AND 
                       zqFrame2.ParentEntity.EntityName != zqFrameRoot.zqFrame.QueryObjectRootEntityName
               nRC = ResetViewFromSubobject( zqFrame2 )
            END
         END
      ELSE
         IF zqFrame.ParentEntity.MaxCardinality = 1
            // Make sure that the GeneralParameter has the correct Max Cardinality.
            IF zqFrameRoot.GeneralParameter.MaxCardinality != zqFrame.ParentEntity.MaxCardinality
               zqFrameRoot.GeneralParameter.MaxCardinality = zqFrame.ParentEntity.MaxCardinality
            END
            // Case 4 above - We are a regular Attribute with max cardinality of 1, so go up the
            // tree until we get to the top or until we find a parent with max cardinality > 1.
            nRC = ResetViewFromSubobject( zqFrame2 )
            LOOP WHILE nRC = 0 AND 
                       zqFrame2.ParentEntity.MaxCardinality = 1 AND 
                       zqFrame2.ParentEntity.EntityName != zqFrameRoot.zqFrame.QueryObjectRootEntityName 
               nRC = ResetViewFromSubobject( zqFrame2 )
            END
         END
      END
      SET CURSOR LAST zqFrame2.QueryAttribute

      // Determine the length of the Attribute, which is taken from the LOD, unless there is an
      // override length.
// **** TEMP CHANGE: 3/19/2019, DonC first replaced the SET CURSOR .. WITHIN with the loop below, but then commented out
// everything because the ResetViewFromSubobject for vLOD was not positioning on the parent entity.
      /*SET CURSOR FIRST vLOD.LOD_Attribute
      szFoundFlag = ""
      LOOP WHILE RESULT >= zCURSOR_SET AND szFoundFlag = ""
         IF vLOD.ER_AttributeRec.Name = zqFrameRoot.GeneralParameter.AttributeName
            szFoundFlag = "Y"
         ELSE
            SET CURSOR NEXT vLOD.LOD_Attribute
         END
      END
      IF szFoundFlag = "Y" 
      //SET CURSOR FIRST vLOD.ER_AttributeRec WITHIN vLOD.LOD_EntityParent
      //           WHERE vLOD.ER_AttributeRec.Name = zqFrameRoot.GeneralParameter.AttributeName
      //IF RESULT >= zCURSOR_SET
         IF zqFrameRoot.GeneralParameter.OverrideLength = ""
             // For Table Domains, the Length is always 12.
             IF vLOD.DomainRec.DomainType = "T"
                Length = 12
             ELSE
                // Otherwise, use length from LOD or based on Data Type.
                DataType = vLOD.DomainRec.DataType
                IF DataType = "M" OR DataType = "T" OR DataType = "D"
                   // Decimal, DateTime or Date
                   Length = 15
                ELSE
                IF DataType = "S"
                   // String
                   IF vLOD.ER_AttributeRec.Lth != ""
                      Length = vLOD.ER_AttributeRec.Lth
                   ELSE
                      Length = vLOD.DomainRec.MaxStringLth
                   END
                ELSE
                   // All Others
                   Length = 12
                END
                END
             END
          ELSE
             // User override length.
             Length = zqFrameRoot.GeneralParameter.OverrideLength
          END
      END*/
      Length = 20
      CREATE ENTITY zqFrame2.QueryAttribute
      IF szGroupOper = "" OR
         szGroupOper = "ANY" OR
         szGroupOper = "ALL"

         // This is not a group operation, so set regular values.
         zqFrame2.QueryAttribute.AttributeName        = zqFrameRoot.GeneralParameter.AttributeName
         zqFrame2.QueryAttribute.MappingEntityName    = szEntityName
         zqFrame2.QueryAttribute.Prompt               = zqFrameRoot.GeneralParameter.Title
         zqFrame2.QueryAttribute.Length               = Length
         zqFrame2.QueryAttribute.Type                 = zqFrameRoot.GeneralParameter.DataType
         zqFrame2.QueryAttribute.DisplayRow           = zqFrameRoot.GeneralParameter.DisplayRow
         zqFrame2.QueryAttribute.DisplayDomainContext = zqFrameRoot.GeneralParameter.DisplayDomainContext 
          
      ELSE
         // This is a group operation (SUM, AVG, etc.), so set special values.
         zqFrame2.QueryAttribute.GroupOperation              = szGroupOper
         zqFrame2.QueryAttribute.GroupOperationEntityName    = zqFrameRoot.GeneralParameter.EntityName
         zqFrame2.QueryAttribute.GroupOperationAttributeName = zqFrameRoot.GeneralParameter.AttributeName
         zqFrame2.QueryAttribute.Prompt                      = zqFrameRoot.GeneralParameter.Title
         zqFrame2.QueryAttribute.Length                      = Length
         zqFrame2.QueryAttribute.Type                        = zqFrameRoot.GeneralParameter.DataType
         zqFrame2.QueryAttribute.DisplayRow                  = zqFrameRoot.GeneralParameter.DisplayRow
         zqFrame2.QueryAttribute.DisplayDomainContext        = zqFrameRoot.GeneralParameter.DisplayDomainContext 

         IF zqFrameRoot.GeneralParameter.ScopingEntityName != ""
            zqFrame2.QueryAttribute.GroupOperationScopingEntityName = zqFrameRoot.GeneralParameter.ScopingEntityName 
         ELSE
            // Scoping default is parent.
            zqFrame2.QueryAttribute.GroupOperationScopingEntityName = zqFrame2.ParentEntity.EntityName 
         END
      END
      // Make sure order is maintained.
      zqFrame2.QueryAttribute.DisplayOrder = zqFrameRoot.GeneralParameter.DisplayOrder 
      OrderEntityForView( zqFrame2, "QueryAttribute", "DisplayOrder A" )
      DropView( zqFrame2 )
   END

   // Create rest of recursive structure.
   // On 4/29/2019 DonC switched SetViewToSubobject to after ChildEntity is created because JOE was setting the view to
   // the subobject if the entity didn't exist.
   IF vLOD.LOD_EntityChild EXISTS
      SetViewToSubobject( vLOD, "LOD_EntityChild" )
      SetViewToSubobject( zqFrame, "ChildEntity" )
      FOR EACH vLOD.LOD_EntityParent
         FormatDisplayRecur( zqFrame, zqFrameRoot, vLOD )
      END
//szEntityName = vLOD.LOD_EntityParent.Name 
//TraceLineS( "@@ Before Reset: ", szEntityName )
      ResetViewFromSubobject( vLOD )
//szEntityName = vLOD.LOD_EntityParent.Name 
//TraceLineS( "@@ After Reset: ", szEntityName )
      ResetViewFromSubobject( zqFrame )
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_TotalsLine
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_TotalsLine( VIEW zqFrame BASED ON LOD zqFrame,
                      STRING ( 10000 ) OutputLine,
                      VIEW vResultSet )

   VIEW wXferO REGISTERED AS wXferO
   DECIMAL       OperationResult
   STRING ( 20 ) FormattedValue

   // Create a line for holding each COUNT, SUM, etc. for the root entity.
   // Loop through all root operations and compute the total.

   FOR EACH zqFrame.GeneralParameter
           WHERE zqFrame.GeneralParameter.SubgroupSearchType != ""
             AND zqFrame.GeneralParameter.ListDisplayFlag = "Y"
             AND zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
                
      ComputeOperationValue( zqFrame,
                             vResultSet,
                             OperationResult,
                             zqFrame.GeneralParameter.SubgroupSearchType,
                             zqFrame.GeneralParameter.EntityName,
                             zqFrame.GeneralParameter.AttributeName,
                             zqFrame.zqFrame.QueryObjectRootEntityName )
      wXferO.QueryValues.WorkRevenue = OperationResult
      FormattedValue = wXferO.QueryValues.WorkRevenue
      OutputLine = OutputLine + QUOTES + FormattedValue + QUOTES + ","
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_FullOutput
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_FullOutput( VIEW zqFrame BASED ON LOD zqFrame,
                      STRING ( 10000 ) OutputLine )

   INTEGER Count
   STRING ( 100000 ) strValue

   // Format OutputLine from CSV_OutputLineItem.
   OutputLine = ""
   Count = 0
   FOR EACH zqFrame.CSV_OutputLineItem 
      Count = Count + 1
      // KJS 08/08/22 - Replace any double quotes with single quotes.
      strValue = zqFrame.CSV_OutputLineItem.Value
      zSearchAndReplace(strValue, 100000,QUOTES,"'" )
      IF Count = 1
         // First attribute does not have beginning comma.
         OutputLine = OutputLine + QUOTES + strValue + QUOTES
      ELSE
         // For other attributes, precede the attribute value with a comma.
         OutputLine = OutputLine + "," + QUOTES + strValue + QUOTES
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_TitleRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_TitleRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                       VIEW zqFrameRoot BASED ON LOD zqFrame,
                       STRING ( 10000 ) OutputLine,
                       INTEGER         NextColumnNumber,
                       STRING ( 1 )    szTypeFlag,
                       INTEGER         RecursiveLevel )

   VIEW zqFrameT BASED ON LOD zqFrame
   SHORT nRC

   // For each attribute to be displayed, add a title to the title line.
   // Also determine the column number for display of each attribute.
   //TraceLineI( "*** Recursive Level: ", RecursiveLevel )
   RecursiveLevel = RecursiveLevel + 1

   FOR EACH zqFrame.ParentEntity
      IF szTypeFlag = "F"
         // Build full CSV file zqFrame.CSV_OutputLineItem entries.
         FOR EACH zqFrame.QueryAttribute
            CREATE ENTITY zqFrameRoot.CSV_OutputLineItem 
            IF zqFrame.QueryAttribute.GroupOperation != ""
               // Format operation attribute.
               zqFrameRoot.CSV_OutputLineItem.EntityName         = zqFrame.QueryAttribute.GroupOperationEntityName
               zqFrameRoot.CSV_OutputLineItem.AttributeName      = zqFrame.QueryAttribute.GroupOperationAttributeName
               zqFrameRoot.CSV_OutputLineItem.GroupOperation     = zqFrame.QueryAttribute.GroupOperation 
               zqFrameRoot.CSV_OutputLineItem.SortOrder          = zqFrame.QueryAttribute.DisplayOrder
               zqFrameRoot.CSV_OutputLineItem.Value              = zqFrame.QueryAttribute.Prompt
               zqFrameRoot.CSV_OutputLineItem.RecursiveLevel     = RecursiveLevel
               // Get the EntityNameToFormat of the first parent whose cardinality is > 1.
               CreateViewFromView( zqFrameT, zqFrame )
               nRC = ResetViewFromSubobject( zqFrameT )
               LOOP WHILE nRC >= 0 AND zqFrameT.ParentEntity.MaxCardinality = 1
                  nRC = ResetViewFromSubobject( zqFrameT )
               END
               zqFrameRoot.CSV_OutputLineItem.EntityNameToFormat = zqFrameT.ParentEntity.EntityName 
               DropView( zqFrameT )
            ELSE
               // Format regular attribute.
               zqFrameRoot.CSV_OutputLineItem.EntityName     = zqFrame.QueryAttribute.MappingEntityName
               zqFrameRoot.CSV_OutputLineItem.AttributeName  = zqFrame.QueryAttribute.AttributeName 
               zqFrameRoot.CSV_OutputLineItem.SortOrder      = zqFrame.QueryAttribute.DisplayOrder
               zqFrameRoot.CSV_OutputLineItem.Value          = zqFrame.QueryAttribute.Prompt
               zqFrameRoot.CSV_OutputLineItem.RecursiveLevel = RecursiveLevel
               IF zqFrame.ParentEntity.MaxCardinality > 1
                  zqFrameRoot.CSV_OutputLineItem.EntityNameToFormat = zqFrameRoot.CSV_OutputLineItem.EntityName 
               ELSE
                  // Get the EntityNameToFormat  of the first parent whose cardinality is > 1.
                  CreateViewFromView( zqFrameT, zqFrame )
                  nRC = ResetViewFromSubobject( zqFrameT )
                  LOOP WHILE nRC >= 0 AND zqFrameT.ParentEntity.MaxCardinality = 1
                     nRC = ResetViewFromSubobject( zqFrameT )
                  END
                  zqFrameRoot.CSV_OutputLineItem.EntityNameToFormat = zqFrameT.ParentEntity.EntityName 
                  DropView( zqFrameT )
               END
            END
         END
      ELSE
         // Build sparse CSV file title.
         FOR EACH zqFrame.QueryAttribute
            NextColumnNumber = NextColumnNumber + 1
            zqFrame.QueryAttribute.CSV_ColumnNumber = NextColumnNumber
            OutputLine = OutputLine + QUOTES +
                         zqFrame.QueryAttribute.Prompt +
                         QUOTES + ","
         END
      END

      // Process subobject attributes.
      SetViewToSubobject( zqFrame, "ChildEntity" )
      FormatCSV_TitleRecurs( zqFrame, zqFrameRoot, OutputLine, NextColumnNumber, szTypeFlag, RecursiveLevel )
      ResetViewFromSubobject( zqFrame )
   END

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_StartLine
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatCSV_StartLine( VIEW zqFrame BASED ON LOD zqFrame,
                     STRING ( 10000 ) OutputLine,
                     INTEGER          NextColumnCount,
                     STRING ( 1 )     szTypeFlag )

   VIEW zqFrame2 BASED ON LOD zqFrame
   INTEGER CommaCount
   INTEGER nRC
   STRING ( 32 ) szEntityName
   STRING ( 32 ) szLastEntityName

   // Format the beginning of OutputLine with values from parent entities and with additional
   // commas for skipping columns.
   // Do this by going up the recursive parent chain to the last parent with QueryAttribute values.
   // For that parent, get its last OutputLine value and determine its column entity count.
   CreateViewFromView( zqFrame2, zqFrame )
   NAME VIEW zqFrame2 "zqFrameStartLine"
   szLastEntityName = ""
   szEntityName = zqFrame2.ParentEntity.EntityName 
   nRC = ResetViewFromSubobject( zqFrame2 )
   LOOP WHILE nRC = 0
          AND zqFrame2.QueryAttribute DOES NOT EXIST
          AND szEntityName != szLastEntityName
      
      szLastEntityName = szEntityName
      nRC = ResetViewFromSubobject( zqFrame2 )
      szEntityName = zqFrame2.ParentEntity.EntityName 
   END

   IF szTypeFlag = "F"
      // The request is for "Full" lines, meaning fill each line with parent data.
      OutputLine = zqFrame2.ParentEntity.CurrentOutputLine
      // Because attributes on a subobject could generate values for columns not included in
      // CurrentOutputLine, we need to add any commas necessary to get up to NextColumnCount.
      SET CURSOR LAST zqFrame2.QueryAttribute
      IF RESULT >= zCURSOR_SET
         CommaCount = zqFrame2.QueryAttribute.CSV_ColumnNumber + 1
      ELSE
         CommaCount = 1
      END
      LOOP WHILE NextColumnCount > CommaCount
         CommaCount = CommaCount + 1
         OutputLine = OutputLine + ","
      END
   ELSE
      // The request is for "Sparse" lines, meaning fill each line with commas.
      CommaCount = 1
      LOOP WHILE NextColumnCount > CommaCount
         CommaCount = CommaCount + 1
         OutputLine = OutputLine + ","
      END
   END

   DropView( zqFrame2 )

END

/*************************************************************************************************
**
**    OPERATION: FormatRptDesign
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatRptDesign( VIEW zqFrame BASED ON LOD zqFrame,
                 VIEW vLOD,
                 VIEW qBaseR_Return,
                 STRING ( 100 ) ReportTitle,
                 STRING ( 32 ) QueryViewName )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqFrameRoot BASED ON LOD  zqFrame
   VIEW zqSumR      BASED ON LOD  zqSumR
   VIEW qBaseR
   VIEW qBaseR_Source
   VIEW qBaseR_Prompt
   VIEW qBaseR_Value
   VIEW qBaseR_Copy
   STRING ( 400 ) szFileName
   STRING ( 40 )  Tag
   SHORT          nRC
   INTEGER        Count
   INTEGER        OriginalPageHeaderSize
   INTEGER        IncreasedSize
   INTEGER        NewPosition
   INTEGER        NewGroupSize
   INTEGER        StartingPositionX

   // Create a report object (TZRPSRCO) for formatting the data defined in the ParentEntity subobject.
   // Use the qBaseR report as a frame for creating the design.

   // First, go validate the input.
   // The following was removed by DonC on 11/18/03 because it was generating an error and it would
   // appear that the code is no longer necessary because the Query has already been executed at the
   // point where the operation is called here.
   /*nRC = ValidateQuery( zqFrame, "CSV Format" )
   IF nRC < 0
      RETURN -1
   END*/

   // For regular queries, build the ParentEntity subobject for formatting attributes flagged for display.
   // For Pivot or Breakpoint queries, it is already built.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.PivotRowEntityFlag = "Y"
                 OR zqFrame.GeneralParameter.BreakpointType != ""
   IF RESULT < zCURSOR_SET
      IF zqFrame.ParentEntity EXISTS
         DELETE ENTITY zqFrame.ParentEntity
      END
      FormatDisplay( zqFrame, vLOD )
   END

   // Activate the qBaseR object.
   GetApplDirectoryFromView( szFileName, zqFrame, zAPPL_DIR_OBJECT, 400 )
   szFileName = szFileName + "qBaseR.XRP"
   // 536870912 is ACTIVATE_SYSTEM in the following activate statement.
   nRC = ActivateOI_FromFile( qBaseR, "TZRPSRCO", zqFrame, szFileName, 536870912 )
   IF nRC < 0
      MessageSend( zqFrame, "", "Query Object Setup",
                   "Error activate the qBaseR object.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -1
   END
   NAME VIEW qBaseR "qBaseR"
   
   // Make a copy of the Base Report object lest we need it for further processing later.
   ActivateOI_FromOI( qBaseR_Copy, qBaseR, zSINGLE )
   NAME VIEW qBaseR_Copy "qBaseR_Copy"
   
   // Get original page header size.
   SET CURSOR FIRST qBaseR.GroupSet WHERE qBaseR.GroupSet.Type = "PH"
   OriginalPageHeaderSize = qBaseR.Control.SZDLG_Y

   // Create the wXferO report information for page header and footer mapping.
   IF wXferO.QueryValues DOES NOT EXIST
      CREATE ENTITY wXferO.QueryValues
   END
   wXferO.QueryValues.Description = ReportTitle
   SetAttributeFromCurrentDateTime( wXferO, "QueryValues", "CurrentDate" )
      
   // Design the report by creating a Group Set for each ParentEntity with attributes. Use the
   // base Group Set, "EntitySet", for defining the characteristics of the new set.
   StartingPositionX = 80
   SET CURSOR FIRST zqFrame.GeneralParameter  
   CreateViewFromView( zqFrameRoot, zqFrame )
   SET CURSOR FIRST qBaseR.GroupSet WHERE qBaseR.GroupSet.Tag = "EntitySet"
   CreateViewFromView( qBaseR_Source, qBaseR )
   FormatRptDesignRecurs( zqFrame, zqFrameRoot, qBaseR, qBaseR_Source, QueryViewName, StartingPositionX, "" )
   DELETE ENTITY qBaseR_Source.GroupSet     // Delete the Source EntitySet subobject.
   DropView( qBaseR_Source )
   
   // PAGE HEADER FOR OPERATIONS
   // Set up the Page Header, whose format depends on the existence or not of operations (COUNT,
   // SUM, etc.) on the root entity. If there are such operations, then their values are added
   // to the "page one only" page header and the other page header without them is used starting on
   // page two. Since the "Title" controls were added to the first page header Group, they must be
   // copied to the  "page one only" Group.
   // If there are no operations, then the "page one only" page header is deleted.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName 
                AND zqFrame.GeneralParameter.ListDisplayFlag = "Y"
                AND ( zqFrame.GeneralParameter.SubgroupSearchType = "COUNT"
                   OR zqFrame.GeneralParameter.SubgroupSearchType = "NNULL"
                   OR zqFrame.GeneralParameter.SubgroupSearchType = "MIN"
                   OR zqFrame.GeneralParameter.SubgroupSearchType = "MAX"
                   OR zqFrame.GeneralParameter.SubgroupSearchType = "SUM"
                   OR zqFrame.GeneralParameter.SubgroupSearchType = "AVG" )
   IF RESULT >= zCURSOR_SET
      SET CURSOR FIRST qBaseR.GroupSet WHERE qBaseR.GroupSet.Type = "PH"
      qBaseR.Group.SubType = 2
      
      SET CURSOR NEXT qBaseR.Group
      CreateViewFromView( qBaseR_Prompt, qBaseR )
      SET CURSOR FIRST qBaseR_Prompt.Control WHERE qBaseR_Prompt.Control.Tag = "T_TotalPrompt"
      CreateViewFromView( qBaseR_Value, qBaseR )
      SET CURSOR FIRST qBaseR_Value.Control WHERE qBaseR_Value.Control.Tag = "T_TotalValue"
      // Type is always decimal for operations.
      Count = 0
      FOR EACH zqFrame.GeneralParameter
              WHERE zqFrame.GeneralParameter.SubgroupSearchType != ""
                AND zqFrame.GeneralParameter.ListDisplayFlag = "Y"
                AND zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
         Count = Count + 1
         wXferO.QueryValues.WorkString = Count
         Tag = "ReportTotal" + wXferO.QueryValues.WorkString
         
         // Create Prompt
         CREATE ENTITY qBaseR.Control
         SetMatchingAttributesByName( qBaseR,        "Control",
                                      qBaseR_Prompt, "Control", zSET_ALL )
         INCLUDE qBaseR.ControlDef FROM qBaseR_Prompt.ControlDef
         qBaseR.Control.Text = zqFrame.GeneralParameter.Title 
         qBaseR.Control.PSDLG_X = StartingPositionX
         IF zqFrame.GeneralParameter.OverrideLength != ""
            qBaseR.Control.SZDLG_X = zqFrame.GeneralParameter.OverrideLength * 15
         END
         fnProcessFontOverride( zqFrameRoot, qBaseR )
         
         // Create Value
         fnCreateMappingControl( qBaseR, qBaseR_Value, Tag, QueryViewName,
                                 zqFrame.GeneralParameter.EntityName,
                                 zqFrame.GeneralParameter.AttributeName )
         qBaseR.Control.wQueryOperation = zqFrame.GeneralParameter.SubgroupSearchType 
         qBaseR.CtrlMapER_Domain.DataType = "L"
         qBaseR.Control.PSDLG_X = StartingPositionX
         SetMatchingAttributesByName( qBaseR,       "Control",
                                      qBaseR_Value, "Control", zSET_NULL )
         IF zqFrame.GeneralParameter.OverrideLength != ""
            qBaseR.Control.SZDLG_X = zqFrame.GeneralParameter.OverrideLength * 15
         END
         StartingPositionX = StartingPositionX + qBaseR.Control.SZDLG_X + 36
         fnProcessFontOverride( zqFrameRoot, qBaseR )
      END
      
      // Remove the source Controls that were copied and their views.
      DELETE ENTITY qBaseR_Prompt.Control
      DELETE ENTITY qBaseR_Value.Control
      DropView( qBaseR_Prompt )
      DropView( qBaseR_Value )
      
      // Copy the Title Controls from the first Page Header Group to the "page one only" Group.
      // They are the Controls following the DateOfReport Control.
      // Their Y Position needs be increased by the additional size of the "page one only" Group.
      CreateViewFromView( qBaseR_Source, qBaseR )
      SET CURSOR FIRST qBaseR_Source.Group
      IncreasedSize = qBaseR.Group.SZDLG_Y - OriginalPageHeaderSize
      NewGroupSize = qBaseR_Source.Group.SZDLG_Y + IncreasedSize
      qBaseR.Group.SZDLG_Y = NewGroupSize
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "T_DateOfReport"
      SET CURSOR LAST qBaseR.Control
      SET CURSOR NEXT qBaseR_Source.Control
      LOOP WHILE RESULT >= zCURSOR_SET
         CREATE ENTITY qBaseR.Control
         SetMatchingAttributesByName( qBaseR,        "Control",
                                      qBaseR_Source, "Control", zSET_ALL )
         NewPosition = qBaseR_Source.Control.PSDLG_Y
         NewPosition = NewPosition + IncreasedSize
         qBaseR.Control.PSDLG_Y = NewPosition
         INCLUDE qBaseR.ControlDef FROM qBaseR_Source.ControlDef
         fnProcessFontOverride( zqFrameRoot, qBaseR )
         SET CURSOR NEXT qBaseR_Source.Control
      END 
      
      DropView( qBaseR_Source ) 
   ELSE
      // Delete the additional page header for totals.
      SET CURSOR FIRST qBaseR.GroupSet WHERE qBaseR.GroupSet.Type = "PH"
      SET CURSOR NEXT qBaseR.Group
      DELETE ENTITY qBaseR.Group PREVIOUS  
   END
   
   // If this is a Breakpoint Query, post-process the generated Report object.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.BreakpointType != ""
   IF RESULT >= zCURSOR_SET
      GET VIEW zqSumR NAMED "zqSumR"
      IF RESULT >= 0
         ReformatDisplayReport( zqSumR, qBaseR, qBaseR_Copy )
      END
   END
   
   DropObjectInstance( qBaseR_Copy )
   DropView( zqFrameRoot )

   // Return the report and activated data objects.
   qBaseR_Return = qBaseR

END

/*************************************************************************************************
**
**    OPERATION: FormatRptDesignRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatRptDesignRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                       VIEW zqFrameRoot BASED ON LOD zqFrame,
                       VIEW qBaseR,
                       VIEW qBaseR_Source,
                       STRING ( 32 ) QueryViewName,
                       INTEGER       FirstColumnStartingPosition,
                       STRING ( 1 )  ParentDisplayRowFlag )

   VIEW wXferO REGISTERED AS wXferO
   VIEW qBaseR_H
   INTEGER       Count
   INTEGER       PositionX
   INTEGER       PositionY
   INTEGER       StartingPositionY
   INTEGER       IncrementY
   INTEGER       LastDisplayRow
   INTEGER       Size
   INTEGER       NewColumnStartingPosition
   INTEGER       PageHeaderBottom
   STRING ( 40 ) Tag
   STRING ( 20 ) PromptValue
   STRING ( 1 )  DisplayRowFlag

   // Process each ParentEntity subobject recursively, designing the report object, qBaseR,
   // from the entities defined in the ParentEntity subobject.
   // If any Attributes have a DisplayRow value specified, then format them first.

   FOR EACH zqFrame.ParentEntity

      IF zqFrame.QueryAttribute EXISTS

         // If there are attributes to map, we will indent them.
         NewColumnStartingPosition = FirstColumnStartingPosition + 150

         // Create GroupSet for Entity
         CREATE ENTITY qBaseR.GroupSet
         SetMatchingAttributesByName( qBaseR,        "GroupSet",
                                      qBaseR_Source, "GroupSet", zSET_NULL )
         qBaseR.GroupSet.Tag = zqFrame.ParentEntity.EntityName

         // Create Entity Group
         SET CURSOR FIRST qBaseR_Source.Group WHERE qBaseR_Source.Group.Type = "ga"
         CREATE ENTITY qBaseR.Group
         SetMatchingAttributesByName( qBaseR,        "Group",
                                      qBaseR_Source, "Group", zSET_NULL )
         
         // If this is the root entity and if ForcePageBreakForEachRoot has been requested,
         // then set ForcePageBreak for the detail Group just created.
         IF zqFrameRoot.zqFrame.ForcePageBreakForEachRoot = "Y" AND
            zqFrame.ParentEntity.EntityName = zqFrameRoot.zqFrame.QueryObjectRootEntityName
            
            qBaseR.Group.ForcePageBreak = "Y"
         END
         
         Count = 0
         
         // If DisplayRow exists, order the Attributes by DisplayRow and then by DisplayOrder
         SET CURSOR FIRST zqFrame.QueryAttribute WHERE zqFrame.QueryAttribute.DisplayRow != ""
         IF RESULT >= zCURSOR_SET
            OrderEntityForView( zqFrame, "QueryAttribute", "DisplayRow A DisplayOrder A" )
         END
         
         // Format Attributes WITH DisplayRow values.
         // The starting Y position is taken from the first Control. (They're all the same.)
         // The Y position is incremented based on DisplayRow value.
         // The starting X position is passed in.
         // The X position is incremented for each Prompt and Value on the same Row.
         // Note that correctly handling the headers for the remaining nonDisplayRow
         // attributes is a little complex. The algorithm is as follows.
         // 1. For the remaining attributes, both the headers and the attribute values themselves
         //    will appear at the end of the current Detail Group.
         // 2. For attributes from any child entities, the headers will appear on a Group Header
         //    for that entity.
         StartingPositionY = qBaseR_Source.Control.PSDLG_Y
         DisplayRowFlag    = ""
         IncrementY        = qBaseR_Source.Group.SZDLG_Y
         LastDisplayRow    = 0
         FOR EACH zqFrame.QueryAttribute WHERE zqFrame.QueryAttribute.DisplayRow != ""
            Count = Count + 1
            wXferO.QueryValues.WorkString = Count
            Tag = "Attribute" + wXferO.QueryValues.WorkString
            DisplayRowFlag = "Y"
            
            // Any attributes with a DisplayRow are formatted as prompt, followed by a value on 
            // the same row.
            
            // Set up positions.
            PositionY = StartingPositionY + (IncrementY * (zqFrame.QueryAttribute.DisplayRow - 1))
            IF zqFrame.QueryAttribute.DisplayRow != LastDisplayRow
               PositionX = FirstColumnStartingPosition
            END
            LastDisplayRow = zqFrame.QueryAttribute.DisplayRow
            
            // CREATE PROMPT
            SET CURSOR FIRST qBaseR_Source.Group
            PromptValue = zqFrame.QueryAttribute.Prompt
            IF PromptValue != "" 
               PositionOnSourceCtrl( qBaseR_Source, zqFrame.QueryAttribute.Type )
               CREATE ENTITY qBaseR.Control
               SetMatchingAttributesByName( qBaseR,        "Control",
                                            qBaseR_Source, "Control", zSET_ALL )
               INCLUDE qBaseR.ControlDef FROM qBaseR_Source.ControlDef
               qBaseR.Control.Text = PromptValue
               qBaseR.Control.PSDLG_X = PositionX
               qBaseR.Control.PSDLG_Y = PositionY
               Size = zGetStringLen( PromptValue )
               qBaseR.Control.SZDLG_X = Size * 25
               PositionX = PositionX + qBaseR.Control.SZDLG_X + 36  // Increment for next X position
               fnProcessFontOverride( zqFrameRoot, qBaseR )
            END
            
            // CREATE VALUE
            SET CURSOR NEXT qBaseR_Source.Group
            IF zqFrame.QueryAttribute.AttributeName != ""
               // This is a regular mapping attribute value.
               PositionOnSourceCtrl( qBaseR_Source, zqFrame.QueryAttribute.Type )
               fnCreateMappingControl( qBaseR, qBaseR_Source, Tag, QueryViewName,
                                       zqFrame.QueryAttribute.MappingEntityName,
                                       zqFrame.QueryAttribute.AttributeName )
               fnProcessFontOverride( zqFrameRoot, qBaseR )
               IF zqFrame.QueryAttribute.DisplayDomainContext != ""
                  // If Domain Context has been specified, create a Context entity for the Control.
                  CREATE ENTITY qBaseR.CtrlMapContext
                  qBaseR.CtrlMapContext.Name = zqFrame.QueryAttribute.DisplayDomainContext
               END
            ELSE
               // This is a derived attribute value (created from an operation).
               // Assume Type to be decimal.
               SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Decimal"
               fnCreateMappingControl( qBaseR, qBaseR_Source, Tag, QueryViewName,
                                       zqFrame.QueryAttribute.GroupOperationEntityName,
                                       zqFrame.QueryAttribute.GroupOperationAttributeName )
               fnProcessFontOverride( zqFrameRoot, qBaseR )
               qBaseR.Control.wQueryOperation = zqFrame.QueryAttribute.GroupOperation
            END
            qBaseR.Control.PSDLG_X = PositionX
            qBaseR.Control.PSDLG_Y = PositionY

            // Set size to that requested.
            Size = zqFrame.QueryAttribute.Length * 15
            IF Size > 900
               Size = 900
            END
            qBaseR.Control.SZDLG_X = Size
            PositionX = PositionX + Size + 36  // Increment for next X position
            
         END
         
         // Create Header Line for DisplayRow entries.
         // If we had DisplayRow attributes, add headers for any other attributes at the bottom
         // of the Detail Group.
         IF DisplayRowFlag = "Y"
            SET CURSOR FIRST zqFrame.QueryAttribute WHERE zqFrame.QueryAttribute.DisplayRow = ""
            IF RESULT >= zCURSOR_SET 
               // Both DisplayRow and nonDisplayRow attributes exist so add the nonDisplayRow
               // header to the bottom of the Detail.
               SET CURSOR FIRST qBaseR_Source.Group
               PositionY = StartingPositionY + (IncrementY * LastDisplayRow)
               PositionX = FirstColumnStartingPosition
               FOR EACH zqFrame.QueryAttribute WHERE zqFrame.QueryAttribute.DisplayRow = ""
                  Count = Count + 1
                  wXferO.QueryValues.WorkString = Count
                  Tag = zqFrame.QueryAttribute.AttributeName + wXferO.QueryValues.WorkString
                  PromptValue = zqFrame.QueryAttribute.Prompt
                  PositionOnSourceCtrl( qBaseR_Source, zqFrame.QueryAttribute.Type )
                  fnCreatePromptControl( qBaseR, qBaseR_Source, Tag, PromptValue )
                  
                  // Set size to that requested.
                  Size = zqFrame.QueryAttribute.Length * 15
                  IF Size > 900
                     Size = 900
                  END
                  qBaseR.Control.SZDLG_X = Size
                  
                  qBaseR.Control.PSDLG_X = PositionX
                  qBaseR.Control.PSDLG_Y = PositionY
                  PositionX = PositionX + qBaseR.Control.SZDLG_X + 36
                  fnProcessFontOverride( zqFrameRoot, qBaseR )
               END
            END
         END
         
         // Format Attributes WITHOUT DisplayRow values.
         SET CURSOR LAST qBaseR_Source.Group
         PositionX = FirstColumnStartingPosition
         IF DisplayRowFlag = "Y"
            PositionY = StartingPositionY + (IncrementY * (LastDisplayRow + 1))
         ELSE
            PositionY = StartingPositionY
         END
         // A core error has required the following FOR and IF as opposed to the combination
         // statement: FOR EACH zqFrame.QueryAttribute WHERE zqFrame.QueryAttribute.DisplayRow = ""
         // The combination statement sometimes does not process correctly. In particular, we were
         // never getting an equal condition on Pivot reports.
         // At some point this core error should be corrected.
         FOR EACH zqFrame.QueryAttribute
            IF zqFrame.QueryAttribute.DisplayRow = ""
               Count = Count + 1
               wXferO.QueryValues.WorkString = Count
               Tag = "Attribute" + wXferO.QueryValues.WorkString
               IF zqFrame.QueryAttribute.AttributeName != ""
                  // This is a regular mapping attribute value.
                  PositionOnSourceCtrl( qBaseR_Source, zqFrame.QueryAttribute.Type )
                  fnCreateMappingControl( qBaseR, qBaseR_Source, Tag, QueryViewName,
                                          zqFrame.QueryAttribute.MappingEntityName,
                                          zqFrame.QueryAttribute.AttributeName )
                  IF zqFrame.QueryAttribute.DisplayDomainContext != ""
                  // If Domain Context has been specified, create a Context entity for the Control.
                     CREATE ENTITY qBaseR.CtrlMapContext
                     qBaseR.CtrlMapContext.Name = zqFrame.QueryAttribute.DisplayDomainContext
                  END
               ELSE
                  // This is a derived attribute value (created from an operation).
                  // Assume Type to be decimal.
                  SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Decimal"
                  fnCreateMappingControl( qBaseR, qBaseR_Source, Tag, QueryViewName,
                                          zqFrame.QueryAttribute.GroupOperationEntityName,
                                          zqFrame.QueryAttribute.GroupOperationAttributeName )
                  qBaseR.Control.wQueryOperation = zqFrame.QueryAttribute.GroupOperation
               END
               // Set size to that requested.
               Size = zqFrame.QueryAttribute.Length * 15
               IF Size > 900
                  Size = 900
               END
               qBaseR.Control.SZDLG_X = Size
               
               qBaseR.CtrlMapER_Domain.DataType = zqFrame.QueryAttribute.Type
               qBaseR.Control.PSDLG_X = PositionX
               qBaseR.Control.PSDLG_Y = PositionY
               PositionX = PositionX + qBaseR.Control.SZDLG_X + 36
               fnProcessFontOverride( zqFrameRoot, qBaseR )
            END
         END
         
         // If we had DisplayRow attributes, recompute and set the Group length.
         IF DisplayRowFlag = "Y"
            Size = qBaseR_Source.Group.SZDLG_Y + PositionY
            qBaseR.Group.SZDLG_Y = Size
         END

         // Create Header Line when no DisplayRow entries exist.
         // If DisplayRow entries exist, then this section is skipped because the Headers were 
         // already put on the Detail Group.
         // If DisplayRow entries for a Parent exist (the ParentDisplayRowFlag is set), then the
         // header line is created as a Group Header for the current Detail Group.
         // Otherwise, the header line is created back on the page header.
         // In either of the last two cases, use X positions from mapping fields just created.
         // Use Y position by adding to bottom of current page header or new Group Header.
         // Also increase Header by size of additional header just added.
         IF DisplayRowFlag = ""
            CreateViewFromView( qBaseR_H, qBaseR )
            SET CURSOR FIRST qBaseR_Source.Group WHERE qBaseR_Source.Group.Type = "gh"
            IF ParentDisplayRowFlag = "Y"
               CREATE ENTITY qBaseR_H.Group BEFORE
               SetMatchingAttributesByName( qBaseR_H,      "Group",
                                            qBaseR_Source, "Group", zSET_ALL )
               Tag = qBaseR.Group.Tag + "H"
               qBaseR_H.Group.Tag = Tag
            ELSE
               SET CURSOR FIRST qBaseR_H.GroupSet WHERE qBaseR_H.GroupSet.Type = "PH"
               SET CURSOR LAST  qBaseR_H.Control
               SET CURSOR FIRST qBaseR.Control
               PageHeaderBottom = qBaseR_H.Group.SZDLG_Y
               qBaseR_H.Group.SZDLG_Y = PageHeaderBottom + qBaseR_Source.Group.SZDLG_Y
            END
            
            PositionX = FirstColumnStartingPosition
            // Note that the combination FOR and IF is used because of a core error as explained
            // in the same situation above.
            FOR EACH zqFrame.QueryAttribute
               IF zqFrame.QueryAttribute.DisplayRow = ""
                  Count = Count + 1
                  wXferO.QueryValues.WorkString = Count
                  Tag = zqFrame.QueryAttribute.AttributeName + wXferO.QueryValues.WorkString
                  PromptValue = zqFrame.QueryAttribute.Prompt
                  PositionOnSourceCtrl( qBaseR_Source, zqFrame.QueryAttribute.Type )
                  fnCreatePromptControl( qBaseR_H, qBaseR_Source, Tag, PromptValue )
                  
                  // Set size to that requested.
                  Size = zqFrame.QueryAttribute.Length * 15
                  IF Size > 900
                     Size = 900
                  END
                  qBaseR_H.Control.SZDLG_X = Size
                  
                  qBaseR_H.Control.PSDLG_X = PositionX
                  qBaseR_H.Control.PSDLG_Y = PageHeaderBottom
                  PositionX = PositionX + qBaseR_H.Control.SZDLG_X + 36
                  fnProcessFontOverride( zqFrameRoot, qBaseR )
               END
            END
            DropView( qBaseR_H )
         END
      ELSE
         NewColumnStartingPosition = FirstColumnStartingPosition
      END

      // Process next level down, if it exists.
      IF zqFrame.ChildEntity EXISTS
         SetViewToSubobject( zqFrame, "ChildEntity" )
         IF ParentDisplayRowFlag = "Y" OR
            DisplayRowFlag = "Y"
            
            FormatRptDesignRecurs( zqFrame, zqFrameRoot, qBaseR, qBaseR_Source,
                                QueryViewName, NewColumnStartingPosition, "Y" )
         ELSE
            FormatRptDesignRecurs( zqFrame, zqFrameRoot, qBaseR, qBaseR_Source,
                                QueryViewName, NewColumnStartingPosition, "" )
         END
         
         ResetViewFromSubobject( zqFrame )
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: fnProcessFontOverride
**    
*************************************************************************************************/
LOCAL OPERATION
fnProcessFontOverride( VIEW zqFrameRoot BASED ON LOD zqFrame,
                       VIEW qBaseR )

   // Report Control attributes
   SHORT nMultiLineFlag
   SHORT nBoldFlag
   SHORT nItalicFlag
   SHORT nStrikeoutFlag
   SHORT nUnderlineFlag
   INTEGER lJustify
   INTEGER lFontSize
   INTEGER lOrigFontSize
   INTEGER lColor
   INTEGER lBorderStyle
   INTEGER lBorderColor
   INTEGER lTextBkColor
   INTEGER lEscapement
   INTEGER lType
   STRING ( 32 ) szFaceName
   
   IF zqFrameRoot.zqFrame.OverrideFontSize != ""
      TX_GetTextRptCtrlBOI( qBaseR, nMultiLineFlag, nBoldFlag,
                            nItalicFlag, nStrikeoutFlag,
                            nUnderlineFlag, lJustify,
                            lOrigFontSize, lColor, lTextBkColor, 
                            lBorderStyle, lBorderColor,
                            lEscapement, lType, szFaceName )
      lFontSize = zqFrameRoot.zqFrame.OverrideFontSize
      TraceLineI( "**** Orig FontSize: ", lOrigFontSize )
      IF lOrigFontSize > 15
         lFontSize = lFontSize * 10
      ELSE
         lFontSize = lFontSize
      END
      TraceLineI( "**** FontSize: ", lFontSize )
      TX_SetTextRptCtrlBOI( qBaseR, nMultiLineFlag, nBoldFlag,
                            nItalicFlag, nStrikeoutFlag,
                            nUnderlineFlag, lJustify,
                            lFontSize, lColor, lTextBkColor,
                            lBorderStyle, lBorderColor,
                            lEscapement, lType, szFaceName )
   END

END

/*************************************************************************************************
**    
**    OPERATION: PositionOnSourceCtrl
**    
**    
*************************************************************************************************/
LOCAL OPERATION
PositionOnSourceCtrl( VIEW qBaseR_Source,
                      STRING ( 1 ) DataType )

   IF DataType = "L"
      // Type is integer.
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Integer"
   ELSE
   IF DataType = "M"
      // Type is decimal.
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Decimal"
   ELSE
   IF DataType = "T"
      // Type is datetime.
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "DateTime"
   ELSE
   IF DataType = "D"
      // Type is date.
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Date"
   ELSE
      // Type is string.
      SET CURSOR FIRST qBaseR_Source.Control WHERE qBaseR_Source.Control.Tag = "Text"
   END
   END
   END
   END

END

/*************************************************************************************************
**
**    OPERATION: PostActivateRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
PostActivateRecurs( VIEW zqFrame     BASED ON LOD zqFrame,
                    VIEW zqFrameRoot BASED ON LOD zqFrame,
                    VIEW vResultSet )

   SHORT nRC
   STRING ( 32 )   szEntityName

   // Process any post activate selection entries for restricting subobject entities.
   // Also do any ording of the subobject as requested.
   SetViewToSubobject( zqFrame, "ChildEntity" )
   FOR EACH zqFrame.ParentEntity
      szEntityName = zqFrame.ParentEntity.EntityName
      nRC = SetCursorFirstEntity( vResultSet, szEntityName, "" )
      LOOP WHILE nRC >= zCURSOR_SET
         // Call routine to evaluate subselection criteria.
         // "N" indicates this is NOT Root Entity qualification.
         nRC = CheckSubgroupSelection( zqFrameRoot, vResultSet, szEntityName, "N" )
         IF nRC < 0
            // Selection criteria was not met, so drop the entity.
            DropEntity( vResultSet, szEntityName, zREPOS_NONE )
         ELSE
            // Perform restricting functionality on subobjects.
            PostActivateRecurs( zqFrame, zqFrameRoot, vResultSet )
         END
         nRC = SetCursorNextEntity( vResultSet, szEntityName, "" )
      END
      OrderRequestedEntity( zqFrameRoot, vResultSet, zqFrame.ParentEntity.EntityName )
   END
   ResetViewFromSubobject( zqFrame )

END

/*************************************************************************************************
**
**    OPERATION: fnCreateMappingControl
**
**
*************************************************************************************************/
LOCAL OPERATION
fnCreateMappingControl( VIEW qBaseR,
                        VIEW qBaseR_Source,
                        STRING ( 32 ) Tag,
                        STRING ( 32 ) szViewName,
                        STRING ( 32 ) szEntityName,
                        STRING ( 32 ) szAttributeName )

   // Create a control subobject that maps an object instance value.
   CREATE ENTITY qBaseR.Control
   SetMatchingAttributesByName( qBaseR,        "Control",
                                qBaseR_Source, "Control", zSET_NULL )
   INCLUDE qBaseR.ControlDef FROM qBaseR_Source.ControlDef
   qBaseR.Control.Tag  = Tag
   CREATE ENTITY qBaseR.CtrlMap
   CREATE ENTITY qBaseR.CtrlMapLOD_Attribute
   CREATE ENTITY qBaseR.CtrlMapRelatedEntity
   CREATE ENTITY qBaseR.CtrlMapER_Attribute
   CREATE ENTITY qBaseR.CtrlMapER_Domain
   CREATE ENTITY qBaseR.CtrlMapView
   qBaseR.CtrlMapView.Name          = szViewName
   qBaseR.CtrlMapRelatedEntity.Name = szEntityName
   qBaseR.CtrlMapER_Attribute.Name  = szAttributeName

END

/*************************************************************************************************
**
**    OPERATION: fnCreatePromptControl
**
**
*************************************************************************************************/
LOCAL OPERATION
fnCreatePromptControl( VIEW qBaseR,
                       VIEW qBaseR_Source,
                       STRING ( 32 ) Tag,
                       STRING ( 20 ) PromptValue )

   // Create a control subobject that presents a prompt value.
   CREATE ENTITY qBaseR.Control
   SetMatchingAttributesByName( qBaseR,        "Control",
                                qBaseR_Source, "Control", zSET_NULL )
   INCLUDE qBaseR.ControlDef FROM qBaseR_Source.ControlDef
   qBaseR.Control.Tag  = Tag
   qBaseR.Control.Text = PromptValue

END

/*************************************************************************************************
**
**    OPERATION: ExpandGeneralParms
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ExpandGeneralParms( VIEW zqFrameOrig BASED ON LOD zqFrame,
                    VIEW QueryView )

   VIEW zqFrame    BASED ON LOD zqFrame
   VIEW zqFrameWk  BASED ON LOD zqFrame
   VIEW zqFrameWk2 BASED ON LOD zqFrame
   
   // Expand the GeneralParamter entries with the attributes from the Query Frame (the LOD).
   // We will do this in 3 steps:
   // 1. Move the existing GeneralParamter entries to a work object.
   // 2. Create new GeneralParamter entries from the Query Frame.
   // 3. Merge the select values into the new entries.

   CreateViewFromView( zqFrame, zqFrameOrig )

   // Move the existing GeneralParamter entries.
   ACTIVATE zqFrameWk EMPTY
   NAME VIEW zqFrameWk "zqFrameWk"
   CREATE ENTITY zqFrameWk.zqFrame
   FOR EACH zqFrame.GeneralParameter
      CREATE ENTITY zqFrameWk.GeneralParameter
      SetMatchingAttributesByName( zqFrameWk, "GeneralParameter",
                                   zqFrame,   "GeneralParameter", zSET_ALL )
      FOR EACH zqFrame.GeneralSubParameter
         CREATE ENTITY zqFrameWk.GeneralSubParameter
         SetMatchingAttributesByName( zqFrameWk, "GeneralSubParameter",
                                      zqFrame,   "GeneralSubParameter", zSET_ALL )
      END
      IF zqFrame.ScopingQueryEntity EXISTS
          CREATE ENTITY zqFrameWk.ScopingQueryEntity 
          SetMatchingAttributesByName( zqFrameWk,   "ScopingQueryEntity",zqFrame, "ScopingQueryEntity", zSET_ALL )
      END
      IF zqFrame.DerivedQualAttribute  EXISTS
          CREATE ENTITY zqFrameWk.DerivedQualAttribute 
          SetMatchingAttributesByName( zqFrameWk,   "DerivedQualAttribute",zqFrame, "DerivedQualAttribute", zSET_ALL )
      END
 
      DELETE ENTITY zqFrame.GeneralParameter NONE
   END

   // Create new GeneralParameter entries from the Query Frame.
   InitializeFrameForLOD( zqFrame, QueryView )

   // Merge the select values back into the new entries.
   FOR EACH zqFrameWk.GeneralParameter
      SET CURSOR FIRST zqFrame.GeneralParameter
           WHERE zqFrame.GeneralParameter.EntityName    = zqFrameWk.GeneralParameter.EntityName
             AND zqFrame.GeneralParameter.AttributeName = zqFrameWk.GeneralParameter.AttributeName
      IF RESULT >= zCURSOR_SET
         // If this is a duplicate line, create new GeneralParameter.
         CreateViewFromView( zqFrameWk2, zqFrameWk )
         SET CURSOR PREVIOUS zqFrameWk2.GeneralParameter
              WHERE zqFrameWk2.GeneralParameter.EntityName    = zqFrameWk.GeneralParameter.EntityName
                AND zqFrameWk2.GeneralParameter.AttributeName = zqFrameWk.GeneralParameter.AttributeName
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY zqFrame.GeneralParameter
         END
         DropView( zqFrameWk2 )
         SetMatchingAttributesByName( zqFrame,   "GeneralParameter",
                                      zqFrameWk, "GeneralParameter", zSET_ALL )
      END
      FOR EACH zqFrameWk.GeneralSubParameter
         CREATE ENTITY zqFrame.GeneralSubParameter
         SetMatchingAttributesByName( zqFrame,   "GeneralSubParameter",
                                      zqFrameWk, "GeneralSubParameter", zSET_ALL )
      END
      IF zqFrameWk.ScopingQueryEntity EXISTS
          CREATE ENTITY zqFrame.ScopingQueryEntity 
          SetMatchingAttributesByName( zqFrame,   "ScopingQueryEntity",zqFrameWk, "ScopingQueryEntity", zSET_ALL )
      END
      IF zqFrameWk.DerivedQualAttribute  EXISTS
          CREATE ENTITY zqFrame.DerivedQualAttribute 
          SetMatchingAttributesByName( zqFrame,   "DerivedQualAttribute",zqFrameWk, "DerivedQualAttribute", zSET_ALL )
      END
   END

   DropObjectInstance( zqFrameWk )
   DropView( zqFrame )

END

/*************************************************************************************************
**
**    OPERATION: LocateEntityRecurs
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
LocateEntityRecurs( VIEW zqFrame BASED ON LOD zqFrame,
                    STRING ( 32 ) szEntityName )

   STRING ( 50 ) szRecursiveEntityName
   INTEGER  nRC

   // Follow the ParentEntity subobject down until the entity is found.
   //TraceLineS( "Top Entity: ", zqFrame.ParentEntity.EntityName )
   IF zqFrame.ChildEntity EXISTS
      SetViewToSubobject( zqFrame, "ChildEntity" )
      FOR EACH zqFrame.ParentEntity
         szRecursiveEntityName = zqFrame.ParentEntity.EntityName
         IF szRecursiveEntityName = szEntityName
            RETURN 0
         END
         nRC = LocateEntityRecurs( zqFrame, szEntityName )
         IF nRC = 0
            RETURN 0
         END
      END
      ResetViewFromSubobject( zqFrame )
   END
   RETURN -1

END

/*************************************************************************************************
**
**    OPERATION: SetUpOrderingInfo
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
SetUpOrderingInfo( VIEW zqFrame BASED ON LOD zqFrame )

   VIEW zqFrame2 BASED ON LOD zqFrame
   STRING ( 32 )  szSortEntity
   STRING ( 254 ) szOrderQualifier
   SHORT          nRC

   // Set up the ordering subobject information for ordering entities.
   // The top entity in the structure identifies the entity to be ordered, which is either
   // the root or a 0-to-m subentity. An attribute from a 0-to-1 subentity will affect the
   // ordering of the first entity in its parent chain that is 0-to-m.

   FOR EACH zqFrame.SortOrderEntity
      DELETE ENTITY zqFrame.SortOrderEntity NONE
   END
   FOR EACH zqFrame.GeneralParameter
      IF zqFrame.GeneralParameter.SortOrder != ""
         CreateViewFromView( zqFrame2, zqFrame )
         LocateEntityRecurs( zqFrame2, zqFrame.GeneralParameter.EntityName )
         IF zqFrame2.ParentEntity.MaxCardinality = 1
            // Locate the first parent with max cardinality > 1
            LOOP WHILE zqFrame2.ParentEntity.MaxCardinality = 1
               ResetViewFromSubobject( zqFrame2 )
            END
         END
         szSortEntity = zqFrame2.ParentEntity.EntityName
         DropView( zqFrame2 )
         SET CURSOR FIRST zqFrame.SortOrderEntity
               WHERE zqFrame.SortOrderEntity.EntityName = szSortEntity
         IF RESULT < zCURSOR_SET
            CREATE ENTITY zqFrame.SortOrderEntity
            zqFrame.SortOrderEntity.EntityName = szSortEntity
         END
         CREATE ENTITY zqFrame.SortOrderAttribute
         zqFrame.SortOrderAttribute.EntityName             = zqFrame.GeneralParameter.EntityName
         zqFrame.SortOrderAttribute.AttributeName          = zqFrame.GeneralParameter.AttributeName
         zqFrame.SortOrderAttribute.SortOrder              = zqFrame.GeneralParameter.SortOrder
         IF zqFrame.GeneralParameter.SortOrderAscendingType = ""
            zqFrame.SortOrderAttribute.SortOrderAscendingType = "A"
         ELSE
            zqFrame.SortOrderAttribute.SortOrderAscendingType = zqFrame.GeneralParameter.SortOrderAscendingType
         END
      END
   END

   // Go through each entity and set up the ordering text from the attribute information.
   OrderEntityForView( zqFrame, "SortOrderAttribute", "SortOrder A" )
   FOR EACH zqFrame.SortOrderEntity
      szOrderQualifier = ""
      FOR EACH zqFrame.SortOrderAttribute
         szOrderQualifier = szOrderQualifier +
                            zqFrame.SortOrderAttribute.EntityName + "." +
                            zqFrame.SortOrderAttribute.AttributeName + " " +
                            zqFrame.SortOrderAttribute.SortOrderAscendingType + " "
      END
      zqFrame.SortOrderEntity.OrderQualifier = szOrderQualifier
   END

END

/*************************************************************************************************
**
**    OPERATION: OrderRequestedEntity
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
OrderRequestedEntity( VIEW zqFrameRoot BASED ON LOD zqFrame,
                      VIEW vResultSet,
                      STRING ( 32 ) szEntityName )

   // Order the entity as requested.

   SET CURSOR FIRST zqFrameRoot.SortOrderEntity
         WHERE zqFrameRoot.SortOrderEntity.EntityName = szEntityName
   IF RESULT >= zCURSOR_SET
      OrderEntityForView( vResultSet, szEntityName, zqFrameRoot.SortOrderEntity.OrderQualifier )
   END

END

/*************************************************************************************************
**
**    OPERATION: MergeResultSets
**
**    Merge two Result Sets
**
*************************************************************************************************/
TRANSFORMATION OPERATION
MergeResultSets( VIEW zqFrame BASED ON LOD zqFrame,
                 VIEW vResultSetTarget,
                 VIEW vResultSetSource,
                 STRING ( 32 ) szEntityName )

   STRING ( 32 ) szAttributeName
   STRING ( 40 ) szOrderValue
   INTEGER       lID
   INTEGER       Count
   SHORT         nRC

   // Merge the roots of the Source Result Set into the Target Result Set.

   // The attribute name of the id is different for some entities in ZDM.
   IF szEntityName = "Customer"
      szAttributeName = "CustomerID"
   ELSE
   IF szEntityName = "SalesOrder"
      szAttributeName = "OrderID"
   ELSE
   IF szEntityName = "Employee"
      szAttributeName = "Empl_ID"
   ELSE
   IF szEntityName = "AccountingCategory"
      szAttributeName = "InternalID"
   ELSE
      szAttributeName = "ID"
   END
   END
   END
   END
   nRC = SetCursorFirstEntity( vResultSetSource, szEntityName, "" )
   LOOP WHILE nRC >= zCURSOR_SET
      GetIntegerFromAttribute( lID, vResultSetSource, szEntityName, szAttributeName )
      nRC = SetCursorFirstEntityByInteger( vResultSetTarget, szEntityName, szAttributeName, lID, "" )
      IF nRC < zCURSOR_SET
         SetCursorLastEntity( vResultSetTarget, szEntityName, "" )
         IncludeSubobjectFromSubobject( vResultSetTarget, szEntityName,
                                        vResultSetSource, szEntityName, zPOS_AFTER )
         // Set the work attributes.
         /*SetAttributeFromAttribute( vResultSetTarget, szEntityName, "wSubgroupValue1",
                                    vResultSetSource, szEntityName, "wSubgroupValue1" )
         SetAttributeFromAttribute( vResultSetTarget, szEntityName, "wSubgroupValue2",
                                    vResultSetSource, szEntityName, "wSubgroupValue2" )
         SetAttributeFromAttribute( vResultSetTarget, szEntityName, "wSubgroupValue3",
                                    vResultSetSource, szEntityName, "wSubgroupValue3" )
         SetAttributeFromAttribute( vResultSetTarget, szEntityName, "wSubgroupValue4",
                                    vResultSetSource, szEntityName, "wSubgroupValue4" )*/
      END
      nRC = SetCursorNextEntity( vResultSetSource, szEntityName, "" )
   END
   szOrderValue = szAttributeName + " A"
   OrderEntityForView( vResultSetTarget, szEntityName, szOrderValue )
   Count = 0
   nRC = SetCursorFirstEntity( vResultSetTarget, szEntityName, "" )
   LOOP WHILE nRC >= zCURSOR_SET
      Count = Count + 1
      nRC = SetCursorNextEntity( vResultSetTarget, szEntityName, "" )
   END
   SetCursorFirstEntity( vResultSetTarget, szEntityName, "" )
   zqFrame.zqFrame.CountOfReturnedRoots = Count

END

/*************************************************************************************************
**
**    OPERATION: FormatResultSetList
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatResultSetList( VIEW zqFrame BASED ON LOD zqFrame,
                     VIEW vResultSet )

   VIEW zqSumR   BASED ON LOD zqSumR
   STRING ( 32 )  RS_RootEntityName
   STRING ( 32 )  szMappingEntity
   STRING ( 32 )  szMappingEntityLast
   STRING ( 32 )  szMappingAttribute
   STRING ( 50 )  szDisplayPrompt
   STRING ( 32 )  szDisplayAttribute
   STRING ( 50 )  szPrompt
   STRING ( 2 )   szDisplayCount
   STRING ( 1 )   szDisplayOrderFlag
   STRING ( 254 ) szDisplayValue
   STRING ( 20 )  szDecimalValue
   STRING ( 20 )  szSpaces
   INTEGER        Count
   INTEGER        DisplayCount
   INTEGER        RootCount
   INTEGER        nRC
   INTEGER        Length
   INTEGER        SpacesLength
   INTEGER        RootEntityID
   DECIMAL        OperationResult

   // Order the Display values, if requested.
   SET CURSOR FIRST zqFrame.GeneralParameter 
              WHERE zqFrame.GeneralParameter.DisplayOrder != ""
   IF RESULT >= zCURSOR_SET
      szDisplayOrderFlag = "Y"
      Count = 0
      FOR EACH zqFrame.GeneralParameter 
         Count = Count + 1
         zqFrame.GeneralParameter.OriginalOrder = Count
      END
      OrderEntityForView( zqFrame, "GeneralParameter", "DisplayOrder A" )
   ELSE
      szDisplayOrderFlag = ""
   END
   SET CURSOR FIRST zqFrame.GeneralParameter
   
   // Delete any existing display list entities.
   FOR EACH zqFrame.zqFrame 
      DELETE ENTITY zqFrame.ResultSetDisplay NONE 
   END
   
   // Set Result Set Display Title values and mapping.
   RS_RootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName 
   DisplayCount = 0
   CREATE ENTITY zqFrame.ResultSetDisplay  
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
      IF DisplayCount < 6
         SET CURSOR FIRST zqFrame.QueryAttribute 
                    WHERE zqFrame.QueryAttribute.MappingEntityName = zqFrame.GeneralParameter.EntityName
                      AND zqFrame.QueryAttribute.AttributeName     = zqFrame.GeneralParameter.AttributeName 
         IF RESULT >= zCURSOR_SET 
         
            // This Attribute is either for the Root entity or for a child entity that has max cardinality of 1 to the Root.

            // Set the Display Title, using a suffix made up of the Display Attribute count.
            DisplayCount = DisplayCount + 1
            szDisplayCount = DisplayCount
            szDisplayPrompt = "ColumnTitle" + szDisplayCount
            SetAttributeFromString( zqFrame, "ResultSetDisplay", szDisplayPrompt, zqFrame.GeneralParameter.Title )
            
            // Create the Entity and Attribute mapping entry.
            CREATE ENTITY zqFrame.ResultSetDisplayMapping 
            zqFrame.ResultSetDisplayMapping.SourceEntityName    = zqFrame.GeneralParameter.EntityName 
            zqFrame.ResultSetDisplayMapping.SourceAttributeName = zqFrame.GeneralParameter.AttributeName            
         ELSE
            // Check to see if the Scoping entity is the Root and the Action is SUM, AVG, MAX, MIN or COUNT.
            IF ( zqFrame.GeneralParameter.SubgroupSearchType = "SUM" OR 
                 zqFrame.GeneralParameter.SubgroupSearchType = "AVG" OR  
                 zqFrame.GeneralParameter.SubgroupSearchType = "MAX" OR  
                 zqFrame.GeneralParameter.SubgroupSearchType = "MIN" OR  
                 zqFrame.GeneralParameter.SubgroupSearchType = "COUNT" ) AND 
                 zqFrame.GeneralParameter.ScopingEntityName  = RS_RootEntityName
                 
               // Add the display entry as an Action.
               
               // Set the Display Title, using a suffix made up of the Display Attribute count.
               DisplayCount = DisplayCount + 1
               szDisplayCount = DisplayCount
               szDisplayPrompt = "ColumnTitle" + szDisplayCount
               SetAttributeFromString( zqFrame, "ResultSetDisplay", szDisplayPrompt, zqFrame.GeneralParameter.Title )
               
               // Create the Entity and Attribute mapping entry.
               CREATE ENTITY zqFrame.ResultSetDisplayMapping 
               zqFrame.ResultSetDisplayMapping.SourceEntityName    = zqFrame.GeneralParameter.EntityName 
               zqFrame.ResultSetDisplayMapping.SourceAttributeName = zqFrame.GeneralParameter.AttributeName 
               zqFrame.ResultSetDisplayMapping.SubgroupAction      = zqFrame.GeneralParameter.SubgroupSearchType 
            
            END
         END
      END
   END
   
   // Build Summary Display values.
   IF DisplayCount = 0
       // What to do if we aren't showing data using the root entity (like in our qStuDTrk summary case).
       // Really this process should be a recursive one, if we want to show all of the data but I'm not sure that is worth it right at this moment, so
       // I am keeping it simple. We will just show one line, if this is not displaying the root data entitites.
       FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
          IF DisplayCount < 6
    
             // Set the Display Title, using a suffix made up of the Display Attribute count.
             DisplayCount = DisplayCount + 1
             szDisplayCount = DisplayCount
             szDisplayPrompt = "ColumnTitle" + szDisplayCount
             SetAttributeFromString( zqFrame, "ResultSetDisplay", szDisplayPrompt, zqFrame.GeneralParameter.Title )
             
             // Create the Entity and Attribute mapping entry.
             CREATE ENTITY zqFrame.ResultSetDisplayMapping 
             zqFrame.ResultSetDisplayMapping.SourceEntityName    = zqFrame.GeneralParameter.EntityName 
             zqFrame.ResultSetDisplayMapping.SourceAttributeName = zqFrame.GeneralParameter.AttributeName            
          END
       END
       RootCount = 0
       nRC = SetCursorFirstEntity( vResultSet, RS_RootEntityName, "" )
       LOOP WHILE nRC >= zCURSOR_SET
          
          nRC = SetCursorFirstEntity( zqFrame, "ResultSetDisplayMapping", "" )
          IF nRC >= zCURSOR_SET AND CheckExistenceOfEntity( vResultSet, zqFrame.ResultSetDisplayMapping.SourceEntityName ) >= zCURSOR_SET

             RootCount = RootCount + 1
             CREATE ENTITY zqFrame.ResultSetDisplayRow
             szMappingEntityLast = RS_RootEntityName
                       
              // Set the ID of the Root Entity.
              GetIntegerFromAttribute( RootEntityID, vResultSet, RS_RootEntityName, "ID" )
              zqFrame.ResultSetDisplayRow.RootEntityID = RootEntityID
              
              // Set an attribute value for each ResultSetDisplayMapping entry.
              DisplayCount = 0
              FOR EACH zqFrame.ResultSetDisplayMapping 
                 szMappingEntity    = zqFrame.ResultSetDisplayMapping.SourceEntityName
                 //IF szMappingEntity != szMappingEntityLast
                 //   nRC = SetCursorFirstEntity( vResultSet, szMappingEntity, "" )
                 //   LOOP WHILE nRC >= zCURSOR_SET
                 //      nRC = SetCursorNextEntity( vResultSet, szMappingEntity, "" )
                 //   END
                 //END
                 IF CheckExistenceOfEntity( vResultSet, zqFrame.ResultSetDisplayMapping.SourceEntityName ) >= zCURSOR_SET
                     DisplayCount = DisplayCount + 1
                     szDisplayCount = DisplayCount
                     szDisplayAttribute = "ColumnValue" + szDisplayCount
                     szMappingEntity    = zqFrame.ResultSetDisplayMapping.SourceEntityName 
                     szMappingAttribute = zqFrame.ResultSetDisplayMapping.SourceAttributeName 
                     GetStringFromAttributeByContext( szDisplayValue, vResultSet, szMappingEntity, szMappingAttribute, "", 254 )
                     IF DisplayCount = 1
                        szDisplayValue = "NOT ALL DATA is being displayed, please use Export to see all data."
                     END
                     SetAttributeFromString( zqFrame, "ResultSetDisplayRow", szDisplayAttribute, szDisplayValue )
                 END
                 szMappingEntityLast = szMappingEntity
              END
          END
          
          nRC = SetCursorNextEntity( vResultSet, RS_RootEntityName, "" )
       END
   ELSE
   
      // Loop through all root entities in the Result Set and map values to the ResultSetDisplayRow entities.
      // Also, compute number of roots.
      RootCount = 0
      nRC = SetCursorFirstEntity( vResultSet, RS_RootEntityName, "" )
      LOOP WHILE nRC >= zCURSOR_SET
         RootCount = RootCount + 1
         
         CREATE ENTITY zqFrame.ResultSetDisplayRow
         
         // Set the ID of the Root Entity.
         GetIntegerFromAttribute( RootEntityID, vResultSet, RS_RootEntityName, "ID" )
         zqFrame.ResultSetDisplayRow.RootEntityID = RootEntityID
         
         // Set an attribute value for each ResultSetDisplayMapping entry.
         DisplayCount = 0
         FOR EACH  zqFrame.ResultSetDisplayMapping 
            DisplayCount = DisplayCount + 1
            szDisplayCount = DisplayCount
            szDisplayAttribute = "ColumnValue" + szDisplayCount
            IF zqFrame.ResultSetDisplayMapping.SubgroupAction = "" 
               // Regular Mapping Entity
               szMappingEntity    = zqFrame.ResultSetDisplayMapping.SourceEntityName 
               szMappingAttribute = zqFrame.ResultSetDisplayMapping.SourceAttributeName 
               GetStringFromAttributeByContext( szDisplayValue, vResultSet, szMappingEntity, szMappingAttribute, "", 254 )
               SetAttributeFromString( zqFrame, "ResultSetDisplayRow", szDisplayAttribute, szDisplayValue )
            ELSE
               // Action Mapping
               ComputeOperationValue( zqFrame,
                                      vResultSet,
                                      OperationResult,
                                      zqFrame.ResultSetDisplayMapping.SubgroupAction,
                                      zqFrame.ResultSetDisplayMapping.SourceEntityName,
                                      zqFrame.ResultSetDisplayMapping.SourceAttributeName,
                                      RS_RootEntityName )
               szDecimalValue = OperationResult    // Convert decimal value to a string.
               // To right justify the value, prefix the value with enough spaces to make value 12 characters.
               Length = zstrlen( szDecimalValue )
               IF Length < 12
                  SpacesLength = 12 - Length
                  szSpaces       = "             "
                  szDisplayValue = szSpaces[1:SpacesLength] + szDecimalValue
               ELSE
                  szDisplayValue = szDecimalValue
               END
               SetAttributeFromString( zqFrame, "ResultSetDisplayRow", szDisplayAttribute, szDisplayValue )
            END
         END
         
         nRC = SetCursorNextEntity( vResultSet, RS_RootEntityName, "" )
      END
   
   END
   zqFrame.zqFrame.CountOfReturnedRoots = RootCount
   
   // Reset General Parm order, if necessary.
   IF szDisplayOrderFlag = "Y"
      OrderEntityForView( zqFrame, "GeneralParameter", "OriginalOrder A" )
   END

END

/*************************************************************************************************
**
**    OPERATION: dFinalParameterValue
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dFinalParameterValue( VIEW zqFrame BASED ON LOD zqFrame,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW wXferO   REGISTERED AS wXferO
   VIEW wQueryWk BASED ON LOD  wQueryWk
   STRING ( 10 )   szDate
   STRING ( 32 )   szEntityName
   STRING ( 32 )   szAttributeName
   STRING ( 2000 ) szValue

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

   // Set the final value, which is simply GeneralParameter.Value or  GeneralSubParameter.Value, unless
   // the entity, DerivedQualAttribute, exists. In that case we'll get the value from the derived attribute
   // in wQueryWk.
   
   IF zqFrame.DerivedQualAttribute EXISTS
      // User derived attribute value.
      // Create wQueryWk temporary if necessary.
      szAttributeName = zqFrame.DerivedQualAttribute.AttributeName 
      GET VIEW wQueryWk NAMED "wQueryWk"
      IF RESULT >= 0
         GetStringFromAttribute( szValue, wQueryWk, "QueryWork", szAttributeName )
      ELSE
         ACTIVATE wQueryWk EMPTY 
         NAME VIEW wQueryWk "wQueryWk" 
         CREATE ENTITY wQueryWk.QueryWork
         GetStringFromAttribute( szValue, wQueryWk, "QueryWork", szAttributeName )
         DropObjectInstance( wQueryWk )
      END
      TraceLineS( "*** Derived Qual Value: ", szValue )
   ELSE
      // Regular value
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStrFromAttrByContext( szValue, 2000,
                               zqFrame, szEntityName, "Value", "" )
   END
   StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szValue )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dDisplayBooleanValue
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dDisplayBooleanValue( VIEW zqFrame BASED ON LOD zqFrame,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 200 ) szCondition
   INTEGER Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
   
      // If a Boolean value has been set, use it.
      // Otherwise, "AND" the individual conditions.
    
      BuildConditionValues( zqFrame )
 
      // Initialize to AND condition.
      Count = 0
      FOR EACH zqFrame.Condition 
         IF Count > 0
            szCondition = szCondition + " AND " + zqFrame.Condition.BooleanConditionName
         ELSE
            szCondition = zqFrame.Condition.BooleanConditionName
         END
         Count = Count + 1
      END
      
      // Override with real expression, if specified.
      IF zqFrame.BooleanExpression EXISTS 
         IF zqFrame.BooleanExpression.TextValue != ""
            szCondition = zqFrame.BooleanExpression.TextValue
         END
      END
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szCondition )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dDisplayBooleanValue
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dDisplayBooleanLong( VIEW zqFrame BASED ON LOD zqFrame,
                          STRING ( 32 ) InternalEntityStructure,
                          STRING ( 32 ) InternalAttribStructure,
                          SHORT GetOrSetFlag )

   STRING ( 10000 ) szCondition
   STRING ( 10000 ) szCriteria
   INTEGER Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
   
      // If a Boolean value has been set, use it.
      // Otherwise, "AND" the individual conditions.
      
      BuildConditionValues( zqFrame )
      
      // Initialize to AND condition.
      Count = 0
      szCondition = ""
      FOR EACH zqFrame.Condition 
         IF Count > 0
            szCondition = szCondition + " AND <br>" 
         END
         szCriteria = zqFrame.Condition.FullSearchCriteria
         zSearchAndReplace( szCriteria, 1000, "<br>", "" )
         szCondition = szCondition + zqFrame.Condition.Prompt + " " + szCriteria  
         /*
         IF zqFrame.Condition.Value != ""
            szCondition = szCondition + zqFrame.Condition.Value + " " 
         END
         IF zqFrame.Condition.SubgroupSearchType != ""
            szCondition = szCondition + zqFrame.Condition.SubgroupSearchType + " " 
         END
         IF zqFrame.Condition.ScopingEntityName != ""
            szCondition = szCondition + zqFrame.Condition.ScopingEntityName + " " 
         END
         */
         Count = Count + 1
      END
      
      // Override with real expression, if specified.
      IF zqFrame.BooleanExpression EXISTS 
         IF zqFrame.BooleanExpression.TextValue != ""
            szCondition = zqFrame.BooleanExpression.TextValue
         END
      END
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szCondition )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dGraphParmMappingName
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dGraphParmMappingName( VIEW zqFrame BASED ON LOD zqFrame,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 100 )   szDisplayMappingName

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

   // Based on Type, combine the Entity and Attribute names to display the parm name.

   szDisplayMappingName = ""
   
   IF zqFrame.GraphMappingParameter.MappingType = "E"
      szDisplayMappingName = zqFrame.GraphMappingParameter.EntityName
   ELSE
      szDisplayMappingName = zqFrame.GraphMappingParameter.EntityName + "." + zqFrame.GraphMappingParameter.AttributeName 
   END
   
   StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szDisplayMappingName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dSubSelectQual
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dSubSelectQual( VIEW zqFrame BASED ON LOD zqFrame,
                STRING ( 32 ) InternalEntityStructure,
                STRING ( 32 ) InternalAttribStructure,
                SHORT GetOrSetFlag )

   VIEW sHost   REGISTERED AS sHost
   STRING ( 1000 ) szSubselectQualification
   STRING ( 10 )   szBooleanOperator
   STRING ( 10 )   szSelectValue
   STRING ( 30 )   szDateFormat
   STRING ( 50 )   szDateValue
   INTEGER         Length

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF zqFrame.GeneralParameter.DataType = "T"   
         szDateFormat = sHost.Host.DateFormat
      END
      // Concatenate the Subselect Qualification entries into a single display string.
      szSubselectQualification = ""
      IF zqFrame.GeneralSubParameter EXISTS
         szBooleanOperator = zqFrame.GeneralParameter.SecondLevelOperator 
         FOR EACH zqFrame.GeneralSubParameter
            szSelectValue = zqFrame.GeneralSubParameter.SearchType 
            Length = zstrlen( szSelectValue )
            IF Length = 1
               szSelectValue = " " + zqFrame.GeneralSubParameter.SearchType
            END 
            IF zqFrame.GeneralParameter.DataType = "T"
               GetStringFromAttributeByContext( szDateValue, zqFrame, "GeneralSubParameter", "wValueUpdateDate", szDateFormat, 50) 
               IF szSubselectQualification = ""
                  szSubselectQualification = szSelectValue + " " + szDateValue 
               ELSE
                  szSubselectQualification = szSubselectQualification + " " + szBooleanOperator + "<br>" + 
                                             szSelectValue + " " + szDateValue 
               END 
            ELSE
               IF szSubselectQualification = ""
                  szSubselectQualification = szSelectValue + " " + zqFrame.GeneralSubParameter.Value 
               ELSE
                  szSubselectQualification = szSubselectQualification + " " + szBooleanOperator + "<br>" +
                                             szSelectValue + " " + zqFrame.GeneralSubParameter.Value 
               END
            END
         END
      END
      
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szSubselectQualification )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dSubSelectQualTree
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dSubSelectQualTree( VIEW zqFrame BASED ON LOD zqFrame,
                    STRING ( 32 ) InternalEntityStructure,
                    STRING ( 32 ) InternalAttribStructure,
                    SHORT GetOrSetFlag )

   VIEW zqFrame2 BASED ON LOD zqFrame
   STRING ( 1000 ) szSubselectQualification

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      CreateViewFromView( zqFrame2, zqFrame)   
      // Get value from corresponding GeneralParameter value.
      szSubselectQualification = ""
      SET CURSOR FIRST zqFrame2.GeneralParameter WHERE zqFrame2.GeneralParameter.EntityName    = zqFrame2.DisplayTreeEntity.EntityName 
                                                   AND zqFrame2.GeneralParameter.AttributeName = zqFrame2.DisplayTreeAttribute.Name 
      IF RESULT >= zCURSOR_SET
         szSubselectQualification = zqFrame2.GeneralParameter.dSubSelectQualification 
      END
      DropObjectInstance( zqFrame2 )
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szSubselectQualification )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dGenParmExternalValue
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dGenParmExternalValue( VIEW zqFrame BASED ON LOD zqFrame,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )
   VIEW sHost    REGISTERED AS sHost
   VIEW wXferO   REGISTERED AS wXferO
   VIEW zqFrame2 BASED ON LOD zqFrame
   STRING ( 1000 ) szExternalValue
   STRING ( 32 ) szDateFormat
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      CreateViewFromView( zqFrame2, zqFrame )
      szDateFormat = sHost.Host.DateFormat
      IF zqFrame2.GeneralParameter.DataType = "T"
          zqFrame2.GeneralParameter.wWorkDate  = zqFrame2.GeneralParameter.Value 
          GetStringFromAttributeByContext( szExternalValue, zqFrame2, "GeneralParameter", "wWorkDate", szDateFormat, 32 )
      ELSE
          szExternalValue = zqFrame2.GeneralParameter.ExternalValue
          IF zqFrame2.GeneralParameter.DataType = "S" AND szExternalValue = ""
              szExternalValue = zqFrame2.GeneralParameter.Value
          END
      END
      
      DropObjectInstance( zqFrame2 )
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szExternalValue )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dSelCritExternalValue
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dSelCritExternalValue( VIEW zqFrame BASED ON LOD zqFrame,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )
   VIEW sHost REGISTERED AS sHost
   VIEW wXferO  REGISTERED AS wXferO
   VIEW zqFrameChk BASED ON LOD zqFrame
   STRING ( 1000 ) szExternalValue
   STRING ( 32 ) szDateFormat
  
   CASE GetOrSetFlag
   OF   zDERIVED_GET:
   
      CreateViewFromView( zqFrameChk, zqFrame )
      SET CURSOR FIRST zqFrameChk.GeneralParameter 
         WHERE zqFrameChk.GeneralParameter.SeqNo = zqFrameChk.SelectionCriteria.ParameterSeqNo
      zqFrameChk.GeneralParameter.SearchType = zqFrameChk.SelectionCriteria.SearchType 
      zqFrameChk.GeneralParameter.Value      = zqFrameChk.SelectionCriteria.Value 

      szDateFormat = sHost.Host.DateFormat
      IF zqFrameChk.GeneralParameter.DataType = "T"
          zqFrameChk.SelectionCriteria.wWorkDate   = zqFrameChk.SelectionCriteria.Value  
          GetStringFromAttributeByContext( szExternalValue, zqFrameChk, "SelectionCriteria", "wWorkDate", szDateFormat, 32 )
      ELSE
          szExternalValue = zqFrameChk.SelectionCriteria.ExternalValue 
          IF zqFrameChk.GeneralParameter.DataType = "S" AND szExternalValue = ""
             szExternalValue = zqFrameChk.SelectionCriteria.Value 
          END
      END
      
      DropObjectInstance( zqFrameChk )
      StoreStringInRecord( zqFrame, InternalEntityStructure, InternalAttribStructure, szExternalValue )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: BuildConditionValues
**    
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildConditionValues( VIEW zqFrameOrig BASED ON LOD zqFrame )

   VIEW zqFrame BASED ON LOD zqFrame
   INTEGER ConditionCount
   STRING ( 2 ) szConditionCount
   STRING ( 3 ) ConditionName
   STRING ( 50 ) szTraceValue
   
   // Build the Condition entities for the Boolean operator.
   
   CreateViewFromView( zqFrame, zqFrameOrig )
   NAME VIEW zqFrame "zqFrameTemp"
   
   // Make sure that RootQualificationFlag is set for Root Entities.
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
         zqFrame.GeneralParameter.RootQualificationFlag = "Y"
      END 
   END
   
   IF zqFrame.BooleanExpression DOES NOT EXIST
      CREATE ENTITY zqFrame.BooleanExpression  
   END
   FOR EACH zqFrame.Condition 
      DELETE ENTITY zqFrame.Condition NONE  
   END
   ConditionCount = 0
   FOR EACH zqFrame.GeneralParameter
      IF zqFrame.GeneralParameter.SearchType != ""
         IF ( zqFrame.GeneralParameter.RootQualificationFlag = "Y" AND
              //zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND
              zqFrame.GeneralParameter.AttributeName != "GeographicPositionZipCode" AND
              zqFrame.GeneralParameter.AttributeName != "GeographicPositionMiles" AND
              zqFrame.GeneralParameter.SubgroupSearchType = "" ) OR
            ( zqFrame.GeneralParameter.SubgroupSearchType = "ANY" AND
              zqFrame.GeneralParameter.ScopingEntityName  = zqFrame.zqFrame.QueryObjectRootEntityName AND
              //zqFrame.GeneralParameter.DerivedAttributeFlag = "" AND
              zqFrame.GeneralParameter.AttributeName != "GeographicPositionZipCode" AND
              zqFrame.GeneralParameter.AttributeName != "GeographicPositionMiles"  ) OR
            ( zqFrame.GeneralParameter.SubgroupSearchType != "" AND
              zqFrame.GeneralParameter.ScopingEntityName  = zqFrame.zqFrame.QueryObjectRootEntityName )
         
            CREATE ENTITY zqFrame.Condition  
            ConditionCount = ConditionCount + 1
            szConditionCount = ConditionCount
            ConditionName = "C" + szConditionCount
            zqFrame.Condition.BooleanConditionName = ConditionName
            SetMatchingAttributesByName( zqFrame, "Condition",
                                         zqFrame, "GeneralParameter", zSET_NULL )
            zqFrame.GeneralParameter.wBooleanConditionName = zqFrame.Condition.BooleanConditionName 
            IF zqFrame.GeneralParameter.SearchType = "Subselect"
               // For Subselect search, use dSubSelectQualification value.
               zqFrame.Condition.FullSearchCriteria = zqFrame.GeneralParameter.dSubSelectQualification 
            ELSE
               // For regular search, concatenate Search Oper and Value.
               zqFrame.Condition.FullSearchCriteria = zqFrame.GeneralParameter.SearchType + " " +
                                                      zqFrame.GeneralParameter.Value 
            END
         ELSE
            zqFrame.GeneralParameter.wBooleanConditionName = ""
         END 
      ELSE
         zqFrame.GeneralParameter.wBooleanConditionName = ""
      END
   END
   DropView( zqFrame )
   SET CURSOR FIRST zqFrameOrig.GeneralParameter 
   SET CURSOR FIRST zqFrameOrig.Condition 

END

/*************************************************************************************************
**    
**    OPERATION: ResyncObjectNames
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
ResyncObjectNames( VIEW zqFrame BASED ON LOD zqFrame,
                   VIEW vLOD,
                   STRING ( 1 ) szLanguageCode )  // Language Code will be used when the ER supports more than one Query Attribute/Entity Name.

   STRING ( 1 )   szChangeFlag
   STRING ( 100 ) szMsg

   // If no Entity and Attribute ZKeys exist, build them.
   // If Entity and Attribute ZKeys do exist, make sure that the names in the object are the same as the
   // names in the LOD, and if not, change them.
   // We must change names in GeneralParameter, ObjectEntity and SelectionCriteria. If anything has changed,
   // we should also execute BuildConditionValues to rebuild Condition entries.
   // The other entities containing EntityName and AttributeName values are rebuilt each time the query
   // is run and do not need to be changed.
   
   IssueError( zqFrame,0,0, "This Operation does not appear to be used anywhere." )
   
   /*FOR EACH zqFrame.GeneralParameter
      IF zqFrame.GeneralParameter.EntityZKey = ""
         // The Entity ZKey has not been set, so set Entity and Attribute ZKeys.
         SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.Name = zqFrame.GeneralParameter.EntityName 
         IF RESULT >= zCURSOR_SET 
            zqFrame.GeneralParameter.EntityZKey = vLOD.LOD_Entity.ZKey
            SET CURSOR FIRST vLOD.ER_Attribute WITHIN vLOD.LOD_Entity
                       WHERE vLOD.ER_Attribute.Name = zqFrame.GeneralParameter.AttributeName 
            IF RESULT >= zCURSOR_SET
               zqFrame.GeneralParameter.AttributeZKey = vLOD.ER_Attribute.ZKey
            ELSE
               IssueError( zqFrame,0,.0, "zqFrame Attribute does not match LOD entity" )
            END
            IF zqFrame.GeneralParameter.ScopingEntityName != ""
               SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.Name = zqFrame.GeneralParameter.ScopingEntityName 
               IF RESULT >= zCURSOR_SET
                  zqFrame.GeneralParameter.ScopingEntityZKey = vLOD.LOD_Entity.ZKey
               ELSE
                  IssueError( zqFrame,0,.0, "zqFrame Attribute does not match LOD entity" )
               END
            END
         ELSE
            IssueError( zqFrame,0,.0, "zqFrame Entity does not match LOD entity" )
         END
      ELSE
         // An Entity ZKey exists, so make sure that the Entity and Attribute names in zqFrame are the same
         // as those in the LOD.
         
         SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.ZKey = zqFrame.GeneralParameter.EntityZKey
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.Name = zqFrame.GeneralParameter.EntityName
         END
         IF RESULT >= zCURSOR_SET
            IF zqFrame.GeneralParameter.EntityName != vLOD.LOD_Entity.Name
               
               // Set ObjectEntity Name
               SET CURSOR FIRST zqFrame.ObjectEntity WHERE zqFrame.ObjectEntity.EntityName = zqFrame.GeneralParameter.EntityName 
               IF RESULT >= zCURSOR_SET
                  zqFrame.ObjectEntity.EntityName = vLOD.LOD_Entity.Name
               ELSE
                  IssueError( zqFrame,0,.0, "zqFrame ObjectEntity not found" )
               END
               
               // Set SelectionCriteria Scoping Name
               SET CURSOR FIRST zqFrame.SelectionCriteria WHERE zqFrame.SelectionCriteria.ScopingEntityName = zqFrame.GeneralParameter.EntityName 
               IF RESULT >= zCURSOR_SET
                  zqFrame.SelectionCriteria.ScopingEntityName = vLOD.LOD_Entity.Name
               ELSE
                  IssueError( zqFrame,0,.0, "zqFrame SelectionCriteria not found" )
               END
               
               // Set General Parameter Name and flag change.
               zqFrame.GeneralParameter.EntityName = vLOD.LOD_Entity.Name
               szChangeFlag = "Y"
            END
            SET CURSOR FIRST vLOD.ER_Attribute WITHIN vLOD.LOD_Entity
                       WHERE vLOD.ER_Attribute.ZKey = zqFrame.GeneralParameter.AttributeZKey 
            IF RESULT < zCURSOR_SET
               SET CURSOR FIRST vLOD.ER_Attribute WITHIN vLOD.LOD_Entity
                          WHERE vLOD.ER_Attribute.Name = zqFrame.GeneralParameter.AttributeName
            END
            IF RESULT >= zCURSOR_SET
               IF zqFrame.GeneralParameter.AttributeName != vLOD.ER_Attribute.Name
                  zqFrame.GeneralParameter.AttributeName = vLOD.ER_Attribute.Name
                  szChangeFlag = "Y"
               END
               zqFrame.GeneralParameter.AttributeZKey = vLOD.ER_Attribute.ZKey
               
               // This code makes sure that the DerivedAttributeFlag is set correctly for derived attributes, derived entities and
               // work entities. This wasn't always set correctly earlier.
               IF vLOD.LOD_Attribute.Work = "Y" OR 
                  vLOD.LOD_Entity.Derived = "Y" OR 
                  vLOD.LOD_Entity.Work = "Y"
                  
                  zqFrame.GeneralParameter.DerivedAttributeFlag = "Y"
               END
            ELSE
               IssueError( zqFrame,0,.0, "zqFrame Attribute ZKey not found" )
            END
         ELSE
            szMsg = "Entity, " + zqFrame.GeneralParameter.EntityName + ",in GeneralParameter not found in LOD."
            IssueError( zqFrame,0,.0, szMsg )
         END
         IF zqFrame.GeneralParameter.ScopingEntityName != ""
            IF zqFrame.GeneralParameter.ScopingEntityZKey != ""
               SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.ZKey = zqFrame.GeneralParameter.ScopingEntityZKey
               IF RESULT < zCURSOR_SET
                  SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.Name = zqFrame.GeneralParameter.ScopingEntityName 
               END
               IF RESULT >= zCURSOR_SET
                  IF zqFrame.GeneralParameter.ScopingEntityName != vLOD.LOD_Entity.Name
                     zqFrame.GeneralParameter.ScopingEntityName = vLOD.LOD_Entity.Name
                     szChangeFlag = "Y"
                  END
               ELSE
                  IssueError( zqFrame,0,.0, "zqFrame Scoping Entity ZKey and Name not found" )
               END
            ELSE
               SET CURSOR FIRST vLOD.LOD_Entity WHERE vLOD.LOD_Entity.Name = zqFrame.GeneralParameter.ScopingEntityName 
               IF RESULT >= zCURSOR_SET
                  zqFrame.GeneralParameter.ScopingEntityZKey = vLOD.LOD_Entity.ZKey
               ELSE
                  IssueError( zqFrame,0,.0, "zqFrame Attribute does not match LOD entity" )
               END
            END
         END
         
         // If a GeneralParameter value changed and this Query uses Boolean operators, execute BuildConditionValues 
         // to rebuild the Condition entries.
         IF zqFrame.BooleanExpression EXISTS AND szChangeFlag = "Y"
            BuildConditionValues( zqFrame )
         END
         
      END
   END*/

END

/*************************************************************************************************
**    
**    OPERATION: SetEntityActivateFlagR
**    
*************************************************************************************************/
LOCAL OPERATION
SetEntityActivateFlagR( VIEW zqFrame     BASED ON LOD zqFrame,
                        VIEW zqFrameRoot BASED ON LOD zqFrame )

   FOR EACH zqFrame.ParentEntity 
      IF zqFrame.ParentEntity.LOD_MaxCardinality != 1
         SET CURSOR FIRST zqFrameRoot.GeneralParameter 
                    WHERE zqFrameRoot.GeneralParameter.EntityName = zqFrame.ParentEntity.EntityName 
                      AND ( zqFrameRoot.GeneralParameter.SearchType != "" 
                         OR zqFrameRoot.GeneralParameter.ForceSubobjectActivateFlag = "Y"
                         OR zqFrameRoot.GeneralParameter.ForceFormatMaxCardinalityOne = "Y"
                         OR zqFrameRoot.GeneralParameter.SubgroupSearchType != "" )
         IF RESULT < zCURSOR_SET
            zqFrame.ParentEntity.NoActivateSubobjectFlag = "Y"
         END
      END
      SetViewToSubobject( zqFrame, "ChildEntity" )
      SetEntityActivateFlagR( zqFrame, zqFrameRoot )
      ResetViewFromSubobject( zqFrame )
   END

END

/*************************************************************************************************
**    
**    OPERATION: BuildAutoRestrictR
**    
*************************************************************************************************/
LOCAL OPERATION
BuildAutoRestrictR( VIEW zqFrame     BASED ON LOD zqFrame,
                    VIEW zqFrameRoot BASED ON LOD zqFrame )

   VIEW QueryView
   STRING ( 1 ) szNoRestrictFlag
   STRING ( 1 ) szDisplayFlag
   
   GET VIEW QueryView NAMED "QueryView"
   IF RESULT < zCURSOR_SET
      IssueError( zqFrame,0,0, "No LOD" )
      RETURN -1
   END

   // Create a RESTRICTING entry of ID for each 0-to-m relationship with 
   // 1. No attribute being displayed,
   // 2. No NoActivateSubobjectFlag being specified.
   // 3. An ID attribute for the Entity in the LOD.
   FOR EACH zqFrame.ParentEntity 
   
      // Check each Attribute under ParentEntity to see if any of them are to be displayed. If so, don't
      // create the RESTRICTING entry.
      szDisplayFlag = ""
      FOR EACH zqFrame.QueryAttribute 
         SET CURSOR FIRST zqFrameRoot.GeneralParameter
                    WHERE zqFrameRoot.GeneralParameter.EntityName      = zqFrame.QueryAttribute.MappingEntityName 
                      AND zqFrameRoot.GeneralParameter.AttributeName   = zqFrame.QueryAttribute.AttributeName 
                      AND zqFrameRoot.GeneralParameter.ListDisplayFlag = "Y" 
         IF RESULT >= zCURSOR_SET
            szDisplayFlag = "Y"
         END
      END

      // Create RESTRICTING entry if there was no Display Attribute for the Entity and the Force entity option wasn't selected.
      szNoRestrictFlag = ""
      IF zqFrame.ParentEntity.NoActivateSubobjectFlag = "Y" AND szDisplayFlag = ""
         SET CURSOR FIRST zqFrameRoot.GeneralParameter 
                    WHERE zqFrameRoot.GeneralParameter.EntityName    = zqFrame.ParentEntity.EntityName 
                      AND zqFrameRoot.GeneralParameter.AttributeName = "ID"
                      AND zqFrameRoot.GeneralParameter.SearchType    = "="
                      AND zqFrameRoot.GeneralParameter.Value         = "0"
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST QueryView.LOD_Entity
                       WHERE QueryView.LOD_Entity.Name = zqFrame.ParentEntity.EntityName 
            IF RESULT >= zCURSOR_SET
               IF QueryView.LOD_Entity.Derived = "Y" OR QueryView.LOD_Entity.Work = "Y"
                  // Since this is a work or derived entity, don't continue checking the subobject.
                  szNoRestrictFlag = "Y"
               ELSE
                  SET CURSOR FIRST QueryView.ER_Attribute WITHIN QueryView.LOD_Entity
                             WHERE QueryView.ER_Attribute.Name = "ID"
                  IF RESULT >= zCURSOR_SET
                     // Restrict the entity and don't continue checking the subobject.
                     SET CURSOR FIRST zqFrameRoot.GeneralParameter 
                                WHERE zqFrameRoot.GeneralParameter.EntityName = zqFrame.ParentEntity.EntityName 
                     CREATE ENTITY zqFrameRoot.GeneralParameter BEFORE
                     zqFrameRoot.GeneralParameter.EntityName    = zqFrame.ParentEntity.EntityName 
                     zqFrameRoot.GeneralParameter.AttributeName = "ID"
                     zqFrameRoot.GeneralParameter.SearchType    = "="
                     zqFrameRoot.GeneralParameter.Value         = "0"
                     szNoRestrictFlag = "Y"
                  END
               END
            END
         END
      END
      IF szNoRestrictFlag = ""
         SetViewToSubobject( zqFrame, "ChildEntity" )
         BuildAutoRestrictR( zqFrame, zqFrameRoot )
         ResetViewFromSubobject( zqFrame )
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: ParseBooleanVML
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
ParseBooleanVML( VIEW zqFrame BASED ON LOD zqFrame )

   STRING ( 1000 ) szBooleanExpression
   STRING ( 1000 ) szStringValue
   STRING ( 1 )    szCurrentCharacter
   INTEGER         Index
   INTEGER         ExpressionLength
   INTEGER         ValueLength
   
   // Parse the Boolean Expression and create each component value as an entity Component.
   
   szBooleanExpression = zqFrame.BooleanExpression.TextValue 
   ExpressionLength = zstrlen( szBooleanExpression )
   
   // Loop through expression creating Components entries for each "(" or ")" or nonblank character string.
   Index = 1
   LOOP WHILE Index <= ExpressionLength
      szCurrentCharacter = szBooleanExpression[Index:1]
      IF szCurrentCharacter != " "
         IF szCurrentCharacter = "(" OR 
            szCurrentCharacter = ")"
            
            // Value is paren, which doesn't require a preceding or following blank.
            CREATE ENTITY zqFrame.Component 
            zqFrame.Component.Value = szCurrentCharacter 
            Index = Index + 1
         ELSE
            // Value is any nonblank string.
            szStringValue = szCurrentCharacter
            Index = Index + 1
            szCurrentCharacter = szBooleanExpression[Index:1]
            LOOP WHILE Index <= ExpressionLength AND szCurrentCharacter != " " AND szCurrentCharacter != ")"
               szStringValue = szStringValue + szCurrentCharacter
               Index = Index + 1
               szCurrentCharacter = szBooleanExpression[Index:1]
            END
            CREATE ENTITY zqFrame.Component 
            zqFrame.Component.Value = szStringValue 
            IF szCurrentCharacter = " "
               Index = Index + 1
            END
         END
      ELSE
         // Character is blank, so skip to next character.
         Index = Index + 1
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: ValidateScopingEntity
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
ValidateScopingEntity( VIEW zqFrameOrig BASED ON LOD zqFrame )

   VIEW zqFrame BASED ON LOD zqFrame
   STRING ( 1 )  FoundFlag
   STRING ( 32 ) szScopingEntityName
   STRING ( 32 ) szRootEntityName
   STRING ( 32 ) szCurrentEntityName
   STRING ( 32 ) szParameterEntityName
   INTEGER nRC
   
   // Validate that the Scoping Entity is in the upper path for the qualification entity.
   // The Qualification entry must be a parent of the GeneralParameter entry or the Root.
   // Because ResetViewFromSubobject is not setting the nRC correctly when it reaches the top, we will
   // check for the Root Entity instead.
   szRootEntityName      = zqFrameOrig.zqFrame.QueryObjectRootEntityName
   szParameterEntityName = zqFrameOrig.GeneralParameter.EntityName 
   szScopingEntityName   = zqFrameOrig.GeneralParameter.ScopingEntityName
   CreateViewFromView( zqFrame, zqFrameOrig )
   IF szScopingEntityName != "" AND szScopingEntityName != szParameterEntityName

      SET CURSOR FIRST zqFrame.ParentEntity
      LocateEntityRecurs( zqFrame, zqFrame.GeneralParameter.EntityName )
      FoundFlag = "N"
      //nRC = 0
      //LOOP WHILE nRC = 0
      szCurrentEntityName = zqFrame.ParentEntity.EntityName
      LOOP WHILE szCurrentEntityName != szRootEntityName
         nRC = ResetViewFromSubobject( zqFrame )
         IF szScopingEntityName = zqFrame.ParentEntity.EntityName
            FoundFlag = "Y"
         END
         szCurrentEntityName = zqFrame.ParentEntity.EntityName
      END
      IF FoundFlag = "N"
         MessageSend( zqFrameOrig, "", "Logical Query",
                      "Scoping Entity is not the same entity or a parent entity of the current Entity on the same line.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropView( zqFrame )
         RETURN 2
      END
   END
   
   DropView( zqFrame )
   RETURN 0
   
END

/*************************************************************************************************
**    
**    OPERATION: FormatQueryForChart
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatQueryForChart( VIEW zqFrame BASED ON LOD zqFrame,
                     VIEW vResultSet,
                     STRING ( 20 ) szGraphName )

   VIEW mChart BASED ON LOD  mChart
   STRING ( 50 )  szRootEntityName
   STRING ( 20 )  szGraphTitleName
   VIEW  sHost REGISTERED AS sHost
   STRING (254) szFile
   
   // Format the Query for the mChart object.
   
   // Set up ordering information as requested.
   SetUpOrderingInfo( zqFrame )

   // Set up the Root Entity Name, which is different for Pivot Queries.
   SET CURSOR FIRST zqFrame.GeneralParameter
              WHERE zqFrame.GeneralParameter.PivotRowEntityFlag = "Y"
   IF RESULT >= zCURSOR_SET
      szRootEntityName = "ResultRow"
   ELSE
      SET CURSOR FIRST zqFrame.GeneralParameter
                 WHERE zqFrame.GeneralParameter.BreakpointType != ""
      IF RESULT >= zCURSOR_SET
         szRootEntityName = "SummaryRoot"
      ELSE
         szRootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName
      END
   END
   
   // Clear any existing display entries.
   IF zqFrame.GraphDisplay EXISTS
      DELETE ENTITY zqFrame.GraphDisplay  
   END
   CREATE ENTITY zqFrame.GraphDisplay 
   
   // If an mChart object exists, we'll add to it. Otherwise, we'll create a new one.
   GET VIEW mChart NAMED "mChart" 
   IF RESULT >= 0 
      SET CURSOR FIRST mChart.Chart WHERE mChart.Chart.Tag = szGraphName
      IF RESULT >= zCURSOR_SET
         DELETE ENTITY mChart.Chart NONE 
      ELSE
         SET CURSOR LAST mChart.Chart  
      END
   ELSE
      ACTIVATE mChart EMPTY
      ActivateEmptyObjectInstance( mChart, "mChart", zqFrame, zMULTIPLE )
      NAME VIEW mChart "mChart" 
   END
   NAME VIEW mChart "mChartQuery" 
   NAME VIEW zqFrame "zqFrameQuery"
   //FOR EACH zqFrame.GraphDefinition    // Used if multiple graphs are kept in each zqFrame object.
   
   // Format Chart for the single Graph on which we're positioned.
   IF zqFrame.GraphDefinition.Type = "Pie Chart"
      CREATE ENTITY mChart.Chart 
      // Put in the tag of the groupbox.
      mChart.Chart.Tag = szGraphName
      mChart.Chart.Type = "Pie"
      
      CreatePieChartRS( mChart, zqFrame, vResultSet, szGraphName )
      
      szGraphTitleName = "GraphTitle1" 
      SetAttributeFromAttribute( zqFrame, "GraphDisplay", szGraphTitleName, zqFrame, "GraphDefinition", "Title" )
      szFile= sHost.Host.TempDir + "PieChart.txt"
      WriteChartToFile( mChart,szFile)    // Generate file for debug purposes.
   END
   
   IF zqFrame.GraphDefinition.Type = "Basic Bar Chart"
      CREATE ENTITY mChart.Chart 
      // Put in the tag of the groupbox.
      mChart.Chart.Tag = szGraphName
      mChart.Chart.Type = "Bar"
      
      CreateBarChartRS( mChart, zqFrame, vResultSet, szGraphName ,"horizontal")
      
      szGraphTitleName = "GraphTitle1"
      SetAttributeFromAttribute( zqFrame, "GraphDisplay", szGraphTitleName, zqFrame, "GraphDefinition", "Title" )
      szFile= sHost.Host.TempDir +"BarChart.txt"
      WriteChartToFile( mChart, szFile)    // Generate file for debug purposes.
   END
   IF zqFrame.GraphDefinition.Type = "Basic Bar Chart - Vertical"
      CREATE ENTITY mChart.Chart 
      // Put in the tag of the groupbox.
      mChart.Chart.Tag = szGraphName
      mChart.Chart.Type = "Bar"
      
      CreateBarChartRS( mChart, zqFrame, vResultSet, szGraphName ,"vertical")
      
      szGraphTitleName = "GraphTitle1"
      SetAttributeFromAttribute( zqFrame, "GraphDisplay", szGraphTitleName, zqFrame, "GraphDefinition", "Title" )
      szFile= sHost.Host.TempDir +"BarChart.txt"
      WriteChartToFile( mChart, szFile)    // Generate file for debug purposes.
   END
   IF zqFrame.GraphDefinition.Type = "2-Level Bar Chart"
      CREATE ENTITY mChart.Chart 
      // Put in the tag of the groupbox.
      mChart.Chart.Tag = szGraphName
      mChart.Chart.Type = "Bar"
      
      Create2_LevelBarChart( mChart, zqFrame, vResultSet, szGraphName, "horizontal" )
      
      szGraphTitleName = "GraphTitle1" 
      SetAttributeFromAttribute( zqFrame, "GraphDisplay", szGraphTitleName, zqFrame, "GraphDefinition", "Title" )
      szFile= sHost.Host.TempDir +"BarChart.txt"
      WriteChartToFile( mChart, szFile )    // Generate file for debug purposes.
   END
   IF zqFrame.GraphDefinition.Type = "2-Level Bar Chart - Vertical"
      CREATE ENTITY mChart.Chart 
      // Put in the tag of the groupbox.
      mChart.Chart.Tag = szGraphName
      mChart.Chart.Type = "Bar"
      
      Create2_LevelBarChart( mChart, zqFrame, vResultSet, szGraphName ,"vertical")
      
      szGraphTitleName = "GraphTitle1" 
      SetAttributeFromAttribute( zqFrame, "GraphDisplay", szGraphTitleName, zqFrame, "GraphDefinition", "Title" )
      szFile= sHost.Host.TempDir +"BarChart.txt"
      WriteChartToFile( mChart, szFile )    // Generate file for debug purposes.
   END
END

/*************************************************************************************************
**    
**    OPERATION: SetFrameStructure
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
SetFrameStructure( VIEW zqFrame BASED ON LOD zqFrame,
                   VIEW QueryView )

   VIEW zqFrameRoot BASED ON LOD  zqFrame
   VIEW QueryViewRecurs
   STRING ( 50 )  ReportTitle
   STRING ( 32 )  szRootEntityName
   INTEGER curParameterID
   curParameterID = 1
   // Go to build the QueryFrameAttribute entries.
   RebuildFrameAttr( zqFrame, QueryView )
   
   // Rebuild the ObjectEntity entries, because an update to the object could make the old ones invalid..
   FOR EACH zqFrame.ObjectEntity 
      DELETE ENTITY zqFrame.ObjectEntity NONE 
   END
   CreateViewFromView( zqFrameRoot, zqFrame )         // We need recursive views for the operation.
   NAME VIEW zqFrameRoot "zqFrameRoot"
   CreateViewFromView( QueryViewRecurs, QueryView )
   szRootEntityName = QueryView.LOD_EntityParent.Name
   RebuildObjEntRecurs( zqFrame, zqFrameRoot, QueryViewRecurs, QueryView, szRootEntityName, szRootEntityName )
   DropView( zqFrameRoot )
   DropView( QueryViewRecurs )
   SET CURSOR FIRST zqFrame.ObjectEntity 

   // Make sure that no GeneralParameter exists in the Query that does not exist in the Query Frame.
   FOR EACH zqFrame.GeneralParameter
      SET CURSOR FIRST QueryView.QueryFrameAttribute
           WHERE QueryView.QueryFrameAttribute.EntityName    = zqFrame.GeneralParameter.EntityName
             AND QueryView.QueryFrameAttribute.AttributeName = zqFrame.GeneralParameter.AttributeName
      IF RESULT < zCURSOR_SET
         DELETE ENTITY zqFrame.GeneralParameter NONE
      ELSE 
          zqFrame.GeneralParameter.wID = curParameterID
          curParameterID = curParameterID + 1
      END
      
   END
   SET CURSOR FIRST zqFrame.GeneralParameter 
   zqFrame.zqFrame.wNextGPID = curParameterID
   
   // Initialize data for QueryUpdate.
   InitQueryUpdate( zqFrame, QueryView )
   SET CURSOR FIRST QueryView.LOD     // Make sure root is visible.
   
   // Make sure that ScopingSourceQueryEntity entries exist for including Scoping Entities.
   /*IF zqFrame.ScopingSourceQueryEntity DOES NOT EXIST
      FOR EACH QueryView.LOD_Entity
         CREATE ENTITY zqFrame.ScopingSourceQueryEntity 
         zqFrame.ScopingSourceQueryEntity.EntityName = QueryView.LOD_Entity.Name
      END
   END
   
   // Also include appropriate ScopingQueryEntity entities based on GeneralParameter.ScopingEntityName.
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.ScopingEntityName != ""
         IF zqFrame.ScopingQueryEntity DOES NOT EXIST
            SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity 
                       WHERE zqFrame.ScopingSourceQueryEntity.EntityName = zqFrame.GeneralParameter.ScopingEntityName 
            INCLUDE zqFrame.ScopingQueryEntity FROM zqFrame.ScopingSourceQueryEntity 
         END
      END
   END
   SET CURSOR FIRST zqFrame.GeneralParameter 
   SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity*/
   
   BuildConditionValues( zqFrame )

END

/*************************************************************************************************
**    
**    OPERATION: InitQueryUpdate
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
InitQueryUpdate( VIEW zqFrame BASED ON LOD zqFrame,
                 VIEW QueryView )

   VIEW zqFrameRecurs BASED ON LOD zqFrame
   STRING ( 32 )  szEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szParentEntityName
   STRING ( 50 )  szEntityNamePrefix
   INTEGER        IndentLevel
   
   // Since we have removed the AND/OR selection for root entity qualification, initialize
   // the FirstLevelOperator to AND.
   zqFrame.zqFrame.FirstLevelOperator = "AND"
   
   // Make sure that Condition entities are built.
   BuildConditionValues( zqFrame )

   // Build the recursive structure used by "Scoping Entity" processing.
   FormatDisplay( zqFrame, QueryView )
   
   // Build the Display Tree Values fresh.
   FOR EACH zqFrame.DisplayTreeEntity 
      DELETE ENTITY zqFrame.DisplayTreeEntity NONE 
   END
   FOR EACH QueryView.LOD_Entity
      CREATE ENTITY zqFrame.DisplayTreeEntity 
      szEntityName = QueryView.LOD_Entity.Name
      IndentLevel =  QueryView.LOD_Entity.IndentLvl
      IF IndentLevel = 1
         // The Entity Name is not indented at all.
         zqFrame.DisplayTreeEntity.Name       = szEntityName
         zqFrame.DisplayTreeEntity.EntityName = szEntityName
      ELSE
         // The Entity Name is indented based on the Indent Level.
         szEntityNamePrefix = ""
         LOOP WHILE IndentLevel > 0
            szEntityNamePrefix = szEntityNamePrefix + "....."
            IndentLevel = IndentLevel - 3
         END
         zqFrame.DisplayTreeEntity.Name       = szEntityNamePrefix + szEntityName
         zqFrame.DisplayTreeEntity.EntityName = szEntityName
      END
      FOR EACH QueryView.LOD_Attribute
         CREATE ENTITY zqFrame.DisplayTreeAttribute 
         zqFrame.DisplayTreeAttribute.Name = QueryView.ER_Attribute.Name
      END
      OrderEntityForView(zqFrame,"DisplayTreeAttribute","Name A" )
   END
   
   // Set ParentEntity and cardinality for each DisplayTreeEntity entity.
   CreateViewFromView( zqFrameRecurs, zqFrame )
   NAME VIEW zqFrameRecurs "zqFrameRecurs"
   szParentEntityName = ""
   SetTreeParentRecurs( zqFrame, zqFrameRecurs, szParentEntityName )
   DropView( zqFrameRecurs )
   
   SET CURSOR FIRST zqFrame.DisplayTreeEntity  
   
   // Build the Graphics selection entries.
   InitializeQueryGraphMapping( zqFrame )
   
   // Make sure that ScopingSourceQueryEntity entries are built afresh.
   FOR zqFrame.ScopingSourceQueryEntity
      DELETE ENTITY zqFrame.ScopingSourceQueryEntity NONE 
   END
   FOR EACH QueryView.LOD_Entity
      CREATE ENTITY zqFrame.ScopingSourceQueryEntity 
      zqFrame.ScopingSourceQueryEntity.EntityName = QueryView.LOD_Entity.Name
   END
   
   // Also include appropriate ScopingQueryEntity entities based on GeneralParameter.ScopingEntityName.
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.ScopingEntityName != ""
         IF zqFrame.ScopingQueryEntity DOES NOT EXIST
            SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity 
                       WHERE zqFrame.ScopingSourceQueryEntity.EntityName = zqFrame.GeneralParameter.ScopingEntityName 
            INCLUDE zqFrame.ScopingQueryEntity FROM zqFrame.ScopingSourceQueryEntity 
         END
      END
   END
   OrderEntityForView(zqFrame,"ScopingSourceQueryEntity","EntityName A" )
   SET CURSOR FIRST zqFrame.GeneralParameter 
   SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity

END

/*************************************************************************************************
**    
**    OPERATION: SetTreeParentRecurs
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
SetTreeParentRecurs( VIEW zqFrameRoot   BASED ON LOD zqFrame,
                     VIEW zqFrameRecurs BASED ON LOD zqFrame,
                     STRING ( 32 ) szParentEntityName )
                     
   STRING ( 32 ) szChildParentEntityName

   // Process setting DisplayTreeEntity Parent Entity Name.
   SET CURSOR FIRST zqFrameRoot.DisplayTreeEntity 
              WHERE zqFrameRoot.DisplayTreeEntity.EntityName = zqFrameRecurs.ParentEntity.EntityName 
   zqFrameRoot.DisplayTreeEntity.ParentEntityName = szParentEntityName
   // Add (0-1) or (0-m) suffix depending on cardinality.
   IF zqFrameRecurs.ParentEntity.MaxCardinality = 1
      zqFrameRoot.DisplayTreeEntity.Name = zqFrameRoot.DisplayTreeEntity.Name + " (0-1)"
   ELSE
      zqFrameRoot.DisplayTreeEntity.Name = zqFrameRoot.DisplayTreeEntity.Name + " (0-m)"
   END
   
   // Process each child.
   IF zqFrameRecurs.ChildEntity EXISTS
      // All children have the same parent.
      szChildParentEntityName = zqFrameRecurs.ParentEntity.EntityName 
      SetViewToSubobject( zqFrameRecurs, "ChildEntity"  )
      FOR EACH zqFrameRecurs.ParentEntity 
         SetTreeParentRecurs( zqFrameRoot, zqFrameRecurs, szChildParentEntityName )
      END
      ResetViewFromSubobject( zqFrameRecurs )
   END

END

/*************************************************************************************************
**    
**    OPERATION: AddColumnAttribute
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
AddColumnAttribute( VIEW zqFrame BASED ON LOD zqFrame,
                    STRING ( 500 ) szDisplayValue,
                    STRING ( 50 )  szEntityName,
                    STRING ( 50 )  szAttributeName )

   STRING ( 50 ) szColumnAttributeName
   
   // Set the ResultSetDisplayRow attribute value based on the Entity/Attribute Names and the GeneralParameter.
   SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.EntityName    = szEntityName AND
                                                   zqFrame.GeneralParameter.AttributeName = szAttributeName
   szColumnAttributeName = zqFrame.GeneralParameter.wDisplayValueColumnName 
   // Skip if the name is null, which it would be if we've gone over 6 attributes to display.
   IF szColumnAttributeName != ""    
      SetAttributeFromString( zqFrame, "ResultSetDisplayRow", szColumnAttributeName, szDisplayValue )
      zqFrame.ResultSetDisplayRow.wMappedFlag = "Y"
   END

END

/*************************************************************************************************
**    
**    OPERATION: BuildSummaryDetail
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildSummaryDetail( VIEW zqFrame BASED ON LOD zqFrame,
                    VIEW vResultSet,
                    VIEW vLOD )

   VIEW wXferO   REGISTERED AS wXferO
   VIEW sHost    REGISTERED AS sHost
   VIEW mUser    REGISTERED AS mCurrentUser
   VIEW zqFrameT BASED ON LOD  zqFrame
   STRING ( 400 ) szFileName
   STRING ( 1 )   szFoundFlag
   STRING ( 50 )  szAttributeName
   STRING ( 50 )  szColumnTitle
   STRING ( 3 )   szCount
   INTEGER nRC
   INTEGER Count
   
   // Format the Query Detail Mapping in the ResultSetDisplay subobject.
   
   // Set the Column Mapping Names, which are sequential according to the display order of the General Parameters.
   Count = 0
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
      Count = Count + 1
      IF Count <= 6 
         szCount = Count
         szAttributeName = "ColumnValue" + szCount
         zqFrame.GeneralParameter.wDisplayValueColumnName = szAttributeName
      END
   END
   SET CURSOR FIRST zqFrame.GeneralParameter  
   
   // We will use a copy of zqFrame because the Format process is somehow currently dropping the ParentEntity subobject.
   zqFrame.zqFrame.wCurrentDisplayFormat = "R"
   ActivateOI_FromOI( zqFrameT, zqFrame, zSINGLE )
   NAME VIEW zqFrameT "zqFrameT"
   SetUpOrderingInfo( zqFrameT )     // Set up ordering information as requested
   // For FileDownLoad, the FileName will be built on UserName.
   szFileName = sHost.Host.TempDir + "QueryReport" + mUser.User.UserName + ".csv"
   wXferO.QueryValues.OutputFileName = szFileName
   TraceLineS( "### CSV File: ", szFileName )
   SET CURSOR FIRST zqFrameT.ParentEntity   // We need to make sure position is on ParentEntity.
   nRC = FormatCSV_FrmResultSet( zqFrameT,
                                 vLOD,
                                 vResultSet,
                                 "",              // This is for format Sparse or Full and we will assume Sparse.
                                 szFileName )
   // Copy any mapped ResultSetDisplayRow entries over to the display zqFrame object.
   IF zqFrame.ResultSetDisplay EXISTS
      DELETE ENTITY zqFrame.ResultSetDisplay  
   END
   CREATE ENTITY zqFrame.ResultSetDisplay  
   FOR EACH zqFrameT.ResultSetDisplayRow WHERE zqFrameT.ResultSetDisplayRow.wMappedFlag = "Y"
      CREATE ENTITY zqFrame.ResultSetDisplayRow 
      SetMatchingAttributesByName( zqFrame, "ResultSetDisplayRow", zqFrameT, "ResultSetDisplayRow", zSET_ALL ) 
   END
   SET CURSOR FIRST zqFrame.ResultSetDisplayRow
   DropObjectInstance( zqFrameT )
   
   // Create the Column Heading values.
   Count = 0
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
      Count = Count + 1
      IF Count <= 6
         szCount = Count
         szAttributeName = "ColumnTitle" + szCount
         szColumnTitle = zqFrame.GeneralParameter.Title 
         SetAttributeFromString( zqFrame, "ResultSetDisplay", szAttributeName, szColumnTitle )
      END
   END
   SET CURSOR FIRST zqFrame.GeneralParameter

END

/*************************************************************************************************
**    
**    OPERATION: FormatRS_DisplayToCSV
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
FormatRS_DisplayToCSV( VIEW zqFrame BASED ON LOD zqFrame,
                       STRING ( 400 ) szOutputFileName )

   INTEGER FilePointer
   INTEGER Count
   STRING ( 1000 ) szOutputLine
   STRING ( 20 )   szCount
   STRING ( 20 )   szAttributeName
   STRING ( 400 )  szDisplayValue
   STRING ( 200 )  szMsg
   STRING ( 200 )  szLangConv
   
   // Format the data defined in the zqFrame.ResultSetDisplay subobject to a csv file.
   
   // Open File
   FilePointer = SysOpenFile( zqFrame, szOutputFileName, COREFILE_CREATE )
   IF FilePointer < 0
      GetTextConv(szLangConv, zqFrame, "Invalid Directory for writing CSV Query File: ","")
      szMsg = szLangConv + szOutputFileName
      MessageSend( zqFrame, "", "Query", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Build Title Line.
   szDisplayValue = zqFrame.zqFrame.ReportTitle  
   szOutputLine  = QUOTES + szDisplayValue + QUOTES
   SysWriteLine( zqFrame, FilePointer, szOutputLine )
   
   // Build Column Headings from each non-null zqFrame.ResultSetDisplay.ColumnTitlexx entry.
   Count = 1
   LOOP WHILE Count <= 6
      szCount = Count
      szAttributeName = "ColumnTitle" + szCount
      GetStringFromAttribute( szDisplayValue, zqFrame, "ResultSetDisplay", szAttributeName )
      IF szDisplayValue != ""
         // KJS 08/08/22 - Replace any double quotes with single quotes.
         zSearchAndReplace( szDisplayValue, 400, QUOTES, "'" )
         
         // There is a value.
         IF Count = 1
            szOutputLine  = QUOTES + szDisplayValue + QUOTES
         ELSE
            szOutputLine  = szOutputLine + "," + QUOTES + szDisplayValue + QUOTES
         END
      END
      Count = Count + 1
   END
   SysWriteLine( zqFrame, FilePointer, szOutputLine )    // Write of column headers line.
   
   // Build zqFrame.ResultSetDisplayRow entries.
   FOR EACH zqFrame.ResultSetDisplayRow 
      // Build display values from each non-null zqFrame.ResultSetDisplayRow.ColumnValue1xx entry.
      Count = 1
      LOOP WHILE Count <= 6
         szCount = Count
         szAttributeName = "ColumnValue" + szCount
         GetStringFromAttribute( szDisplayValue, zqFrame, "ResultSetDisplayRow", szAttributeName )
         IF szDisplayValue != ""
            // KJS 08/08/22 - Replace any double quotes with single quotes.
            zSearchAndReplace( szDisplayValue, 400, QUOTES, "'" )
            
            IF Count = 1
               szOutputLine  = QUOTES + szDisplayValue + QUOTES
            ELSE
               szOutputLine  = szOutputLine + "," + QUOTES + szDisplayValue + QUOTES
            END
         ELSE 
            IF Count = 1
               szOutputLine  = "" 
            ELSE
               szOutputLine  = szOutputLine + "," 
            END
         END
         Count = Count + 1
      END
      SysWriteLine( zqFrame, FilePointer, szOutputLine )    // Write of column headers line.
   END
   
   // Close File.
   SysCloseFile( zqFrame, FilePointer, 0 )

END

/*************************************************************************************************
**    
**    OPERATION: SetUpForNewQuery
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
SetUpForNewQuery( VIEW zqFrame BASED ON LOD zqFrame,
                  VIEW AnyView )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW zqSQuery  BASED ON LOD  zqSQuery
   VIEW QueryView
   VIEW vTZCMLPLO 
   INTEGER nRC

   GET VIEW QueryView NAMED "QueryView"
   IF RESULT >= 0
      DropObjectInstance( QueryView )
   END
  
   // Activate the LOD (Query View) requested.
   nRC = ActivateQueryViewByName( AnyView, QueryView, wXferO.QueryObject.ObjectName )
   IF nRC < 0
      MessageSend( AnyView, "", "Select Query",
                   "Query LOD cannot be loaded.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   NAME VIEW QueryView "QueryView"

   // Create the empty stored query instance and tie it to the stored frame for the new frame.
   ACTIVATE zqSQuery EMPTY
   CREATE ENTITY zqSQuery.StoredQuery
   NAME VIEW zqSQuery "zqSQuery"

   // Create initial zqFrame from the LOD just activated.
   GET VIEW zqFrame NAMED "zqFrame"
   IF RESULT >= 0
      DropObjectInstance( zqFrame )
   END
   
   ACTIVATE zqFrame EMPTY
   CREATE ENTITY zqFrame.zqFrame
   NAME VIEW zqFrame "zqFrame"
   zqFrame.zqFrame.QueryObjectName           = QueryView.LOD.Name
   zqFrame.zqFrame.QueryObjectRootEntityName = QueryView.LOD_EntityParent.Name
   
   // Build QueryFrameAttribute for LOD, which are used in InitializeFrameForLOD.
   RebuildFrameAttr( zqFrame, QueryView )
   
   // Build out the zqFrame subobject structures.
   InitializeFrameForLOD( zqFrame, QueryView )
   zqFrame.zqFrame.ResultType = "P"
   SET CURSOR FIRST zqFrame.GeneralParameter

   // Set new Query information in wXferO.
   wXferO.QueryValues.CurrentStoredQueryName = ""
   wXferO.QueryValues.QueryObjectName        = zqFrame.zqFrame.QueryObjectName

END
